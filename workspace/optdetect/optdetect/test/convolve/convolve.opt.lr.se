Printing analysis 'Scalar Evolution Analysis' for function 'filter_kernel':
Classifying expressions for: @filter_kernel
  %div = sdiv i32 %kn, 2, !dbg !50
  -->  %div
  %sub = sub nsw i32 0, %div, !dbg !57
  -->  (-1 * %div)
  %0 = sext i32 %sub to i64
  -->  (sext i32 (-1 * %div) to i64)
  %1 = sext i32 %div to i64, !dbg !61
  -->  (sext i32 %div to i64)
  %2 = sext i32 %sub to i64
  -->  (sext i32 (-1 * %div) to i64)
  %3 = sext i32 %div to i64, !dbg !61
  -->  (sext i32 %div to i64)
  %4 = sext i32 %n to i64, !dbg !61
  -->  (sext i32 %n to i64)
  %5 = sext i32 %size_x to i64, !dbg !61
  -->  (sext i32 %size_x to i64)
  %6 = sext i32 %m to i64, !dbg !61
  -->  (sext i32 %m to i64)
  %7 = sext i32 %kn to i64, !dbg !61
  -->  (sext i32 %kn to i64)
  %indvars.iv16 = phi i64 [ %2, %for.body.lr.ph ], [ %indvars.iv.next6, %for.inc16 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %indvars.iv4 = phi i64 [ %0, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body4>		Exits: (sext i32 %div to i64)
  %8 = sub nsw i64 %4, %indvars.iv16, !dbg !71
  -->  {((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))),+,-1}<nw><%for.body>		Exits: {((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))),+,-1}<nw><%for.body>
  %9 = mul nsw i64 %8, %5, !dbg !72
  -->  {((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>		Exits: {((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %10 = add nsw i64 %9, %6, !dbg !72
  -->  {((sext i32 %m to i64) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>		Exits: {((sext i32 %m to i64) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %11 = sub nsw i64 %10, %indvars.iv4, !dbg !72
  -->  {{((sext i32 %m to i64) + (-1 * (sext i32 (-1 * %div) to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>,+,-1}<nw><%for.body4>		Exits: {((sext i32 %m to i64) + (-1 * (sext i32 %div to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %arrayidx = getelementptr inbounds i8* %in, i64 %11, !dbg !73
  -->  {{((sext i32 %m to i64) + (-1 * (sext i32 (-1 * %div) to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))) + %in),+,(-1 * (sext i32 %size_x to i64))}<%for.body>,+,-1}<nw><%for.body4>		Exits: {((sext i32 %m to i64) + (-1 * (sext i32 %div to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))) + %in),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %12 = load i8* %arrayidx, align 1, !dbg !73
  -->  %12		Exits: <<Unknown>>
  %conv = zext i8 %12 to i32, !dbg !73
  -->  (zext i8 %12 to i32)		Exits: <<Unknown>>
  %13 = mul nsw i64 %indvars.iv16, %7, !dbg !74
  -->  {((sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64)),+,(sext i32 %kn to i64)}<%for.body>		Exits: {((sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64)),+,(sext i32 %kn to i64)}<%for.body>
  %14 = sub nsw i64 1, %13, !dbg !75
  -->  {(1 + (-1 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64))),+,(-1 * (sext i32 %kn to i64))}<%for.body>		Exits: {(1 + (-1 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64))),+,(-1 * (sext i32 %kn to i64))}<%for.body>
  %15 = add nsw i64 %14, 1, !dbg !75
  -->  {(2 + (-1 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64))),+,(-1 * (sext i32 %kn to i64))}<%for.body>		Exits: {(2 + (-1 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64))),+,(-1 * (sext i32 %kn to i64))}<%for.body>
  %16 = sub nsw i64 %15, %indvars.iv4, !dbg !75
  -->  {{(2 + ((sext i32 (-1 * %div) to i64) * (-1 + (-1 * (sext i32 %kn to i64))))),+,(-1 * (sext i32 %kn to i64))}<%for.body>,+,-1}<nw><%for.body4>		Exits: {(2 + (-1 * (sext i32 %div to i64)) + (-1 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64))),+,(-1 * (sext i32 %kn to i64))}<%for.body>
  %arrayidx13 = getelementptr inbounds float* %kernel, i64 %16, !dbg !76
  -->  {{(8 + (4 * (sext i32 (-1 * %div) to i64) * (-1 + (-1 * (sext i32 %kn to i64)))) + %kernel),+,(-4 * (sext i32 %kn to i64))}<%for.body>,+,-4}<%for.body4>		Exits: {(8 + (-4 * (sext i32 %div to i64)) + (-4 * (sext i32 (-1 * %div) to i64) * (sext i32 %kn to i64)) + %kernel),+,(-4 * (sext i32 %kn to i64))}<%for.body>
  %indvars.iv.next = add nsw i64 %indvars.iv4, 1, !dbg !78
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %indvars.iv17 = phi i64 [ %indvars.iv16, %for.cond2.for.end_crit_edge ], [ %indvars.iv16, %for.body ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %indvars.iv.next6 = add nsw i64 %indvars.iv17, 1, !dbg !80
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %conv19 = fptoui float %pixel.0.lcssa to i8, !dbg !81
  -->  %conv19
  %mul20 = mul nsw i32 %n, %size_x, !dbg !82
  -->  (%n * %size_x)
  %add21 = add nsw i32 %mul20, %m, !dbg !82
  -->  ((%n * %size_x) + %m)
  %idxprom22 = sext i32 %add21 to i64, !dbg !83
  -->  (sext i32 ((%n * %size_x) + %m) to i64)
  %arrayidx23 = getelementptr inbounds i8* %out, i64 %idxprom22, !dbg !83
  -->  ((sext i32 ((%n * %size_x) + %m) to i64) + %out)<nsw>
Determining loop execution counts for: @filter_kernel
Loop %for.body4: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body4: max backedge-taken count is 4294967295
Loop %for.body: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body: max backedge-taken count is 4294967295
Printing analysis 'Scalar Evolution Analysis' for function 'filter_kernel_2d':
Classifying expressions for: @filter_kernel_2d
  %div = sdiv i32 %kn, 2, !dbg !46
  -->  %div
  %sub = sub nsw i32 0, %div, !dbg !53
  -->  (-1 * %div)
  %0 = sext i32 %sub to i64
  -->  (sext i32 (-1 * %div) to i64)
  %1 = sext i32 %div to i64, !dbg !57
  -->  (sext i32 %div to i64)
  %2 = sext i32 %x to i64, !dbg !57
  -->  (sext i32 %x to i64)
  %3 = sext i32 %sub to i64
  -->  (sext i32 (-1 * %div) to i64)
  %4 = sext i32 %div to i64, !dbg !57
  -->  (sext i32 %div to i64)
  %5 = sext i32 %y to i64, !dbg !57
  -->  (sext i32 %y to i64)
  %c.015 = phi i32 [ 0, %for.body.lr.ph ], [ %12, %for.inc13 ]
  -->  %c.015		Exits: <<Unknown>>
  %indvars.iv12 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next9, %for.inc13 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %6 = sext i32 %c.015 to i64
  -->  (sext i32 %c.015 to i64)		Exits: <<Unknown>>
  %indvars.iv6 = phi i64 [ %6, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 %c.015 to i64),+,1}<nsw><%for.body4>		Exits: ((sext i32 %div to i64) + (sext i32 %c.015 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %indvars.iv15 = phi i64 [ %0, %for.body4.lr.ph ], [ %indvars.iv.next2, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body4>		Exits: (sext i32 %div to i64)
  %7 = add nsw i64 %2, %indvars.iv15, !dbg !67
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64)),+,1}<nw><%for.body4>		Exits: ((sext i32 %x to i64) + (sext i32 %div to i64))
  %8 = add nsw i64 %5, %indvars.iv12, !dbg !68
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>		Exits: {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>
  %arrayidx = getelementptr inbounds i8** %in, i64 %8, !dbg !69
  -->  {((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,8}<%for.body>		Exits: {((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,8}<%for.body>
  %9 = load i8** %arrayidx, align 8, !dbg !69
  -->  %9		Exits: <<Unknown>>
  %arrayidx7 = getelementptr inbounds i8* %9, i64 %7, !dbg !69
  -->  ({((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64)),+,1}<nw><%for.body4> + %9)<nsw>		Exits: <<Unknown>>
  %10 = load i8* %arrayidx7, align 1, !dbg !69
  -->  %10		Exits: <<Unknown>>
  %conv = zext i8 %10 to i32, !dbg !69
  -->  (zext i8 %10 to i32)		Exits: <<Unknown>>
  %indvars.iv.next = add nsw i64 %indvars.iv6, 1, !dbg !70
  -->  {(1 + (sext i32 %c.015 to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64) + (sext i32 %c.015 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %arrayidx10 = getelementptr inbounds float* %kernel, i64 %indvars.iv6, !dbg !71
  -->  {((4 * (sext i32 %c.015 to i64)) + %kernel),+,4}<nsw><%for.body4>		Exits: ((4 * (sext i32 %div to i64)) + (4 * (sext i32 %c.015 to i64)) + (-4 * (sext i32 (-1 * %div) to i64)) + %kernel)
  %indvars.iv.next2 = add nsw i64 %indvars.iv15, 1, !dbg !70
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %split = phi i64 [ %indvars.iv.next, %for.inc ]
  -->  %split		Exits: <<Unknown>>
  %indvars.iv13 = phi i64 [ %indvars.iv12, %for.cond2.for.end_crit_edge ], [ %indvars.iv12, %for.body ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %c.1.lcssa.wide = phi i64 [ %split, %for.cond2.for.end_crit_edge ], [ %6, %for.body ]
  -->  %c.1.lcssa.wide		Exits: <<Unknown>>
  %12 = trunc i64 %c.1.lcssa.wide to i32, !dbg !73
  -->  (trunc i64 %c.1.lcssa.wide to i32)		Exits: <<Unknown>>
  %indvars.iv.next9 = add nsw i64 %indvars.iv13, 1, !dbg !74
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %conv16 = fptoui float %pixel.0.lcssa to i8, !dbg !75
  -->  %conv16
  %idxprom17 = sext i32 %x to i64, !dbg !76
  -->  (sext i32 %x to i64)
  %idxprom18 = sext i32 %y to i64, !dbg !76
  -->  (sext i32 %y to i64)
  %arrayidx19 = getelementptr inbounds i8** %out, i64 %idxprom18, !dbg !76
  -->  ((8 * (sext i32 %y to i64))<nsw> + %out)<nsw>
  %13 = load i8** %arrayidx19, align 8, !dbg !76
  -->  %13
  %arrayidx20 = getelementptr inbounds i8* %13, i64 %idxprom17, !dbg !76
  -->  ((sext i32 %x to i64) + %13)<nsw>
Determining loop execution counts for: @filter_kernel_2d
Loop %for.body4: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body4: max backedge-taken count is 4294967295
Loop %for.body: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body: max backedge-taken count is 4294967295
Printing analysis 'Scalar Evolution Analysis' for function 'convolve_arr_linear':
Classifying expressions for: @convolve_arr_linear
  %div = sdiv i32 %kn, 2, !dbg !46
  -->  %div
  %sub = sub nsw i32 %dim_x, %div, !dbg !52
  -->  ((-1 * %div) + %dim_x)
  %m.05 = phi i32 [ %div, %for.body.lr.ph ], [ %inc6, %for.inc5 ]
  -->  {%div,+,1}<nsw><%for.body>		Exits: (-1 + (-1 * %div) + %dim_x)
  %sub2 = sub nsw i32 %dim_y, %div, !dbg !59
  -->  ((-1 * %div) + %dim_y)		Exits: ((-1 * %div) + %dim_y)
  %n.02 = phi i32 [ %div, %for.body4.lr.ph ], [ %inc, %for.inc ]
  -->  {%div,+,1}<nsw><%for.body4>		Exits: (-1 + (-1 * %div) + %dim_y)
  %inc = add nsw i32 %n.02, 1, !dbg !64
  -->  {(1 + %div),+,1}<nsw><%for.body4>		Exits: ((-1 * %div) + %dim_y)
  %inc6 = add nsw i32 %m.05, 1, !dbg !66
  -->  {(1 + %div),+,1}<nsw><%for.body>		Exits: ((-1 * %div) + %dim_x)
Determining loop execution counts for: @convolve_arr_linear
Loop %for.body4: backedge-taken count is (-1 + (-2 * %div) + %dim_y)
Loop %for.body4: max backedge-taken count is -1
Loop %for.body: backedge-taken count is (-1 + (-2 * %div) + %dim_x)
Loop %for.body: max backedge-taken count is -1
Printing analysis 'Scalar Evolution Analysis' for function 'convolve_arr_indirection':
Classifying expressions for: @convolve_arr_indirection
  %div = sdiv i32 %kn, 2, !dbg !46
  -->  %div
  %sub = sub nsw i32 %dim_x, %div, !dbg !52
  -->  ((-1 * %div) + %dim_x)
  %m.05 = phi i32 [ %div, %for.body.lr.ph ], [ %inc6, %for.inc5 ]
  -->  {%div,+,1}<nsw><%for.body>		Exits: (-1 + (-1 * %div) + %dim_x)
  %sub2 = sub nsw i32 %dim_y, %div, !dbg !59
  -->  ((-1 * %div) + %dim_y)		Exits: ((-1 * %div) + %dim_y)
  %n.02 = phi i32 [ %div, %for.body4.lr.ph ], [ %inc, %for.inc ]
  -->  {%div,+,1}<nsw><%for.body4>		Exits: (-1 + (-1 * %div) + %dim_y)
  %inc = add nsw i32 %n.02, 1, !dbg !64
  -->  {(1 + %div),+,1}<nsw><%for.body4>		Exits: ((-1 * %div) + %dim_y)
  %inc6 = add nsw i32 %m.05, 1, !dbg !66
  -->  {(1 + %div),+,1}<nsw><%for.body>		Exits: ((-1 * %div) + %dim_x)
Determining loop execution counts for: @convolve_arr_indirection
Loop %for.body4: backedge-taken count is (-1 + (-2 * %div) + %dim_y)
Loop %for.body4: max backedge-taken count is -1
Loop %for.body: backedge-taken count is (-1 + (-2 * %div) + %dim_x)
Loop %for.body: max backedge-taken count is -1
Printing analysis 'Scalar Evolution Analysis' for function 'convolve_loop_nest':
Classifying expressions for: @convolve_loop_nest
  %div = sdiv i32 %kn, 2, !dbg !46
  -->  %div
  %0 = sub i32 0, %div, !dbg !52
  -->  (-1 * %div)
  %1 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %2 = sext i32 %div to i64, !dbg !52
  -->  (sext i32 %div to i64)
  %3 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %4 = sext i32 %div to i64, !dbg !52
  -->  (sext i32 %div to i64)
  %5 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %6 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %sub = sub nsw i32 %dim_x, %div, !dbg !53
  -->  ((-1 * %div) + %dim_x)
  %7 = sext i32 %sub to i64, !dbg !55
  -->  (sext i32 ((-1 * %div) + %dim_x) to i64)
  %indvars.iv23 = phi i64 [ %6, %for.body.lr.ph ], [ %indvars.iv.next21, %for.inc32 ]
  -->  {(sext i32 %div to i64),+,1}<nsw><%for.body>		Exits: (-1 + (sext i32 ((-1 * %div) + %dim_x) to i64))
  %sub2 = sub nsw i32 %dim_y, %div, !dbg !60
  -->  ((-1 * %div) + %dim_y)		Exits: ((-1 * %div) + %dim_y)
  %8 = sext i32 %sub2 to i64, !dbg !62
  -->  (sext i32 ((-1 * %div) + %dim_y) to i64)		Exits: (sext i32 ((-1 * %div) + %dim_y) to i64)
  %indvars.iv19 = phi i64 [ %5, %for.body4.lr.ph ], [ %indvars.iv.next17, %for.inc29 ]
  -->  {(sext i32 %div to i64),+,1}<nsw><%for.body4>		Exits: (-1 + (sext i32 ((-1 * %div) + %dim_y) to i64))
  %c.015 = phi i32 [ 0, %for.body8.lr.ph ], [ %15, %for.inc21 ]
  -->  %c.015		Exits: <<Unknown>>
  %indvars.iv12 = phi i64 [ %3, %for.body8.lr.ph ], [ %indvars.iv.next9, %for.inc21 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body8>		Exits: (sext i32 %div to i64)
  %9 = sext i32 %c.015 to i64
  -->  (sext i32 %c.015 to i64)		Exits: <<Unknown>>
  %indvars.iv6 = phi i64 [ %9, %for.body12.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 %c.015 to i64),+,1}<nsw><%for.body12>		Exits: ((sext i32 %div to i64) + (sext i32 %c.015 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %indvars.iv15 = phi i64 [ %1, %for.body12.lr.ph ], [ %indvars.iv.next2, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body12>		Exits: (sext i32 %div to i64)
  %10 = add nsw i64 %indvars.iv23, %indvars.iv15, !dbg !81
  -->  {{((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64)),+,1}<nw><%for.body>,+,1}<nw><%for.body12>		Exits: {(2 * (sext i32 %div to i64)),+,1}<nw><%for.body>
  %11 = add nsw i64 %indvars.iv19, %indvars.iv12, !dbg !82
  -->  {{((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64)),+,1}<nw><%for.body4>,+,1}<nw><%for.body8>		Exits: {{((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64)),+,1}<nw><%for.body4>,+,1}<nw><%for.body8>
  %arrayidx = getelementptr inbounds i8** %in, i64 %11, !dbg !83
  -->  {{((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64))) + %in),+,8}<%for.body4>,+,8}<%for.body8>		Exits: {{((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64))) + %in),+,8}<%for.body4>,+,8}<%for.body8>
  %12 = load i8** %arrayidx, align 8, !dbg !83
  -->  %12		Exits: <<Unknown>>
  %arrayidx15 = getelementptr inbounds i8* %12, i64 %10, !dbg !83
  -->  ({{((sext i32 (-1 * %div) to i64) + (sext i32 %div to i64)),+,1}<nw><%for.body>,+,1}<nw><%for.body12> + %12)<nsw>		Exits: <<Unknown>>
  %13 = load i8* %arrayidx15, align 1, !dbg !83
  -->  %13		Exits: <<Unknown>>
  %conv = zext i8 %13 to i32, !dbg !83
  -->  (zext i8 %13 to i32)		Exits: <<Unknown>>
  %indvars.iv.next = add nsw i64 %indvars.iv6, 1, !dbg !84
  -->  {(1 + (sext i32 %c.015 to i64)),+,1}<nsw><%for.body12>		Exits: (1 + (sext i32 %div to i64) + (sext i32 %c.015 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %arrayidx18 = getelementptr inbounds float* %kernel, i64 %indvars.iv6, !dbg !85
  -->  {((4 * (sext i32 %c.015 to i64)) + %kernel),+,4}<nsw><%for.body12>		Exits: ((4 * (sext i32 %div to i64)) + (4 * (sext i32 %c.015 to i64)) + (-4 * (sext i32 (-1 * %div) to i64)) + %kernel)
  %indvars.iv.next2 = add nsw i64 %indvars.iv15, 1, !dbg !84
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body12>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %split = phi i64 [ %indvars.iv.next, %for.inc ]
  -->  %split		Exits: <<Unknown>>
  %indvars.iv13 = phi i64 [ %indvars.iv12, %for.cond10.for.end_crit_edge ], [ %indvars.iv12, %for.body8 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body8>		Exits: (sext i32 %div to i64)
  %c.1.lcssa.wide = phi i64 [ %split, %for.cond10.for.end_crit_edge ], [ %9, %for.body8 ]
  -->  %c.1.lcssa.wide		Exits: <<Unknown>>
  %15 = trunc i64 %c.1.lcssa.wide to i32, !dbg !87
  -->  (trunc i64 %c.1.lcssa.wide to i32)		Exits: <<Unknown>>
  %indvars.iv.next9 = add nsw i64 %indvars.iv13, 1, !dbg !88
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body8>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %indvars.iv20 = phi i64 [ %indvars.iv19, %for.cond6.for.end23_crit_edge ], [ %indvars.iv19, %for.body4 ]
  -->  {(sext i32 %div to i64),+,1}<nsw><%for.body4>		Exits: (-1 + (sext i32 ((-1 * %div) + %dim_y) to i64))
  %conv24 = fptoui float %pixel.0.lcssa to i8, !dbg !89
  -->  %conv24		Exits: <<Unknown>>
  %arrayidx27 = getelementptr inbounds i8** %out, i64 %indvars.iv20, !dbg !90
  -->  {((8 * (sext i32 %div to i64)) + %out),+,8}<nsw><%for.body4>		Exits: (-8 + (8 * (sext i32 ((-1 * %div) + %dim_y) to i64)) + %out)
  %16 = load i8** %arrayidx27, align 8, !dbg !90
  -->  %16		Exits: <<Unknown>>
  %arrayidx28 = getelementptr inbounds i8* %16, i64 %indvars.iv23, !dbg !90
  -->  ({(sext i32 %div to i64),+,1}<nsw><%for.body> + %16)<nsw>		Exits: <<Unknown>>
  %indvars.iv.next17 = add nsw i64 %indvars.iv20, 1, !dbg !92
  -->  {(1 + (sext i32 %div to i64))<nsw>,+,1}<nsw><%for.body4>		Exits: (sext i32 ((-1 * %div) + %dim_y) to i64)
  %indvars.iv24 = phi i64 [ %indvars.iv23, %for.cond1.for.end31_crit_edge ], [ %indvars.iv23, %for.body ]
  -->  {(sext i32 %div to i64),+,1}<nsw><%for.body>		Exits: (-1 + (sext i32 ((-1 * %div) + %dim_x) to i64))
  %indvars.iv.next21 = add nsw i64 %indvars.iv24, 1, !dbg !94
  -->  {(1 + (sext i32 %div to i64))<nsw>,+,1}<nsw><%for.body>		Exits: (sext i32 ((-1 * %div) + %dim_x) to i64)
Determining loop execution counts for: @convolve_loop_nest
Loop %for.body12: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body12: max backedge-taken count is 4294967295
Loop %for.body8: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body8: max backedge-taken count is 4294967295
Loop %for.body4: backedge-taken count is (-1 + (sext i32 ((-1 * %div) + %dim_y) to i64) + (-1 * (sext i32 %div to i64)))
Loop %for.body4: max backedge-taken count is 4294967294
Loop %for.body: backedge-taken count is (-1 + (sext i32 ((-1 * %div) + %dim_x) to i64) + (-1 * (sext i32 %div to i64)))
Loop %for.body: max backedge-taken count is 4294967294
