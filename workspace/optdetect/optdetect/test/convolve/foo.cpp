// Generated by llvm2cpp - DO NOT MODIFY!


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("a.ll", getGlobalContext());
 mod->setDataLayout("0x40e0ff0");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_1 = PointerType::get(PointerTy_2, 0);
 
 StructType *StructTy_struct__IO_FILE = mod->getTypeByName("struct._IO_FILE");
 if (!StructTy_struct__IO_FILE) {
 StructTy_struct__IO_FILE = StructType::create(mod->getContext(), "struct._IO_FILE");
 }
 std::vector<Type*>StructTy_struct__IO_FILE_fields;
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructType *StructTy_struct__IO_marker = mod->getTypeByName("struct._IO_marker");
 if (!StructTy_struct__IO_marker) {
 StructTy_struct__IO_marker = StructType::create(mod->getContext(), "struct._IO_marker");
 }
 std::vector<Type*>StructTy_struct__IO_marker_fields;
 PointerType* PointerTy_5 = PointerType::get(StructTy_struct__IO_marker, 0);
 
 StructTy_struct__IO_marker_fields.push_back(PointerTy_5);
 PointerType* PointerTy_4 = PointerType::get(StructTy_struct__IO_FILE, 0);
 
 StructTy_struct__IO_marker_fields.push_back(PointerTy_4);
 StructTy_struct__IO_marker_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct__IO_marker->isOpaque()) {
 StructTy_struct__IO_marker->setBody(StructTy_struct__IO_marker_fields, /*isPacked=*/false);
 }
 
 
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_5);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_4);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 8));
 ArrayType* ArrayTy_6 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 1);
 
 StructTy_struct__IO_FILE_fields.push_back(ArrayTy_6);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(PointerTy_2);
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct__IO_FILE_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_7 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 20);
 
 StructTy_struct__IO_FILE_fields.push_back(ArrayTy_7);
 if (StructTy_struct__IO_FILE->isOpaque()) {
 StructTy_struct__IO_FILE->setBody(StructTy_struct__IO_FILE_fields, /*isPacked=*/false);
 }
 
 
 PointerType* PointerTy_3 = PointerType::get(PointerTy_4, 0);
 
 ArrayType* ArrayTy_8 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 6);
 
 PointerType* PointerTy_9 = PointerType::get(ArrayTy_8, 0);
 
 ArrayType* ArrayTy_10 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 24);
 
 PointerType* PointerTy_11 = PointerType::get(ArrayTy_10, 0);
 
 ArrayType* ArrayTy_12 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 27);
 
 PointerType* PointerTy_13 = PointerType::get(ArrayTy_12, 0);
 
 ArrayType* ArrayTy_14 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 17);
 
 PointerType* PointerTy_15 = PointerType::get(ArrayTy_14, 0);
 
 ArrayType* ArrayTy_16 = ArrayType::get(Type::getFloatTy(mod->getContext()), 9);
 
 PointerType* PointerTy_17 = PointerType::get(ArrayTy_16, 0);
 
 ArrayType* ArrayTy_18 = ArrayType::get(Type::getFloatTy(mod->getContext()), 25);
 
 PointerType* PointerTy_19 = PointerType::get(ArrayTy_18, 0);
 
 ArrayType* ArrayTy_20 = ArrayType::get(Type::getFloatTy(mod->getContext()), 49);
 
 PointerType* PointerTy_21 = PointerType::get(ArrayTy_20, 0);
 
 ArrayType* ArrayTy_22 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 22);
 
 PointerType* PointerTy_23 = PointerType::get(ArrayTy_22, 0);
 
 ArrayType* ArrayTy_24 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 4);
 
 PointerType* PointerTy_25 = PointerType::get(ArrayTy_24, 0);
 
 ArrayType* ArrayTy_26 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 2);
 
 PointerType* PointerTy_27 = PointerType::get(ArrayTy_26, 0);
 
 ArrayType* ArrayTy_28 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 32);
 
 PointerType* PointerTy_29 = PointerType::get(ArrayTy_28, 0);
 
 PointerType* PointerTy_30 = PointerType::get(ArrayTy_7, 0);
 
 ArrayType* ArrayTy_31 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 88);
 
 PointerType* PointerTy_32 = PointerType::get(ArrayTy_31, 0);
 
 ArrayType* ArrayTy_33 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 35);
 
 PointerType* PointerTy_34 = PointerType::get(ArrayTy_33, 0);
 
 ArrayType* ArrayTy_35 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 10);
 
 PointerType* PointerTy_36 = PointerType::get(ArrayTy_35, 0);
 
 ArrayType* ArrayTy_37 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 31);
 
 PointerType* PointerTy_38 = PointerType::get(ArrayTy_37, 0);
 
 ArrayType* ArrayTy_39 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 15);
 
 PointerType* PointerTy_40 = PointerType::get(ArrayTy_39, 0);
 
 ArrayType* ArrayTy_41 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 18);
 
 PointerType* PointerTy_42 = PointerType::get(ArrayTy_41, 0);
 
 ArrayType* ArrayTy_43 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 14);
 
 PointerType* PointerTy_44 = PointerType::get(ArrayTy_43, 0);
 
 ArrayType* ArrayTy_45 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 46);
 
 PointerType* PointerTy_46 = PointerType::get(ArrayTy_45, 0);
 
 ArrayType* ArrayTy_47 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 3);
 
 PointerType* PointerTy_48 = PointerType::get(ArrayTy_47, 0);
 
 ArrayType* ArrayTy_49 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 47);
 
 PointerType* PointerTy_50 = PointerType::get(ArrayTy_49, 0);
 
 ArrayType* ArrayTy_51 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 13);
 
 PointerType* PointerTy_52 = PointerType::get(ArrayTy_51, 0);
 
 ArrayType* ArrayTy_53 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 40);
 
 PointerType* PointerTy_54 = PointerType::get(ArrayTy_53, 0);
 
 std::vector<Type*>FuncTy_55_args;
 FuncTy_55_args.push_back(PointerTy_2);
 FuncTy_55_args.push_back(PointerTy_2);
 PointerType* PointerTy_56 = PointerType::get(Type::getFloatTy(mod->getContext()), 0);
 
 FuncTy_55_args.push_back(PointerTy_56);
 FuncTy_55_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_55_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_55_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_55_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_55_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_55 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_55_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_58_args;
 FuncTy_58_args.push_back(OtherTy_59);
 FuncTy_58_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_58_args.push_back(OtherTy_59);
 FuncTy_58_args.push_back(OtherTy_59);
 FunctionType* FuncTy_58 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_58_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_57 = PointerType::get(FuncTy_58, 0);
 
 std::vector<Type*>FuncTy_60_args;
 FuncTy_60_args.push_back(PointerTy_1);
 FuncTy_60_args.push_back(PointerTy_1);
 FuncTy_60_args.push_back(PointerTy_56);
 FuncTy_60_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_60_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_60_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_60 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_60_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_61_args;
 FuncTy_61_args.push_back(PointerTy_2);
 FuncTy_61_args.push_back(PointerTy_2);
 FuncTy_61_args.push_back(PointerTy_56);
 FuncTy_61_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_61_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_61_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_61 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_61_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_63_args;
 FuncTy_63_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_63_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_63_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_63 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 1),
  /*Params=*/FuncTy_63_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_62 = PointerType::get(FuncTy_63, 0);
 
 PointerType* PointerTy_64 = PointerType::get(FuncTy_61, 0);
 
 PointerType* PointerTy_65 = PointerType::get(FuncTy_60, 0);
 
 std::vector<Type*>FuncTy_66_args;
 FuncTy_66_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_66_args.push_back(PointerTy_1);
 FunctionType* FuncTy_66 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_66_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_67 = PointerType::get(PointerTy_1, 0);
 
 std::vector<Type*>FuncTy_69_args;
 FuncTy_69_args.push_back(OtherTy_59);
 FuncTy_69_args.push_back(OtherTy_59);
 FuncTy_69_args.push_back(OtherTy_59);
 FunctionType* FuncTy_69 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_69_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_68 = PointerType::get(FuncTy_69, 0);
 
 std::vector<Type*>FuncTy_71_args;
 FuncTy_71_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_71_args.push_back(PointerTy_1);
 FuncTy_71_args.push_back(PointerTy_2);
 FunctionType* FuncTy_71 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_71_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_70 = PointerType::get(FuncTy_71, 0);
 
 std::vector<Type*>FuncTy_73_args;
 FuncTy_73_args.push_back(PointerTy_4);
 FuncTy_73_args.push_back(PointerTy_2);
 FunctionType* FuncTy_73 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_73_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_72 = PointerType::get(FuncTy_73, 0);
 
 std::vector<Type*>FuncTy_75_args;
 FuncTy_75_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_75 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_75_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_74 = PointerType::get(FuncTy_75, 0);
 
 std::vector<Type*>FuncTy_77_args;
 FuncTy_77_args.push_back(PointerTy_2);
 FunctionType* FuncTy_77 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_77_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_76 = PointerType::get(FuncTy_77, 0);
 
 std::vector<Type*>FuncTy_79_args;
 FuncTy_79_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_79_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_79_args.push_back(IntegerType::get(mod->getContext(), 8));
 FunctionType* FuncTy_79 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_79_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_78 = PointerType::get(FuncTy_79, 0);
 
 std::vector<Type*>FuncTy_81_args;
 FuncTy_81_args.push_back(PointerTy_67);
 FuncTy_81_args.push_back(PointerTy_0);
 FuncTy_81_args.push_back(PointerTy_0);
 FuncTy_81_args.push_back(PointerTy_0);
 FuncTy_81_args.push_back(PointerTy_2);
 FunctionType* FuncTy_81 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_81_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_80 = PointerType::get(FuncTy_81, 0);
 
 std::vector<Type*>FuncTy_83_args;
 FuncTy_83_args.push_back(PointerTy_2);
 FunctionType* FuncTy_83 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_83_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_82 = PointerType::get(FuncTy_83, 0);
 
 std::vector<Type*>FuncTy_85_args;
 FuncTy_85_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_85_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_85 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_85_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_84 = PointerType::get(FuncTy_85, 0);
 
 std::vector<Type*>FuncTy_87_args;
 FuncTy_87_args.push_back(PointerTy_2);
 FuncTy_87_args.push_back(PointerTy_2);
 FuncTy_87_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_87 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_87_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_86 = PointerType::get(FuncTy_87, 0);
 
 std::vector<Type*>FuncTy_89_args;
 FuncTy_89_args.push_back(PointerTy_2);
 FuncTy_89_args.push_back(PointerTy_2);
 FunctionType* FuncTy_89 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_89_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_88 = PointerType::get(FuncTy_89, 0);
 
 std::vector<Type*>FuncTy_91_args;
 FuncTy_91_args.push_back(PointerTy_2);
 FuncTy_91_args.push_back(PointerTy_2);
 FuncTy_91_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_91_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_91_args.push_back(IntegerType::get(mod->getContext(), 1));
 FunctionType* FuncTy_91 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_91_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_90 = PointerType::get(FuncTy_91, 0);
 
 std::vector<Type*>FuncTy_93_args;
 FuncTy_93_args.push_back(PointerTy_2);
 FunctionType* FuncTy_93 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_93_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_92 = PointerType::get(FuncTy_93, 0);
 
 std::vector<Type*>FuncTy_95_args;
 FuncTy_95_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_95_args.push_back(PointerTy_1);
 FunctionType* FuncTy_95 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_95_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_94 = PointerType::get(FuncTy_95, 0);
 
 std::vector<Type*>FuncTy_97_args;
 FuncTy_97_args.push_back(PointerTy_1);
 FuncTy_97_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_97_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_97_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_97_args.push_back(PointerTy_2);
 FunctionType* FuncTy_97 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_97_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_96 = PointerType::get(FuncTy_97, 0);
 
 PointerType* PointerTy_98 = PointerType::get(IntegerType::get(mod->getContext(), 1), 0);
 
 std::vector<Type*>FuncTy_100_args;
 FuncTy_100_args.push_back(PointerTy_2);
 FunctionType* FuncTy_100 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_100_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_99 = PointerType::get(FuncTy_100, 0);
 
 std::vector<Type*>FuncTy_102_args;
 FuncTy_102_args.push_back(PointerTy_2);
 FuncTy_102_args.push_back(PointerTy_1);
 FuncTy_102_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_102 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_102_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_101 = PointerType::get(FuncTy_102, 0);
 
 PointerType* PointerTy_103 = PointerType::get(PointerTy_56, 0);
 
 std::vector<Type*>FuncTy_106_args;
 FuncTy_106_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_106_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_106_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_106_args.push_back(PointerTy_56);
 FuncTy_106_args.push_back(PointerTy_2);
 FuncTy_106_args.push_back(PointerTy_2);
 FunctionType* FuncTy_106 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_106_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_105 = PointerType::get(FuncTy_106, 0);
 
 PointerType* PointerTy_104 = PointerType::get(PointerTy_105, 0);
 
 std::vector<Type*>FuncTy_109_args;
 StructType *StructTy_struct_max_file = mod->getTypeByName("struct.max_file");
 if (!StructTy_struct_max_file) {
 StructTy_struct_max_file = StructType::create(mod->getContext(), "struct.max_file");
 }
 std::vector<Type*>StructTy_struct_max_file_fields;
 StructType *StructTy_struct_max_errors = mod->getTypeByName("struct.max_errors");
 if (!StructTy_struct_max_errors) {
 StructTy_struct_max_errors = StructType::create(mod->getContext(), "struct.max_errors");
 }
 std::vector<Type*>StructTy_struct_max_errors_fields;
 if (StructTy_struct_max_errors->isOpaque()) {
 StructTy_struct_max_errors->setBody(StructTy_struct_max_errors_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_111 = PointerType::get(StructTy_struct_max_errors, 0);
 
 StructTy_struct_max_file_fields.push_back(PointerTy_111);
 StructType *StructTy_struct_max_file_internal = mod->getTypeByName("struct.max_file_internal");
 if (!StructTy_struct_max_file_internal) {
 StructTy_struct_max_file_internal = StructType::create(mod->getContext(), "struct.max_file_internal");
 }
 std::vector<Type*>StructTy_struct_max_file_internal_fields;
 if (StructTy_struct_max_file_internal->isOpaque()) {
 StructTy_struct_max_file_internal->setBody(StructTy_struct_max_file_internal_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_112 = PointerType::get(StructTy_struct_max_file_internal, 0);
 
 StructTy_struct_max_file_fields.push_back(PointerTy_112);
 if (StructTy_struct_max_file->isOpaque()) {
 StructTy_struct_max_file->setBody(StructTy_struct_max_file_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_110 = PointerType::get(StructTy_struct_max_file, 0);
 
 FunctionType* FuncTy_109 = FunctionType::get(
  /*Result=*/PointerTy_110,
  /*Params=*/FuncTy_109_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_108 = PointerType::get(FuncTy_109, 0);
 
 PointerType* PointerTy_107 = PointerType::get(PointerTy_108, 0);
 
 std::vector<Type*>FuncTy_114_args;
 FuncTy_114_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_114 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_114_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_113 = PointerType::get(FuncTy_114, 0);
 
 std::vector<Type*>FuncTy_116_args;
 FuncTy_116_args.push_back(PointerTy_2);
 FuncTy_116_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_116 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_116_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_115 = PointerType::get(FuncTy_116, 0);
 
 std::vector<Type*>FuncTy_118_args;
 FunctionType* FuncTy_118 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_118_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_117 = PointerType::get(FuncTy_118, 0);
 
 std::vector<Type*>FuncTy_120_args;
 FuncTy_120_args.push_back(PointerTy_2);
 FunctionType* FuncTy_120 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_120_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_119 = PointerType::get(FuncTy_120, 0);
 
 std::vector<Type*>FuncTy_122_args;
 FuncTy_122_args.push_back(PointerTy_2);
 FuncTy_122_args.push_back(IntegerType::get(mod->getContext(), 8));
 FuncTy_122_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_122_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_122_args.push_back(IntegerType::get(mod->getContext(), 1));
 FunctionType* FuncTy_122 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_122_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_121 = PointerType::get(FuncTy_122, 0);
 
 StructType *StructTy_struct_jpeg_error_mgr = mod->getTypeByName("struct.jpeg_error_mgr");
 if (!StructTy_struct_jpeg_error_mgr) {
 StructTy_struct_jpeg_error_mgr = StructType::create(mod->getContext(), "struct.jpeg_error_mgr");
 }
 std::vector<Type*>StructTy_struct_jpeg_error_mgr_fields;
 std::vector<Type*>FuncTy_125_args;
 StructType *StructTy_struct_jpeg_common_struct = mod->getTypeByName("struct.jpeg_common_struct");
 if (!StructTy_struct_jpeg_common_struct) {
 StructTy_struct_jpeg_common_struct = StructType::create(mod->getContext(), "struct.jpeg_common_struct");
 }
 std::vector<Type*>StructTy_struct_jpeg_common_struct_fields;
 PointerType* PointerTy_123 = PointerType::get(StructTy_struct_jpeg_error_mgr, 0);
 
 StructTy_struct_jpeg_common_struct_fields.push_back(PointerTy_123);
 StructType *StructTy_struct_jpeg_memory_mgr = mod->getTypeByName("struct.jpeg_memory_mgr");
 if (!StructTy_struct_jpeg_memory_mgr) {
 StructTy_struct_jpeg_memory_mgr = StructType::create(mod->getContext(), "struct.jpeg_memory_mgr");
 }
 std::vector<Type*>StructTy_struct_jpeg_memory_mgr_fields;
 std::vector<Type*>FuncTy_129_args;
 PointerType* PointerTy_126 = PointerType::get(StructTy_struct_jpeg_common_struct, 0);
 
 FuncTy_129_args.push_back(PointerTy_126);
 FuncTy_129_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_129_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_129 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_129_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_128 = PointerType::get(FuncTy_129, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_128);
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_128);
 std::vector<Type*>FuncTy_131_args;
 FuncTy_131_args.push_back(PointerTy_126);
 FuncTy_131_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_131_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_131_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_131 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_131_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_130 = PointerType::get(FuncTy_131, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_130);
 std::vector<Type*>FuncTy_133_args;
 FuncTy_133_args.push_back(PointerTy_126);
 FuncTy_133_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_133_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_133_args.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_136 = ArrayType::get(IntegerType::get(mod->getContext(), 16), 64);
 
 PointerType* PointerTy_135 = PointerType::get(ArrayTy_136, 0);
 
 PointerType* PointerTy_134 = PointerType::get(PointerTy_135, 0);
 
 FunctionType* FuncTy_133 = FunctionType::get(
  /*Result=*/PointerTy_134,
  /*Params=*/FuncTy_133_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_132 = PointerType::get(FuncTy_133, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_132);
 std::vector<Type*>FuncTy_138_args;
 FuncTy_138_args.push_back(PointerTy_126);
 FuncTy_138_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_138_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_138_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_138_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_138_args.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jvirt_sarray_control = mod->getTypeByName("struct.jvirt_sarray_control");
 if (!StructTy_struct_jvirt_sarray_control) {
 StructTy_struct_jvirt_sarray_control = StructType::create(mod->getContext(), "struct.jvirt_sarray_control");
 }
 std::vector<Type*>StructTy_struct_jvirt_sarray_control_fields;
 if (StructTy_struct_jvirt_sarray_control->isOpaque()) {
 StructTy_struct_jvirt_sarray_control->setBody(StructTy_struct_jvirt_sarray_control_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_139 = PointerType::get(StructTy_struct_jvirt_sarray_control, 0);
 
 FunctionType* FuncTy_138 = FunctionType::get(
  /*Result=*/PointerTy_139,
  /*Params=*/FuncTy_138_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_137 = PointerType::get(FuncTy_138, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_137);
 std::vector<Type*>FuncTy_141_args;
 FuncTy_141_args.push_back(PointerTy_126);
 FuncTy_141_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_141_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_141_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_141_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_141_args.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jvirt_barray_control = mod->getTypeByName("struct.jvirt_barray_control");
 if (!StructTy_struct_jvirt_barray_control) {
 StructTy_struct_jvirt_barray_control = StructType::create(mod->getContext(), "struct.jvirt_barray_control");
 }
 std::vector<Type*>StructTy_struct_jvirt_barray_control_fields;
 if (StructTy_struct_jvirt_barray_control->isOpaque()) {
 StructTy_struct_jvirt_barray_control->setBody(StructTy_struct_jvirt_barray_control_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_142 = PointerType::get(StructTy_struct_jvirt_barray_control, 0);
 
 FunctionType* FuncTy_141 = FunctionType::get(
  /*Result=*/PointerTy_142,
  /*Params=*/FuncTy_141_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_140 = PointerType::get(FuncTy_141, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_140);
 std::vector<Type*>StructTy_144_fields;
 StructType *StructTy_144 = StructType::get(mod->getContext(), StructTy_144_fields, /*isPacked=*/false);
 
 PointerType* PointerTy_143 = PointerType::get(StructTy_144, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_143);
 std::vector<Type*>FuncTy_146_args;
 FuncTy_146_args.push_back(PointerTy_126);
 FuncTy_146_args.push_back(PointerTy_139);
 FuncTy_146_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_146_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_146_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_146 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_146_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_145 = PointerType::get(FuncTy_146, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_145);
 std::vector<Type*>FuncTy_148_args;
 FuncTy_148_args.push_back(PointerTy_126);
 FuncTy_148_args.push_back(PointerTy_142);
 FuncTy_148_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_148_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_148_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_148 = FunctionType::get(
  /*Result=*/PointerTy_134,
  /*Params=*/FuncTy_148_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_147 = PointerType::get(FuncTy_148, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_147);
 std::vector<Type*>FuncTy_150_args;
 FuncTy_150_args.push_back(PointerTy_126);
 FuncTy_150_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_150 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_150_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_149 = PointerType::get(FuncTy_150, 0);
 
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_149);
 StructTy_struct_jpeg_memory_mgr_fields.push_back(PointerTy_143);
 StructTy_struct_jpeg_memory_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_jpeg_memory_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 if (StructTy_struct_jpeg_memory_mgr->isOpaque()) {
 StructTy_struct_jpeg_memory_mgr->setBody(StructTy_struct_jpeg_memory_mgr_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_127 = PointerType::get(StructTy_struct_jpeg_memory_mgr, 0);
 
 StructTy_struct_jpeg_common_struct_fields.push_back(PointerTy_127);
 StructType *StructTy_struct_jpeg_progress_mgr = mod->getTypeByName("struct.jpeg_progress_mgr");
 if (!StructTy_struct_jpeg_progress_mgr) {
 StructTy_struct_jpeg_progress_mgr = StructType::create(mod->getContext(), "struct.jpeg_progress_mgr");
 }
 std::vector<Type*>StructTy_struct_jpeg_progress_mgr_fields;
 StructTy_struct_jpeg_progress_mgr_fields.push_back(PointerTy_143);
 StructTy_struct_jpeg_progress_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_jpeg_progress_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_jpeg_progress_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_progress_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_jpeg_progress_mgr->isOpaque()) {
 StructTy_struct_jpeg_progress_mgr->setBody(StructTy_struct_jpeg_progress_mgr_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_151 = PointerType::get(StructTy_struct_jpeg_progress_mgr, 0);
 
 StructTy_struct_jpeg_common_struct_fields.push_back(PointerTy_151);
 StructTy_struct_jpeg_common_struct_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_common_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_common_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_jpeg_common_struct->isOpaque()) {
 StructTy_struct_jpeg_common_struct->setBody(StructTy_struct_jpeg_common_struct_fields, /*isPacked=*/false);
 }
 
 
 FuncTy_125_args.push_back(PointerTy_126);
 FunctionType* FuncTy_125 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_125_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_124 = PointerType::get(FuncTy_125, 0);
 
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_124);
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_149);
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_124);
 std::vector<Type*>FuncTy_153_args;
 FuncTy_153_args.push_back(PointerTy_126);
 FuncTy_153_args.push_back(PointerTy_2);
 FunctionType* FuncTy_153 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_153_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_152 = PointerType::get(FuncTy_153, 0);
 
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_152);
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_124);
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_union_anon = mod->getTypeByName("union.anon");
 if (!StructTy_union_anon) {
 StructTy_union_anon = StructType::create(mod->getContext(), "union.anon");
 }
 std::vector<Type*>StructTy_union_anon_fields;
 ArrayType* ArrayTy_154 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 8);
 
 StructTy_union_anon_fields.push_back(ArrayTy_154);
 ArrayType* ArrayTy_155 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 48);
 
 StructTy_union_anon_fields.push_back(ArrayTy_155);
 if (StructTy_union_anon->isOpaque()) {
 StructTy_union_anon->setBody(StructTy_union_anon_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_jpeg_error_mgr_fields.push_back(StructTy_union_anon);
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_1);
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_error_mgr_fields.push_back(PointerTy_1);
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_error_mgr_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_jpeg_error_mgr->isOpaque()) {
 StructTy_struct_jpeg_error_mgr->setBody(StructTy_struct_jpeg_error_mgr_fields, /*isPacked=*/false);
 }
 
 
 StructType *StructTy_struct_jpeg_decompress_struct = mod->getTypeByName("struct.jpeg_decompress_struct");
 if (!StructTy_struct_jpeg_decompress_struct) {
 StructTy_struct_jpeg_decompress_struct = StructType::create(mod->getContext(), "struct.jpeg_decompress_struct");
 }
 std::vector<Type*>StructTy_struct_jpeg_decompress_struct_fields;
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_123);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_127);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_151);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_source_mgr = mod->getTypeByName("struct.jpeg_source_mgr");
 if (!StructTy_struct_jpeg_source_mgr) {
 StructTy_struct_jpeg_source_mgr = StructType::create(mod->getContext(), "struct.jpeg_source_mgr");
 }
 std::vector<Type*>StructTy_struct_jpeg_source_mgr_fields;
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_source_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 std::vector<Type*>FuncTy_159_args;
 PointerType* PointerTy_156 = PointerType::get(StructTy_struct_jpeg_decompress_struct, 0);
 
 FuncTy_159_args.push_back(PointerTy_156);
 FunctionType* FuncTy_159 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_159_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_158 = PointerType::get(FuncTy_159, 0);
 
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_158);
 std::vector<Type*>FuncTy_161_args;
 FuncTy_161_args.push_back(PointerTy_156);
 FunctionType* FuncTy_161 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_161_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_160 = PointerType::get(FuncTy_161, 0);
 
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_160);
 std::vector<Type*>FuncTy_163_args;
 FuncTy_163_args.push_back(PointerTy_156);
 FuncTy_163_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_163 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_163_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_162 = PointerType::get(FuncTy_163, 0);
 
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_162);
 std::vector<Type*>FuncTy_165_args;
 FuncTy_165_args.push_back(PointerTy_156);
 FuncTy_165_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_165 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_165_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_164 = PointerType::get(FuncTy_165, 0);
 
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_164);
 StructTy_struct_jpeg_source_mgr_fields.push_back(PointerTy_158);
 if (StructTy_struct_jpeg_source_mgr->isOpaque()) {
 StructTy_struct_jpeg_source_mgr->setBody(StructTy_struct_jpeg_source_mgr_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_157 = PointerType::get(StructTy_struct_jpeg_source_mgr, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_157);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(Type::getDoubleTy(mod->getContext()));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_1);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_167 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 64);
 
 PointerType* PointerTy_166 = PointerType::get(ArrayTy_167, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_166);
 StructType *StructTy_struct_JQUANT_TBL = mod->getTypeByName("struct.JQUANT_TBL");
 if (!StructTy_struct_JQUANT_TBL) {
 StructTy_struct_JQUANT_TBL = StructType::create(mod->getContext(), "struct.JQUANT_TBL");
 }
 std::vector<Type*>StructTy_struct_JQUANT_TBL_fields;
 StructTy_struct_JQUANT_TBL_fields.push_back(ArrayTy_136);
 StructTy_struct_JQUANT_TBL_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_JQUANT_TBL->isOpaque()) {
 StructTy_struct_JQUANT_TBL->setBody(StructTy_struct_JQUANT_TBL_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_169 = PointerType::get(StructTy_struct_JQUANT_TBL, 0);
 
 ArrayType* ArrayTy_168 = ArrayType::get(PointerTy_169, 4);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_168);
 StructType *StructTy_struct_JHUFF_TBL = mod->getTypeByName("struct.JHUFF_TBL");
 if (!StructTy_struct_JHUFF_TBL) {
 StructTy_struct_JHUFF_TBL = StructType::create(mod->getContext(), "struct.JHUFF_TBL");
 }
 std::vector<Type*>StructTy_struct_JHUFF_TBL_fields;
 StructTy_struct_JHUFF_TBL_fields.push_back(ArrayTy_14);
 ArrayType* ArrayTy_172 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 256);
 
 StructTy_struct_JHUFF_TBL_fields.push_back(ArrayTy_172);
 StructTy_struct_JHUFF_TBL_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_JHUFF_TBL->isOpaque()) {
 StructTy_struct_JHUFF_TBL->setBody(StructTy_struct_JHUFF_TBL_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_171 = PointerType::get(StructTy_struct_JHUFF_TBL, 0);
 
 ArrayType* ArrayTy_170 = ArrayType::get(PointerTy_171, 4);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_170);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_170);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_component_info = mod->getTypeByName("struct.jpeg_component_info");
 if (!StructTy_struct_jpeg_component_info) {
 StructTy_struct_jpeg_component_info = StructType::create(mod->getContext(), "struct.jpeg_component_info");
 }
 std::vector<Type*>StructTy_struct_jpeg_component_info_fields;
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_component_info_fields.push_back(PointerTy_169);
 StructTy_struct_jpeg_component_info_fields.push_back(PointerTy_2);
 if (StructTy_struct_jpeg_component_info->isOpaque()) {
 StructTy_struct_jpeg_component_info->setBody(StructTy_struct_jpeg_component_info_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_173 = PointerType::get(StructTy_struct_jpeg_component_info, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_173);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_174 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 16);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_marker_struct = mod->getTypeByName("struct.jpeg_marker_struct");
 if (!StructTy_struct_jpeg_marker_struct) {
 StructTy_struct_jpeg_marker_struct = StructType::create(mod->getContext(), "struct.jpeg_marker_struct");
 }
 std::vector<Type*>StructTy_struct_jpeg_marker_struct_fields;
 PointerType* PointerTy_175 = PointerType::get(StructTy_struct_jpeg_marker_struct, 0);
 
 StructTy_struct_jpeg_marker_struct_fields.push_back(PointerTy_175);
 StructTy_struct_jpeg_marker_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_marker_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_marker_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_marker_struct_fields.push_back(PointerTy_2);
 if (StructTy_struct_jpeg_marker_struct->isOpaque()) {
 StructTy_struct_jpeg_marker_struct->setBody(StructTy_struct_jpeg_marker_struct_fields, /*isPacked=*/false);
 }
 
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_175);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_176 = ArrayType::get(PointerTy_173, 4);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_176);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 ArrayType* ArrayTy_177 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 10);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(ArrayTy_177);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_0);
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_decompress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_decomp_master = mod->getTypeByName("struct.jpeg_decomp_master");
 if (!StructTy_struct_jpeg_decomp_master) {
 StructTy_struct_jpeg_decomp_master = StructType::create(mod->getContext(), "struct.jpeg_decomp_master");
 }
 std::vector<Type*>StructTy_struct_jpeg_decomp_master_fields;
 if (StructTy_struct_jpeg_decomp_master->isOpaque()) {
 StructTy_struct_jpeg_decomp_master->setBody(StructTy_struct_jpeg_decomp_master_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_178 = PointerType::get(StructTy_struct_jpeg_decomp_master, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_178);
 StructType *StructTy_struct_jpeg_d_main_controller = mod->getTypeByName("struct.jpeg_d_main_controller");
 if (!StructTy_struct_jpeg_d_main_controller) {
 StructTy_struct_jpeg_d_main_controller = StructType::create(mod->getContext(), "struct.jpeg_d_main_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_d_main_controller_fields;
 if (StructTy_struct_jpeg_d_main_controller->isOpaque()) {
 StructTy_struct_jpeg_d_main_controller->setBody(StructTy_struct_jpeg_d_main_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_179 = PointerType::get(StructTy_struct_jpeg_d_main_controller, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_179);
 StructType *StructTy_struct_jpeg_d_coef_controller = mod->getTypeByName("struct.jpeg_d_coef_controller");
 if (!StructTy_struct_jpeg_d_coef_controller) {
 StructTy_struct_jpeg_d_coef_controller = StructType::create(mod->getContext(), "struct.jpeg_d_coef_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_d_coef_controller_fields;
 if (StructTy_struct_jpeg_d_coef_controller->isOpaque()) {
 StructTy_struct_jpeg_d_coef_controller->setBody(StructTy_struct_jpeg_d_coef_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_180 = PointerType::get(StructTy_struct_jpeg_d_coef_controller, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_180);
 StructType *StructTy_struct_jpeg_d_post_controller = mod->getTypeByName("struct.jpeg_d_post_controller");
 if (!StructTy_struct_jpeg_d_post_controller) {
 StructTy_struct_jpeg_d_post_controller = StructType::create(mod->getContext(), "struct.jpeg_d_post_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_d_post_controller_fields;
 if (StructTy_struct_jpeg_d_post_controller->isOpaque()) {
 StructTy_struct_jpeg_d_post_controller->setBody(StructTy_struct_jpeg_d_post_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_181 = PointerType::get(StructTy_struct_jpeg_d_post_controller, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_181);
 StructType *StructTy_struct_jpeg_input_controller = mod->getTypeByName("struct.jpeg_input_controller");
 if (!StructTy_struct_jpeg_input_controller) {
 StructTy_struct_jpeg_input_controller = StructType::create(mod->getContext(), "struct.jpeg_input_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_input_controller_fields;
 if (StructTy_struct_jpeg_input_controller->isOpaque()) {
 StructTy_struct_jpeg_input_controller->setBody(StructTy_struct_jpeg_input_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_182 = PointerType::get(StructTy_struct_jpeg_input_controller, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_182);
 StructType *StructTy_struct_jpeg_marker_reader = mod->getTypeByName("struct.jpeg_marker_reader");
 if (!StructTy_struct_jpeg_marker_reader) {
 StructTy_struct_jpeg_marker_reader = StructType::create(mod->getContext(), "struct.jpeg_marker_reader");
 }
 std::vector<Type*>StructTy_struct_jpeg_marker_reader_fields;
 if (StructTy_struct_jpeg_marker_reader->isOpaque()) {
 StructTy_struct_jpeg_marker_reader->setBody(StructTy_struct_jpeg_marker_reader_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_183 = PointerType::get(StructTy_struct_jpeg_marker_reader, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_183);
 StructType *StructTy_struct_jpeg_entropy_decoder = mod->getTypeByName("struct.jpeg_entropy_decoder");
 if (!StructTy_struct_jpeg_entropy_decoder) {
 StructTy_struct_jpeg_entropy_decoder = StructType::create(mod->getContext(), "struct.jpeg_entropy_decoder");
 }
 std::vector<Type*>StructTy_struct_jpeg_entropy_decoder_fields;
 if (StructTy_struct_jpeg_entropy_decoder->isOpaque()) {
 StructTy_struct_jpeg_entropy_decoder->setBody(StructTy_struct_jpeg_entropy_decoder_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_184 = PointerType::get(StructTy_struct_jpeg_entropy_decoder, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_184);
 StructType *StructTy_struct_jpeg_inverse_dct = mod->getTypeByName("struct.jpeg_inverse_dct");
 if (!StructTy_struct_jpeg_inverse_dct) {
 StructTy_struct_jpeg_inverse_dct = StructType::create(mod->getContext(), "struct.jpeg_inverse_dct");
 }
 std::vector<Type*>StructTy_struct_jpeg_inverse_dct_fields;
 if (StructTy_struct_jpeg_inverse_dct->isOpaque()) {
 StructTy_struct_jpeg_inverse_dct->setBody(StructTy_struct_jpeg_inverse_dct_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_185 = PointerType::get(StructTy_struct_jpeg_inverse_dct, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_185);
 StructType *StructTy_struct_jpeg_upsampler = mod->getTypeByName("struct.jpeg_upsampler");
 if (!StructTy_struct_jpeg_upsampler) {
 StructTy_struct_jpeg_upsampler = StructType::create(mod->getContext(), "struct.jpeg_upsampler");
 }
 std::vector<Type*>StructTy_struct_jpeg_upsampler_fields;
 if (StructTy_struct_jpeg_upsampler->isOpaque()) {
 StructTy_struct_jpeg_upsampler->setBody(StructTy_struct_jpeg_upsampler_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_186 = PointerType::get(StructTy_struct_jpeg_upsampler, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_186);
 StructType *StructTy_struct_jpeg_color_deconverter = mod->getTypeByName("struct.jpeg_color_deconverter");
 if (!StructTy_struct_jpeg_color_deconverter) {
 StructTy_struct_jpeg_color_deconverter = StructType::create(mod->getContext(), "struct.jpeg_color_deconverter");
 }
 std::vector<Type*>StructTy_struct_jpeg_color_deconverter_fields;
 if (StructTy_struct_jpeg_color_deconverter->isOpaque()) {
 StructTy_struct_jpeg_color_deconverter->setBody(StructTy_struct_jpeg_color_deconverter_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_187 = PointerType::get(StructTy_struct_jpeg_color_deconverter, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_187);
 StructType *StructTy_struct_jpeg_color_quantizer = mod->getTypeByName("struct.jpeg_color_quantizer");
 if (!StructTy_struct_jpeg_color_quantizer) {
 StructTy_struct_jpeg_color_quantizer = StructType::create(mod->getContext(), "struct.jpeg_color_quantizer");
 }
 std::vector<Type*>StructTy_struct_jpeg_color_quantizer_fields;
 if (StructTy_struct_jpeg_color_quantizer->isOpaque()) {
 StructTy_struct_jpeg_color_quantizer->setBody(StructTy_struct_jpeg_color_quantizer_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_188 = PointerType::get(StructTy_struct_jpeg_color_quantizer, 0);
 
 StructTy_struct_jpeg_decompress_struct_fields.push_back(PointerTy_188);
 if (StructTy_struct_jpeg_decompress_struct->isOpaque()) {
 StructTy_struct_jpeg_decompress_struct->setBody(StructTy_struct_jpeg_decompress_struct_fields, /*isPacked=*/false);
 }
 
 
 std::vector<Type*>FuncTy_190_args;
 FuncTy_190_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_190_args.push_back(PointerTy_2);
 FunctionType* FuncTy_190 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_190_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_189 = PointerType::get(FuncTy_190, 0);
 
 std::vector<Type*>FuncTy_192_args;
 FuncTy_192_args.push_back(PointerTy_123);
 FunctionType* FuncTy_192 = FunctionType::get(
  /*Result=*/PointerTy_123,
  /*Params=*/FuncTy_192_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_191 = PointerType::get(FuncTy_192, 0);
 
 PointerType* PointerTy_193 = PointerType::get(PointerTy_123, 0);
 
 std::vector<Type*>FuncTy_195_args;
 FuncTy_195_args.push_back(PointerTy_156);
 FuncTy_195_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_195_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_195 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_195_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_194 = PointerType::get(FuncTy_195, 0);
 
 std::vector<Type*>FuncTy_197_args;
 FuncTy_197_args.push_back(PointerTy_2);
 FuncTy_197_args.push_back(PointerTy_2);
 FunctionType* FuncTy_197 = FunctionType::get(
  /*Result=*/PointerTy_4,
  /*Params=*/FuncTy_197_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_196 = PointerType::get(FuncTy_197, 0);
 
 std::vector<Type*>FuncTy_199_args;
 FuncTy_199_args.push_back(PointerTy_156);
 FuncTy_199_args.push_back(PointerTy_4);
 FunctionType* FuncTy_199 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_199_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_198 = PointerType::get(FuncTy_199, 0);
 
 PointerType* PointerTy_200 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 std::vector<Type*>FuncTy_202_args;
 FuncTy_202_args.push_back(PointerTy_2);
 FuncTy_202_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_202_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_202_args.push_back(PointerTy_4);
 FunctionType* FuncTy_202 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_202_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_201 = PointerType::get(FuncTy_202, 0);
 
 std::vector<Type*>FuncTy_204_args;
 FuncTy_204_args.push_back(PointerTy_156);
 FuncTy_204_args.push_back(PointerTy_1);
 FuncTy_204_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_204 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_204_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_203 = PointerType::get(FuncTy_204, 0);
 
 std::vector<Type*>FuncTy_206_args;
 FuncTy_206_args.push_back(PointerTy_4);
 FunctionType* FuncTy_206 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_206_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_205 = PointerType::get(FuncTy_206, 0);
 
 StructType *StructTy_struct_jpeg_compress_struct = mod->getTypeByName("struct.jpeg_compress_struct");
 if (!StructTy_struct_jpeg_compress_struct) {
 StructTy_struct_jpeg_compress_struct = StructType::create(mod->getContext(), "struct.jpeg_compress_struct");
 }
 std::vector<Type*>StructTy_struct_jpeg_compress_struct_fields;
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_123);
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_127);
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_151);
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_destination_mgr = mod->getTypeByName("struct.jpeg_destination_mgr");
 if (!StructTy_struct_jpeg_destination_mgr) {
 StructTy_struct_jpeg_destination_mgr = StructType::create(mod->getContext(), "struct.jpeg_destination_mgr");
 }
 std::vector<Type*>StructTy_struct_jpeg_destination_mgr_fields;
 StructTy_struct_jpeg_destination_mgr_fields.push_back(PointerTy_2);
 StructTy_struct_jpeg_destination_mgr_fields.push_back(IntegerType::get(mod->getContext(), 64));
 std::vector<Type*>FuncTy_210_args;
 PointerType* PointerTy_207 = PointerType::get(StructTy_struct_jpeg_compress_struct, 0);
 
 FuncTy_210_args.push_back(PointerTy_207);
 FunctionType* FuncTy_210 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_210_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_209 = PointerType::get(FuncTy_210, 0);
 
 StructTy_struct_jpeg_destination_mgr_fields.push_back(PointerTy_209);
 std::vector<Type*>FuncTy_212_args;
 FuncTy_212_args.push_back(PointerTy_207);
 FunctionType* FuncTy_212 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_212_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_211 = PointerType::get(FuncTy_212, 0);
 
 StructTy_struct_jpeg_destination_mgr_fields.push_back(PointerTy_211);
 StructTy_struct_jpeg_destination_mgr_fields.push_back(PointerTy_209);
 if (StructTy_struct_jpeg_destination_mgr->isOpaque()) {
 StructTy_struct_jpeg_destination_mgr->setBody(StructTy_struct_jpeg_destination_mgr_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_208 = PointerType::get(StructTy_struct_jpeg_destination_mgr, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_208);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(Type::getDoubleTy(mod->getContext()));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_173);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_168);
 ArrayType* ArrayTy_213 = ArrayType::get(IntegerType::get(mod->getContext(), 32), 4);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_213);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_170);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_170);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_174);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_scan_info = mod->getTypeByName("struct.jpeg_scan_info");
 if (!StructTy_struct_jpeg_scan_info) {
 StructTy_struct_jpeg_scan_info = StructType::create(mod->getContext(), "struct.jpeg_scan_info");
 }
 std::vector<Type*>StructTy_struct_jpeg_scan_info_fields;
 StructTy_struct_jpeg_scan_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_scan_info_fields.push_back(ArrayTy_213);
 StructTy_struct_jpeg_scan_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_scan_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_scan_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_scan_info_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_jpeg_scan_info->isOpaque()) {
 StructTy_struct_jpeg_scan_info->setBody(StructTy_struct_jpeg_scan_info_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_214 = PointerType::get(StructTy_struct_jpeg_scan_info, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_214);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 8));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 16));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_176);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(ArrayTy_177);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_0);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_struct_jpeg_comp_master = mod->getTypeByName("struct.jpeg_comp_master");
 if (!StructTy_struct_jpeg_comp_master) {
 StructTy_struct_jpeg_comp_master = StructType::create(mod->getContext(), "struct.jpeg_comp_master");
 }
 std::vector<Type*>StructTy_struct_jpeg_comp_master_fields;
 if (StructTy_struct_jpeg_comp_master->isOpaque()) {
 StructTy_struct_jpeg_comp_master->setBody(StructTy_struct_jpeg_comp_master_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_215 = PointerType::get(StructTy_struct_jpeg_comp_master, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_215);
 StructType *StructTy_struct_jpeg_c_main_controller = mod->getTypeByName("struct.jpeg_c_main_controller");
 if (!StructTy_struct_jpeg_c_main_controller) {
 StructTy_struct_jpeg_c_main_controller = StructType::create(mod->getContext(), "struct.jpeg_c_main_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_c_main_controller_fields;
 if (StructTy_struct_jpeg_c_main_controller->isOpaque()) {
 StructTy_struct_jpeg_c_main_controller->setBody(StructTy_struct_jpeg_c_main_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_216 = PointerType::get(StructTy_struct_jpeg_c_main_controller, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_216);
 StructType *StructTy_struct_jpeg_c_prep_controller = mod->getTypeByName("struct.jpeg_c_prep_controller");
 if (!StructTy_struct_jpeg_c_prep_controller) {
 StructTy_struct_jpeg_c_prep_controller = StructType::create(mod->getContext(), "struct.jpeg_c_prep_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_c_prep_controller_fields;
 if (StructTy_struct_jpeg_c_prep_controller->isOpaque()) {
 StructTy_struct_jpeg_c_prep_controller->setBody(StructTy_struct_jpeg_c_prep_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_217 = PointerType::get(StructTy_struct_jpeg_c_prep_controller, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_217);
 StructType *StructTy_struct_jpeg_c_coef_controller = mod->getTypeByName("struct.jpeg_c_coef_controller");
 if (!StructTy_struct_jpeg_c_coef_controller) {
 StructTy_struct_jpeg_c_coef_controller = StructType::create(mod->getContext(), "struct.jpeg_c_coef_controller");
 }
 std::vector<Type*>StructTy_struct_jpeg_c_coef_controller_fields;
 if (StructTy_struct_jpeg_c_coef_controller->isOpaque()) {
 StructTy_struct_jpeg_c_coef_controller->setBody(StructTy_struct_jpeg_c_coef_controller_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_218 = PointerType::get(StructTy_struct_jpeg_c_coef_controller, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_218);
 StructType *StructTy_struct_jpeg_marker_writer = mod->getTypeByName("struct.jpeg_marker_writer");
 if (!StructTy_struct_jpeg_marker_writer) {
 StructTy_struct_jpeg_marker_writer = StructType::create(mod->getContext(), "struct.jpeg_marker_writer");
 }
 std::vector<Type*>StructTy_struct_jpeg_marker_writer_fields;
 if (StructTy_struct_jpeg_marker_writer->isOpaque()) {
 StructTy_struct_jpeg_marker_writer->setBody(StructTy_struct_jpeg_marker_writer_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_219 = PointerType::get(StructTy_struct_jpeg_marker_writer, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_219);
 StructType *StructTy_struct_jpeg_color_converter = mod->getTypeByName("struct.jpeg_color_converter");
 if (!StructTy_struct_jpeg_color_converter) {
 StructTy_struct_jpeg_color_converter = StructType::create(mod->getContext(), "struct.jpeg_color_converter");
 }
 std::vector<Type*>StructTy_struct_jpeg_color_converter_fields;
 if (StructTy_struct_jpeg_color_converter->isOpaque()) {
 StructTy_struct_jpeg_color_converter->setBody(StructTy_struct_jpeg_color_converter_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_220 = PointerType::get(StructTy_struct_jpeg_color_converter, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_220);
 StructType *StructTy_struct_jpeg_downsampler = mod->getTypeByName("struct.jpeg_downsampler");
 if (!StructTy_struct_jpeg_downsampler) {
 StructTy_struct_jpeg_downsampler = StructType::create(mod->getContext(), "struct.jpeg_downsampler");
 }
 std::vector<Type*>StructTy_struct_jpeg_downsampler_fields;
 if (StructTy_struct_jpeg_downsampler->isOpaque()) {
 StructTy_struct_jpeg_downsampler->setBody(StructTy_struct_jpeg_downsampler_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_221 = PointerType::get(StructTy_struct_jpeg_downsampler, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_221);
 StructType *StructTy_struct_jpeg_forward_dct = mod->getTypeByName("struct.jpeg_forward_dct");
 if (!StructTy_struct_jpeg_forward_dct) {
 StructTy_struct_jpeg_forward_dct = StructType::create(mod->getContext(), "struct.jpeg_forward_dct");
 }
 std::vector<Type*>StructTy_struct_jpeg_forward_dct_fields;
 if (StructTy_struct_jpeg_forward_dct->isOpaque()) {
 StructTy_struct_jpeg_forward_dct->setBody(StructTy_struct_jpeg_forward_dct_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_222 = PointerType::get(StructTy_struct_jpeg_forward_dct, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_222);
 StructType *StructTy_struct_jpeg_entropy_encoder = mod->getTypeByName("struct.jpeg_entropy_encoder");
 if (!StructTy_struct_jpeg_entropy_encoder) {
 StructTy_struct_jpeg_entropy_encoder = StructType::create(mod->getContext(), "struct.jpeg_entropy_encoder");
 }
 std::vector<Type*>StructTy_struct_jpeg_entropy_encoder_fields;
 if (StructTy_struct_jpeg_entropy_encoder->isOpaque()) {
 StructTy_struct_jpeg_entropy_encoder->setBody(StructTy_struct_jpeg_entropy_encoder_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_223 = PointerType::get(StructTy_struct_jpeg_entropy_encoder, 0);
 
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_223);
 StructTy_struct_jpeg_compress_struct_fields.push_back(PointerTy_214);
 StructTy_struct_jpeg_compress_struct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_jpeg_compress_struct->isOpaque()) {
 StructTy_struct_jpeg_compress_struct->setBody(StructTy_struct_jpeg_compress_struct_fields, /*isPacked=*/false);
 }
 
 
 std::vector<Type*>FuncTy_225_args;
 FuncTy_225_args.push_back(PointerTy_207);
 FuncTy_225_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_225_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_225 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_225_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_224 = PointerType::get(FuncTy_225, 0);
 
 std::vector<Type*>FuncTy_227_args;
 FuncTy_227_args.push_back(PointerTy_207);
 FuncTy_227_args.push_back(PointerTy_4);
 FunctionType* FuncTy_227 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_227_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_226 = PointerType::get(FuncTy_227, 0);
 
 std::vector<Type*>FuncTy_229_args;
 FuncTy_229_args.push_back(PointerTy_207);
 FuncTy_229_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_229_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_229 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_229_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_228 = PointerType::get(FuncTy_229, 0);
 
 std::vector<Type*>FuncTy_231_args;
 FuncTy_231_args.push_back(PointerTy_207);
 FuncTy_231_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_231 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_231_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_230 = PointerType::get(FuncTy_231, 0);
 
 std::vector<Type*>FuncTy_233_args;
 FuncTy_233_args.push_back(PointerTy_207);
 FuncTy_233_args.push_back(PointerTy_1);
 FuncTy_233_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_233 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_233_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_232 = PointerType::get(FuncTy_233, 0);
 
 
 // Function Declarations
 
 Function* func_filter_kernel = mod->getFunction("filter_kernel");
 if (!func_filter_kernel) {
 func_filter_kernel = Function::Create(
  /*Type=*/FuncTy_55,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"filter_kernel", mod); 
 func_filter_kernel->setCallingConv(CallingConv::C);
 }
 AttributeSet func_filter_kernel_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ReadOnly);
    B.addAttribute(Attribute::NoCapture);
    PAS = AttributeSet::get(mod->getContext(), 1U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ReadOnly);
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_filter_kernel_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_filter_kernel->setAttributes(func_filter_kernel_PAL);

Function* func_filter_kernel_2d = mod->getFunction("filter_kernel_2d");
if (!func_filter_kernel_2d) {
func_filter_kernel_2d = Function::Create(
 /*Type=*/FuncTy_60,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"filter_kernel_2d", mod); 
func_filter_kernel_2d->setCallingConv(CallingConv::C);
}
AttributeSet func_filter_kernel_2d_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ReadOnly);
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::ReadOnly);
 B.addAttribute(Attribute::NoCapture);
 PAS = AttributeSet::get(mod->getContext(), 3U, B);
}

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_filter_kernel_2d_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_filter_kernel_2d->setAttributes(func_filter_kernel_2d_PAL);

Function* func_convolve_arr_linear = mod->getFunction("convolve_arr_linear");
if (!func_convolve_arr_linear) {
func_convolve_arr_linear = Function::Create(
 /*Type=*/FuncTy_61,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_arr_linear", mod); 
func_convolve_arr_linear->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_arr_linear_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_convolve_arr_linear_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_convolve_arr_linear->setAttributes(func_convolve_arr_linear_PAL);

Function* func_convolve_arr_indirection = mod->getFunction("convolve_arr_indirection");
if (!func_convolve_arr_indirection) {
func_convolve_arr_indirection = Function::Create(
 /*Type=*/FuncTy_60,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_arr_indirection", mod); 
func_convolve_arr_indirection->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_arr_indirection_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_convolve_arr_indirection_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_convolve_arr_indirection->setAttributes(func_convolve_arr_indirection_PAL);

Function* func_convolve_loop_nest = mod->getFunction("convolve_loop_nest");
if (!func_convolve_loop_nest) {
func_convolve_loop_nest = Function::Create(
 /*Type=*/FuncTy_60,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_loop_nest", mod); 
func_convolve_loop_nest->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_loop_nest_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_convolve_loop_nest_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_convolve_loop_nest->setAttributes(func_convolve_loop_nest_PAL);

Function* func_llvm_dbg_value = mod->getFunction("llvm.dbg.value");
if (!func_llvm_dbg_value) {
func_llvm_dbg_value = Function::Create(
 /*Type=*/FuncTy_58,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.dbg.value", mod); // (external, no body)
func_llvm_dbg_value->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_dbg_value_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_llvm_dbg_value_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_llvm_dbg_value->setAttributes(func_llvm_dbg_value_PAL);

Function* func_main = mod->getFunction("main");
if (!func_main) {
func_main = Function::Create(
 /*Type=*/FuncTy_66,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"main", mod); 
func_main->setCallingConv(CallingConv::C);
}
AttributeSet func_main_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_main->setAttributes(func_main_PAL);

Function* func_llvm_dbg_declare = mod->getFunction("llvm.dbg.declare");
if (!func_llvm_dbg_declare) {
func_llvm_dbg_declare = Function::Create(
 /*Type=*/FuncTy_69,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.dbg.declare", mod); // (external, no body)
func_llvm_dbg_declare->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_dbg_declare_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_llvm_dbg_declare_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_llvm_dbg_declare->setAttributes(func_llvm_dbg_declare_PAL);

Function* func_getopt = mod->getFunction("getopt");
if (!func_getopt) {
func_getopt = Function::Create(
 /*Type=*/FuncTy_71,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"getopt", mod); // (external, no body)
func_getopt->setCallingConv(CallingConv::C);
}
AttributeSet func_getopt_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_getopt_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_getopt->setAttributes(func_getopt_PAL);

Function* func_fprintf = mod->getFunction("fprintf");
if (!func_fprintf) {
func_fprintf = Function::Create(
 /*Type=*/FuncTy_73,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"fprintf", mod); // (external, no body)
func_fprintf->setCallingConv(CallingConv::C);
}
AttributeSet func_fprintf_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_fprintf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_fprintf->setAttributes(func_fprintf_PAL);

Function* func_exit = mod->getFunction("exit");
if (!func_exit) {
func_exit = Function::Create(
 /*Type=*/FuncTy_75,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"exit", mod); // (external, no body)
func_exit->setCallingConv(CallingConv::C);
}
AttributeSet func_exit_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_exit_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_exit->setAttributes(func_exit_PAL);

Function* func_atoi = mod->getFunction("atoi");
if (!func_atoi) {
func_atoi = Function::Create(
 /*Type=*/FuncTy_77,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"atoi", mod); // (external, no body)
func_atoi->setCallingConv(CallingConv::C);
}
AttributeSet func_atoi_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_atoi_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_atoi->setAttributes(func_atoi_PAL);

Function* func_calloc = mod->getFunction("calloc");
if (!func_calloc) {
func_calloc = Function::Create(
 /*Type=*/FuncTy_85,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"calloc", mod); // (external, no body)
func_calloc->setCallingConv(CallingConv::C);
}
AttributeSet func_calloc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_calloc_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_calloc->setAttributes(func_calloc_PAL);

Function* func_strlen = mod->getFunction("strlen");
if (!func_strlen) {
func_strlen = Function::Create(
 /*Type=*/FuncTy_83,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strlen", mod); // (external, no body)
func_strlen->setCallingConv(CallingConv::C);
}
AttributeSet func_strlen_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_strlen_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_strlen->setAttributes(func_strlen_PAL);

Function* func_strncpy = mod->getFunction("strncpy");
if (!func_strncpy) {
func_strncpy = Function::Create(
 /*Type=*/FuncTy_87,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strncpy", mod); // (external, no body)
func_strncpy->setCallingConv(CallingConv::C);
}
AttributeSet func_strncpy_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_strncpy_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_strncpy->setAttributes(func_strncpy_PAL);

Function* func_strcat = mod->getFunction("strcat");
if (!func_strcat) {
func_strcat = Function::Create(
 /*Type=*/FuncTy_89,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strcat", mod); // (external, no body)
func_strcat->setCallingConv(CallingConv::C);
}
AttributeSet func_strcat_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_strcat_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_strcat->setAttributes(func_strcat_PAL);

Function* func_llvm_memcpy_p0i8_p0i8_i64 = mod->getFunction("llvm.memcpy.p0i8.p0i8.i64");
if (!func_llvm_memcpy_p0i8_p0i8_i64) {
func_llvm_memcpy_p0i8_p0i8_i64 = Function::Create(
 /*Type=*/FuncTy_91,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.memcpy.p0i8.p0i8.i64", mod); // (external, no body)
func_llvm_memcpy_p0i8_p0i8_i64->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_memcpy_p0i8_p0i8_i64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ReadOnly);
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_llvm_memcpy_p0i8_p0i8_i64_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_memcpy_p0i8_p0i8_i64->setAttributes(func_llvm_memcpy_p0i8_p0i8_i64_PAL);

Function* func_printf = mod->getFunction("printf");
if (!func_printf) {
func_printf = Function::Create(
 /*Type=*/FuncTy_93,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"printf", mod); // (external, no body)
func_printf->setCallingConv(CallingConv::C);
}
AttributeSet func_printf_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_printf->setAttributes(func_printf_PAL);

Function* func_convolve_hw_use_accelerator = mod->getFunction("convolve_hw_use_accelerator");
if (!func_convolve_hw_use_accelerator) {
func_convolve_hw_use_accelerator = Function::Create(
 /*Type=*/FuncTy_63,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_hw_use_accelerator", mod); 
func_convolve_hw_use_accelerator->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_hw_use_accelerator_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_convolve_hw_use_accelerator_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_convolve_hw_use_accelerator->setAttributes(func_convolve_hw_use_accelerator_PAL);

Function* func_getenv = mod->getFunction("getenv");
if (!func_getenv) {
func_getenv = Function::Create(
 /*Type=*/FuncTy_100,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"getenv", mod); // (external, no body)
func_getenv->setCallingConv(CallingConv::C);
}
AttributeSet func_getenv_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_getenv_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_getenv->setAttributes(func_getenv_PAL);

Function* func_strtol = mod->getFunction("strtol");
if (!func_strtol) {
func_strtol = Function::Create(
 /*Type=*/FuncTy_102,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strtol", mod); // (external, no body)
func_strtol->setCallingConv(CallingConv::C);
}
AttributeSet func_strtol_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_strtol_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_strtol->setAttributes(func_strtol_PAL);

Function* func_convolve_bypass_hw_iface0 = mod->getFunction("convolve_bypass_hw_iface0");
if (!func_convolve_bypass_hw_iface0) {
func_convolve_bypass_hw_iface0 = Function::Create(
 /*Type=*/FuncTy_61,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_bypass_hw_iface0", mod); 
func_convolve_bypass_hw_iface0->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_bypass_hw_iface0_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_convolve_bypass_hw_iface0_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_convolve_bypass_hw_iface0->setAttributes(func_convolve_bypass_hw_iface0_PAL);

Function* func_convolve_bypass_hw_iface1 = mod->getFunction("convolve_bypass_hw_iface1");
if (!func_convolve_bypass_hw_iface1) {
func_convolve_bypass_hw_iface1 = Function::Create(
 /*Type=*/FuncTy_60,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"convolve_bypass_hw_iface1", mod); 
func_convolve_bypass_hw_iface1->setCallingConv(CallingConv::C);
}
AttributeSet func_convolve_bypass_hw_iface1_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_convolve_bypass_hw_iface1_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_convolve_bypass_hw_iface1->setAttributes(func_convolve_bypass_hw_iface1_PAL);

Function* func_malloc = mod->getFunction("malloc");
if (!func_malloc) {
func_malloc = Function::Create(
 /*Type=*/FuncTy_114,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"malloc", mod); // (external, no body)
func_malloc->setCallingConv(CallingConv::C);
}
AttributeSet func_malloc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_malloc_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_malloc->setAttributes(func_malloc_PAL);

Function* func_dlopen = mod->getFunction("dlopen");
if (!func_dlopen) {
func_dlopen = Function::Create(
 /*Type=*/FuncTy_116,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"dlopen", mod); // (external, no body)
func_dlopen->setCallingConv(CallingConv::C);
}
AttributeSet func_dlopen_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_dlopen_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_dlopen->setAttributes(func_dlopen_PAL);

Function* func_dlerror = mod->getFunction("dlerror");
if (!func_dlerror) {
func_dlerror = Function::Create(
 /*Type=*/FuncTy_118,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"dlerror", mod); // (external, no body)
func_dlerror->setCallingConv(CallingConv::C);
}
AttributeSet func_dlerror_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_dlerror_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_dlerror->setAttributes(func_dlerror_PAL);

Function* func_dlsym = mod->getFunction("dlsym");
if (!func_dlsym) {
func_dlsym = Function::Create(
 /*Type=*/FuncTy_89,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"dlsym", mod); // (external, no body)
func_dlsym->setCallingConv(CallingConv::C);
}
AttributeSet func_dlsym_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_dlsym_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_dlsym->setAttributes(func_dlsym_PAL);

Function* func_dlclose = mod->getFunction("dlclose");
if (!func_dlclose) {
func_dlclose = Function::Create(
 /*Type=*/FuncTy_77,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"dlclose", mod); // (external, no body)
func_dlclose->setCallingConv(CallingConv::C);
}
AttributeSet func_dlclose_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_dlclose_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_dlclose->setAttributes(func_dlclose_PAL);

Function* func_free = mod->getFunction("free");
if (!func_free) {
func_free = Function::Create(
 /*Type=*/FuncTy_120,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"free", mod); // (external, no body)
func_free->setCallingConv(CallingConv::C);
}
AttributeSet func_free_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_free_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_free->setAttributes(func_free_PAL);

Function* func_free_array_2d = mod->getFunction("free_array_2d");
if (!func_free_array_2d) {
func_free_array_2d = Function::Create(
 /*Type=*/FuncTy_95,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"free_array_2d", mod); 
func_free_array_2d->setCallingConv(CallingConv::C);
}
AttributeSet func_free_array_2d_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_free_array_2d_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_free_array_2d->setAttributes(func_free_array_2d_PAL);

Function* func_create_array_2d = mod->getFunction("create_array_2d");
if (!func_create_array_2d) {
func_create_array_2d = Function::Create(
 /*Type=*/FuncTy_79,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"create_array_2d", mod); 
func_create_array_2d->setCallingConv(CallingConv::C);
}
AttributeSet func_create_array_2d_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ZExt);
  PAS = AttributeSet::get(mod->getContext(), 3U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_create_array_2d_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_create_array_2d->setAttributes(func_create_array_2d_PAL);

Function* func_jpeg_decompress = mod->getFunction("jpeg_decompress");
if (!func_jpeg_decompress) {
func_jpeg_decompress = Function::Create(
 /*Type=*/FuncTy_81,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_decompress", mod); 
func_jpeg_decompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_decompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoCapture);
 PAS = AttributeSet::get(mod->getContext(), 3U, B);
}

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoCapture);
 PAS = AttributeSet::get(mod->getContext(), 4U, B);
}

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::UWTable);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_jpeg_decompress_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_jpeg_decompress->setAttributes(func_jpeg_decompress_PAL);

Function* func_llvm_lifetime_start = mod->getFunction("llvm.lifetime.start");
if (!func_llvm_lifetime_start) {
func_llvm_lifetime_start = Function::Create(
 /*Type=*/FuncTy_190,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.start", mod); // (external, no body)
func_llvm_lifetime_start->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_start_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_start_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_start->setAttributes(func_llvm_lifetime_start_PAL);

Function* func_jpeg_std_error = mod->getFunction("jpeg_std_error");
if (!func_jpeg_std_error) {
func_jpeg_std_error = Function::Create(
 /*Type=*/FuncTy_192,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_std_error", mod); // (external, no body)
func_jpeg_std_error->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_std_error_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_std_error_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_std_error->setAttributes(func_jpeg_std_error_PAL);

Function* func_jpeg_CreateDecompress = mod->getFunction("jpeg_CreateDecompress");
if (!func_jpeg_CreateDecompress) {
func_jpeg_CreateDecompress = Function::Create(
 /*Type=*/FuncTy_195,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_CreateDecompress", mod); // (external, no body)
func_jpeg_CreateDecompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_CreateDecompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_CreateDecompress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_CreateDecompress->setAttributes(func_jpeg_CreateDecompress_PAL);

Function* func_fopen = mod->getFunction("fopen");
if (!func_fopen) {
func_fopen = Function::Create(
 /*Type=*/FuncTy_197,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"fopen", mod); // (external, no body)
func_fopen->setCallingConv(CallingConv::C);
}
AttributeSet func_fopen_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::ReadOnly);
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 1U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::ReadOnly);
 B.addAttribute(Attribute::NoCapture);
 PAS = AttributeSet::get(mod->getContext(), 2U, B);
}

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_fopen_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_fopen->setAttributes(func_fopen_PAL);

Function* func_jpeg_stdio_src = mod->getFunction("jpeg_stdio_src");
if (!func_jpeg_stdio_src) {
func_jpeg_stdio_src = Function::Create(
 /*Type=*/FuncTy_199,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_stdio_src", mod); // (external, no body)
func_jpeg_stdio_src->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_stdio_src_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_stdio_src_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_stdio_src->setAttributes(func_jpeg_stdio_src_PAL);

Function* func_jpeg_read_header = mod->getFunction("jpeg_read_header");
if (!func_jpeg_read_header) {
func_jpeg_read_header = Function::Create(
 /*Type=*/FuncTy_165,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_read_header", mod); // (external, no body)
func_jpeg_read_header->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_read_header_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_read_header_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_read_header->setAttributes(func_jpeg_read_header_PAL);

Function* func_jpeg_start_decompress = mod->getFunction("jpeg_start_decompress");
if (!func_jpeg_start_decompress) {
func_jpeg_start_decompress = Function::Create(
 /*Type=*/FuncTy_161,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_start_decompress", mod); // (external, no body)
func_jpeg_start_decompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_start_decompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_start_decompress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_start_decompress->setAttributes(func_jpeg_start_decompress_PAL);

Function* func_jpeg_finish_decompress = mod->getFunction("jpeg_finish_decompress");
if (!func_jpeg_finish_decompress) {
func_jpeg_finish_decompress = Function::Create(
 /*Type=*/FuncTy_161,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_finish_decompress", mod); // (external, no body)
func_jpeg_finish_decompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_finish_decompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_finish_decompress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_finish_decompress->setAttributes(func_jpeg_finish_decompress_PAL);

Function* func_jpeg_destroy_decompress = mod->getFunction("jpeg_destroy_decompress");
if (!func_jpeg_destroy_decompress) {
func_jpeg_destroy_decompress = Function::Create(
 /*Type=*/FuncTy_159,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_destroy_decompress", mod); // (external, no body)
func_jpeg_destroy_decompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_destroy_decompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_destroy_decompress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_destroy_decompress->setAttributes(func_jpeg_destroy_decompress_PAL);

Function* func_jpeg_read_scanlines = mod->getFunction("jpeg_read_scanlines");
if (!func_jpeg_read_scanlines) {
func_jpeg_read_scanlines = Function::Create(
 /*Type=*/FuncTy_204,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_read_scanlines", mod); // (external, no body)
func_jpeg_read_scanlines->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_read_scanlines_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_read_scanlines_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_read_scanlines->setAttributes(func_jpeg_read_scanlines_PAL);

Function* func_fclose = mod->getFunction("fclose");
if (!func_fclose) {
func_fclose = Function::Create(
 /*Type=*/FuncTy_206,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"fclose", mod); // (external, no body)
func_fclose->setCallingConv(CallingConv::C);
}
AttributeSet func_fclose_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_fclose_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_fclose->setAttributes(func_fclose_PAL);

Function* func_llvm_lifetime_end = mod->getFunction("llvm.lifetime.end");
if (!func_llvm_lifetime_end) {
func_llvm_lifetime_end = Function::Create(
 /*Type=*/FuncTy_190,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.end", mod); // (external, no body)
func_llvm_lifetime_end->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_end_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_end_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_end->setAttributes(func_llvm_lifetime_end_PAL);

Function* func_jpeg_compress = mod->getFunction("jpeg_compress");
if (!func_jpeg_compress) {
func_jpeg_compress = Function::Create(
 /*Type=*/FuncTy_97,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_compress", mod); 
func_jpeg_compress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_compress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_jpeg_compress_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_jpeg_compress->setAttributes(func_jpeg_compress_PAL);

Function* func_jpeg_CreateCompress = mod->getFunction("jpeg_CreateCompress");
if (!func_jpeg_CreateCompress) {
func_jpeg_CreateCompress = Function::Create(
 /*Type=*/FuncTy_225,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_CreateCompress", mod); // (external, no body)
func_jpeg_CreateCompress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_CreateCompress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_CreateCompress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_CreateCompress->setAttributes(func_jpeg_CreateCompress_PAL);

Function* func_jpeg_stdio_dest = mod->getFunction("jpeg_stdio_dest");
if (!func_jpeg_stdio_dest) {
func_jpeg_stdio_dest = Function::Create(
 /*Type=*/FuncTy_227,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_stdio_dest", mod); // (external, no body)
func_jpeg_stdio_dest->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_stdio_dest_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_stdio_dest_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_stdio_dest->setAttributes(func_jpeg_stdio_dest_PAL);

Function* func_jpeg_set_defaults = mod->getFunction("jpeg_set_defaults");
if (!func_jpeg_set_defaults) {
func_jpeg_set_defaults = Function::Create(
 /*Type=*/FuncTy_210,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_set_defaults", mod); // (external, no body)
func_jpeg_set_defaults->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_set_defaults_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_set_defaults_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_set_defaults->setAttributes(func_jpeg_set_defaults_PAL);

Function* func_jpeg_set_quality = mod->getFunction("jpeg_set_quality");
if (!func_jpeg_set_quality) {
func_jpeg_set_quality = Function::Create(
 /*Type=*/FuncTy_229,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_set_quality", mod); // (external, no body)
func_jpeg_set_quality->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_set_quality_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_set_quality_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_set_quality->setAttributes(func_jpeg_set_quality_PAL);

Function* func_jpeg_start_compress = mod->getFunction("jpeg_start_compress");
if (!func_jpeg_start_compress) {
func_jpeg_start_compress = Function::Create(
 /*Type=*/FuncTy_231,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_start_compress", mod); // (external, no body)
func_jpeg_start_compress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_start_compress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_start_compress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_start_compress->setAttributes(func_jpeg_start_compress_PAL);

Function* func_jpeg_write_scanlines = mod->getFunction("jpeg_write_scanlines");
if (!func_jpeg_write_scanlines) {
func_jpeg_write_scanlines = Function::Create(
 /*Type=*/FuncTy_233,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_write_scanlines", mod); // (external, no body)
func_jpeg_write_scanlines->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_write_scanlines_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_write_scanlines_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_write_scanlines->setAttributes(func_jpeg_write_scanlines_PAL);

Function* func_jpeg_finish_compress = mod->getFunction("jpeg_finish_compress");
if (!func_jpeg_finish_compress) {
func_jpeg_finish_compress = Function::Create(
 /*Type=*/FuncTy_210,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"jpeg_finish_compress", mod); // (external, no body)
func_jpeg_finish_compress->setCallingConv(CallingConv::C);
}
AttributeSet func_jpeg_finish_compress_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_jpeg_finish_compress_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_jpeg_finish_compress->setAttributes(func_jpeg_finish_compress_PAL);

Function* func_fwrite = mod->getFunction("fwrite");
if (!func_fwrite) {
func_fwrite = Function::Create(
 /*Type=*/FuncTy_202,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"fwrite", mod); // (external, no body)
func_fwrite->setCallingConv(CallingConv::C);
}
AttributeSet func_fwrite_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 4U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_fwrite_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_fwrite->setAttributes(func_fwrite_PAL);

Function* func_llvm_memset_p0i8_i64 = mod->getFunction("llvm.memset.p0i8.i64");
if (!func_llvm_memset_p0i8_i64) {
func_llvm_memset_p0i8_i64 = Function::Create(
 /*Type=*/FuncTy_122,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.memset.p0i8.i64", mod); // (external, no body)
func_llvm_memset_p0i8_i64->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_memset_p0i8_i64_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_memset_p0i8_i64_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_memset_p0i8_i64->setAttributes(func_llvm_memset_p0i8_i64_PAL);

// Global Variable Declarations


GlobalVariable* gvar_int32_opterr = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 32),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"opterr");

GlobalVariable* gvar_ptr_optarg = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_2,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"optarg");

GlobalVariable* gvar_ptr_stderr = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_4,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"stderr");

GlobalVariable* gvar_int32_optind = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 32),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"optind");

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_8,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_10,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str1");
gvar_array__str1->setAlignment(1);

GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_8,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str2");
gvar_array__str2->setAlignment(1);

GlobalVariable* gvar_array__str3 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_12,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str3");
gvar_array__str3->setAlignment(1);

GlobalVariable* gvar_array__str4 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_14,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str4");
gvar_array__str4->setAlignment(1);

GlobalVariable* gvar_array_main_kernel_3_3 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_16,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"main.kernel_3_3");
gvar_array_main_kernel_3_3->setAlignment(16);

GlobalVariable* gvar_array_main_kernel_5_5 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_18,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"main.kernel_5_5");
gvar_array_main_kernel_5_5->setAlignment(16);

GlobalVariable* gvar_array_main_kernel_7_7 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_20,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"main.kernel_7_7");
gvar_array_main_kernel_7_7->setAlignment(16);

GlobalVariable* gvar_array__str5 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_22,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str5");
gvar_array__str5->setAlignment(1);

GlobalVariable* gvar_array__str6 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_24,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str6");
gvar_array__str6->setAlignment(1);

GlobalVariable* gvar_array__str7 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_26,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str7");
gvar_array__str7->setAlignment(1);

GlobalVariable* gvar_ptr_libfilename_3_3 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_2,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"libfilename_3_3");
gvar_ptr_libfilename_3_3->setAlignment(8);

GlobalVariable* gvar_ptr_libfilename_5_5 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_2,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"libfilename_5_5");
gvar_ptr_libfilename_5_5->setAlignment(8);

GlobalVariable* gvar_ptr_libfilename_7_7 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_2,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"libfilename_7_7");
gvar_ptr_libfilename_7_7->setAlignment(8);

GlobalVariable* gvar_ptr_env_allow_hw = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/PointerTy_2,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"env_allow_hw");
gvar_ptr_env_allow_hw->setAlignment(8);

GlobalVariable* gvar_array__str47 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_28,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str47");
gvar_array__str47->setAlignment(1);

GlobalVariable* gvar_array__str58 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_7,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str58");
gvar_array__str58->setAlignment(1);

GlobalVariable* gvar_array__str69 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_31,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str69");
gvar_array__str69->setAlignment(1);

GlobalVariable* gvar_array__str710 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_7,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str710");
gvar_array__str710->setAlignment(1);

GlobalVariable* gvar_array__str8 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_28,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str8");
gvar_array__str8->setAlignment(1);

GlobalVariable* gvar_array__str9 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_33,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str9");
gvar_array__str9->setAlignment(1);

GlobalVariable* gvar_array__str10 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_35,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str10");
gvar_array__str10->setAlignment(1);

GlobalVariable* gvar_array__str11 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_37,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str11");
gvar_array__str11->setAlignment(1);

GlobalVariable* gvar_array__str12 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_39,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str12");
gvar_array__str12->setAlignment(1);

GlobalVariable* gvar_array__str13 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_41,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str13");
gvar_array__str13->setAlignment(1);

GlobalVariable* gvar_array__str14 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_43,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str14");
gvar_array__str14->setAlignment(1);

GlobalVariable* gvar_array__str15 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_45,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str15");
gvar_array__str15->setAlignment(1);

GlobalVariable* gvar_array__str116 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_45,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str116");
gvar_array__str116->setAlignment(1);

GlobalVariable* gvar_array__str217 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_45,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str217");
gvar_array__str217->setAlignment(1);

GlobalVariable* gvar_array__str318 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_14,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str318");
gvar_array__str318->setAlignment(1);

GlobalVariable* gvar_array__str27 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_47,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str27");
gvar_array__str27->setAlignment(1);

GlobalVariable* gvar_array__str128 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_39,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str128");
gvar_array__str128->setAlignment(1);

GlobalVariable* gvar_array__str229 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_49,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str229");
gvar_array__str229->setAlignment(1);

GlobalVariable* gvar_array__str330 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_51,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str330");
gvar_array__str330->setAlignment(1);

GlobalVariable* gvar_array__str431 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_47,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str431");
gvar_array__str431->setAlignment(1);

GlobalVariable* gvar_array__str532 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_39,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str532");
gvar_array__str532->setAlignment(1);

GlobalVariable* gvar_array__str633 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_53,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str633");
gvar_array__str633->setAlignment(1);

// Constant Definitions
Constant *const_array_234 = ConstantDataArray::getString(mod->getContext(), "f:v::", true);
Constant *const_array_235 = ConstantDataArray::getString(mod->getContext(), "Usage: %s -f [file...]\x0A", true);
Constant *const_array_236 = ConstantDataArray::getString(mod->getContext(), "dummy", true);
Constant *const_array_237 = ConstantDataArray::getString(mod->getContext(), "jpeg decompression failed\x0A", true);
Constant *const_array_238 = ConstantDataArray::getString(mod->getContext(), "_compressed.jpg\x00", true);
std::vector<Constant*> const_array_239_elems;
ConstantFP* const_float_240 = ConstantFP::get(mod->getContext(), APFloat(1.000000e-01f));
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
const_array_239_elems.push_back(const_float_240);
Constant* const_array_239 = ConstantArray::get(ArrayTy_16, const_array_239_elems);
std::vector<Constant*> const_array_241_elems;
ConstantFP* const_float_242 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00f));
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
const_array_241_elems.push_back(const_float_242);
Constant* const_array_241 = ConstantArray::get(ArrayTy_18, const_array_241_elems);
std::vector<Constant*> const_array_243_elems;
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
const_array_243_elems.push_back(const_float_242);
Constant* const_array_243 = ConstantArray::get(ArrayTy_20, const_array_243_elems);
Constant *const_array_244 = ConstantDataArray::getString(mod->getContext(), "invalid filter size!\x0A", true);
Constant *const_array_245 = ConstantDataArray::getString(mod->getContext(), "%d\x09", true);
Constant *const_array_246 = ConstantDataArray::getString(mod->getContext(), "\x0A", true);
std::vector<Constant*> const_ptr_247_indices;
ConstantInt* const_int32_248 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
const_ptr_247_indices.push_back(const_int32_248);
const_ptr_247_indices.push_back(const_int32_248);
Constant* const_ptr_247 = ConstantExpr::getGetElementPtr(gvar_array__str15, const_ptr_247_indices);
std::vector<Constant*> const_ptr_249_indices;
const_ptr_249_indices.push_back(const_int32_248);
const_ptr_249_indices.push_back(const_int32_248);
Constant* const_ptr_249 = ConstantExpr::getGetElementPtr(gvar_array__str116, const_ptr_249_indices);
std::vector<Constant*> const_ptr_250_indices;
const_ptr_250_indices.push_back(const_int32_248);
const_ptr_250_indices.push_back(const_int32_248);
Constant* const_ptr_250 = ConstantExpr::getGetElementPtr(gvar_array__str217, const_ptr_250_indices);
std::vector<Constant*> const_ptr_251_indices;
const_ptr_251_indices.push_back(const_int32_248);
const_ptr_251_indices.push_back(const_int32_248);
Constant* const_ptr_251 = ConstantExpr::getGetElementPtr(gvar_array__str318, const_ptr_251_indices);
Constant *const_array_252 = ConstantDataArray::getString(mod->getContext(), "Filter size %d, nx: %d, ny: %d\x0A", true);
Constant *const_array_253 = ConstantDataArray::getString(mod->getContext(), "HW bypass 0 called\x0A", true);
Constant *const_array_254 = ConstantDataArray::getString(mod->getContext(), "Parameters:\x0Asrc: %p\x0Adst: %p\x0Akernel: %p\x0AFilter size: %d\x0AData size x: %d\x0AData size y: %d\x0A", true);
Constant *const_array_255 = ConstantDataArray::getString(mod->getContext(), "HW bypass 1 called\x0A", true);
Constant *const_array_256 = ConstantDataArray::getString(mod->getContext(), "No maxfile for filter size: %d\x0A", true);
Constant *const_array_257 = ConstantDataArray::getString(mod->getContext(), "Could not load shared library! %s\x0A", true);
Constant *const_array_258 = ConstantDataArray::getString(mod->getContext(), "MemStream", true);
Constant *const_array_259 = ConstantDataArray::getString(mod->getContext(), "Could not find interface: %s \x0A", true);
Constant *const_array_260 = ConstantDataArray::getString(mod->getContext(), "MemStream_init", true);
Constant *const_array_261 = ConstantDataArray::getString(mod->getContext(), "Initializing DFE\x0A", true);
Constant *const_array_262 = ConstantDataArray::getString(mod->getContext(), "DFE finished\x0A", true);
Constant *const_array_263 = ConstantDataArray::getString(mod->getContext(), "/home/lfunke/overlays/slic_convolution_3_3.so", true);
Constant *const_array_264 = ConstantDataArray::getString(mod->getContext(), "/home/lfunke/overlays/slic_convolution_5_5.so", true);
Constant *const_array_265 = ConstantDataArray::getString(mod->getContext(), "/home/lfunke/overlays/slic_convolution_7_7.so", true);
Constant *const_array_266 = ConstantDataArray::getString(mod->getContext(), "ALLOW_OP_MIGRATE", true);
Constant *const_array_267 = ConstantDataArray::getString(mod->getContext(), "rb", true);
Constant *const_array_268 = ConstantDataArray::getString(mod->getContext(), "can't open %s\x0A", true);
Constant *const_array_269 = ConstantDataArray::getString(mod->getContext(), "Only greyscale images supported! Channels: %d\x0A", true);
Constant *const_array_270 = ConstantDataArray::getString(mod->getContext(), "Image empty\x0A", true);
Constant *const_array_271 = ConstantDataArray::getString(mod->getContext(), "wb", true);
Constant *const_array_272 = ConstantDataArray::getString(mod->getContext(), "can't open: %s", true);
Constant *const_array_273 = ConstantDataArray::getString(mod->getContext(), "Cannot handle color space, channels: %d", true);
ConstantInt* const_int64_274 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int32_275 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
ConstantFP* const_float_276 = ConstantFP::get(mod->getContext(), APFloat(0.000000e+00f));
ConstantInt* const_int64_277 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("2"), 10));
ConstantInt* const_int64_278 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
ConstantInt* const_int8_279 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("0"), 10));
ConstantInt* const_int64_280 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("32"), 10));
ConstantInt* const_int64_281 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-1"), 10));
ConstantInt* const_int32_282 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantPointerNull* const_ptr_283 = ConstantPointerNull::get(PointerTy_2);
std::vector<Constant*> const_ptr_284_indices;
const_ptr_284_indices.push_back(const_int32_248);
const_ptr_284_indices.push_back(const_int32_248);
Constant* const_ptr_284 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_284_indices);
ConstantInt* const_int32_285 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("-1"), 10));
ConstantInt* const_int32_286 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("102"), 10));
ConstantInt* const_int32_287 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("118"), 10));
std::vector<Constant*> const_ptr_288_indices;
const_ptr_288_indices.push_back(const_int32_248);
const_ptr_288_indices.push_back(const_int32_248);
Constant* const_ptr_288 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_288_indices);
std::vector<Constant*> const_ptr_289_indices;
const_ptr_289_indices.push_back(const_int32_248);
const_ptr_289_indices.push_back(const_int32_248);
Constant* const_ptr_289 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_289_indices);
ConstantInt* const_int8_290 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("1"), 10));
std::vector<Constant*> const_ptr_291_indices;
const_ptr_291_indices.push_back(const_int32_248);
const_ptr_291_indices.push_back(const_int32_248);
Constant* const_ptr_291 = ConstantExpr::getGetElementPtr(gvar_array__str3, const_ptr_291_indices);
ConstantInt* const_int64_292 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("17"), 10));
std::vector<Constant*> const_ptr_293_indices;
const_ptr_293_indices.push_back(const_int32_248);
const_ptr_293_indices.push_back(const_int32_248);
Constant* const_ptr_293 = ConstantExpr::getGetElementPtr(gvar_array__str4, const_ptr_293_indices);
Constant* const_ptr_294 = ConstantExpr::getCast(Instruction::BitCast, gvar_array_main_kernel_3_3, PointerTy_2);
ConstantInt* const_int64_295 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("36"), 10));
ConstantInt* const_int32_296 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("16"), 10));
ConstantInt* const_int1_297 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("0"), 10));
Constant* const_ptr_298 = ConstantExpr::getCast(Instruction::BitCast, gvar_array_main_kernel_5_5, PointerTy_2);
ConstantInt* const_int64_299 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("100"), 10));
Constant* const_ptr_300 = ConstantExpr::getCast(Instruction::BitCast, gvar_array_main_kernel_7_7, PointerTy_2);
ConstantInt* const_int64_301 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("196"), 10));
ConstantInt* const_int32_302 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));
ConstantInt* const_int32_303 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("5"), 10));
ConstantInt* const_int32_304 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("7"), 10));
std::vector<Constant*> const_ptr_305_indices;
const_ptr_305_indices.push_back(const_int32_248);
const_ptr_305_indices.push_back(const_int32_248);
Constant* const_ptr_305 = ConstantExpr::getGetElementPtr(gvar_array__str5, const_ptr_305_indices);
std::vector<Constant*> const_ptr_306_indices;
const_ptr_306_indices.push_back(const_int32_248);
const_ptr_306_indices.push_back(const_int32_248);
Constant* const_ptr_306 = ConstantExpr::getGetElementPtr(gvar_array__str6, const_ptr_306_indices);
std::vector<Constant*> const_ptr_307_indices;
const_ptr_307_indices.push_back(const_int32_248);
const_ptr_307_indices.push_back(const_int32_248);
Constant* const_ptr_307 = ConstantExpr::getGetElementPtr(gvar_array__str7, const_ptr_307_indices);
ConstantPointerNull* const_ptr_308 = ConstantPointerNull::get(PointerTy_1);
ConstantInt* const_int32_309 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
std::vector<Constant*> const_ptr_310_indices;
const_ptr_310_indices.push_back(const_int32_248);
const_ptr_310_indices.push_back(const_int32_248);
Constant* const_ptr_310 = ConstantExpr::getGetElementPtr(gvar_array__str47, const_ptr_310_indices);
ConstantInt* const_int1_311 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("-1"), 10));
std::vector<Constant*> const_ptr_312_indices;
const_ptr_312_indices.push_back(const_int32_248);
const_ptr_312_indices.push_back(const_int32_248);
Constant* const_ptr_312 = ConstantExpr::getGetElementPtr(gvar_array__str58, const_ptr_312_indices);
std::vector<Constant*> const_ptr_313_indices;
const_ptr_313_indices.push_back(const_int32_248);
const_ptr_313_indices.push_back(const_int32_248);
Constant* const_ptr_313 = ConstantExpr::getGetElementPtr(gvar_array__str69, const_ptr_313_indices);
std::vector<Constant*> const_ptr_314_indices;
const_ptr_314_indices.push_back(const_int32_248);
const_ptr_314_indices.push_back(const_int32_248);
Constant* const_ptr_314 = ConstantExpr::getGetElementPtr(gvar_array__str710, const_ptr_314_indices);
std::vector<Constant*> const_ptr_315_indices;
const_ptr_315_indices.push_back(const_int32_248);
const_ptr_315_indices.push_back(const_int32_248);
Constant* const_ptr_315 = ConstantExpr::getGetElementPtr(gvar_array__str8, const_ptr_315_indices);
ConstantInt* const_int32_316 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("257"), 10));
std::vector<Constant*> const_ptr_317_indices;
const_ptr_317_indices.push_back(const_int32_248);
const_ptr_317_indices.push_back(const_int32_248);
Constant* const_ptr_317 = ConstantExpr::getGetElementPtr(gvar_array__str9, const_ptr_317_indices);
std::vector<Constant*> const_ptr_318_indices;
const_ptr_318_indices.push_back(const_int32_248);
const_ptr_318_indices.push_back(const_int32_248);
Constant* const_ptr_318 = ConstantExpr::getGetElementPtr(gvar_array__str10, const_ptr_318_indices);
std::vector<Constant*> const_ptr_319_indices;
const_ptr_319_indices.push_back(const_int32_248);
const_ptr_319_indices.push_back(const_int32_248);
Constant* const_ptr_319 = ConstantExpr::getGetElementPtr(gvar_array__str11, const_ptr_319_indices);
std::vector<Constant*> const_ptr_320_indices;
const_ptr_320_indices.push_back(const_int32_248);
const_ptr_320_indices.push_back(const_int32_248);
Constant* const_ptr_320 = ConstantExpr::getGetElementPtr(gvar_array__str12, const_ptr_320_indices);
std::vector<Constant*> const_ptr_321_indices;
const_ptr_321_indices.push_back(const_int32_248);
const_ptr_321_indices.push_back(const_int32_248);
Constant* const_ptr_321 = ConstantExpr::getGetElementPtr(gvar_array__str13, const_ptr_321_indices);
std::vector<Constant*> const_ptr_322_indices;
const_ptr_322_indices.push_back(const_int32_248);
const_ptr_322_indices.push_back(const_int32_248);
Constant* const_ptr_322 = ConstantExpr::getGetElementPtr(gvar_array__str14, const_ptr_322_indices);
ConstantInt* const_int64_323 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("3"), 10));
ConstantInt* const_int64_324 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("168"), 10));
ConstantInt* const_int64_325 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("656"), 10));
ConstantInt* const_int32_326 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("80"), 10));
std::vector<Constant*> const_ptr_327_indices;
const_ptr_327_indices.push_back(const_int64_274);
const_ptr_327_indices.push_back(const_int64_274);
Constant* const_ptr_327 = ConstantExpr::getGetElementPtr(gvar_array__str27, const_ptr_327_indices);
ConstantPointerNull* const_ptr_328 = ConstantPointerNull::get(PointerTy_4);
std::vector<Constant*> const_ptr_329_indices;
const_ptr_329_indices.push_back(const_int64_274);
const_ptr_329_indices.push_back(const_int64_274);
Constant* const_ptr_329 = ConstantExpr::getGetElementPtr(gvar_array__str128, const_ptr_329_indices);
ConstantInt* const_int32_330 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("27"), 10));
ConstantInt* const_int32_331 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("28"), 10));
ConstantInt* const_int32_332 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("32"), 10));
std::vector<Constant*> const_ptr_333_indices;
const_ptr_333_indices.push_back(const_int64_274);
const_ptr_333_indices.push_back(const_int64_274);
Constant* const_ptr_333 = ConstantExpr::getGetElementPtr(gvar_array__str229, const_ptr_333_indices);
std::vector<Constant*> const_ptr_334_indices;
const_ptr_334_indices.push_back(const_int64_274);
const_ptr_334_indices.push_back(const_int64_274);
Constant* const_ptr_334 = ConstantExpr::getGetElementPtr(gvar_array__str330, const_ptr_334_indices);
ConstantInt* const_int64_335 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("12"), 10));
ConstantInt* const_int32_336 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("34"), 10));
std::vector<Constant*> const_ptr_337_indices;
const_ptr_337_indices.push_back(const_int64_274);
const_ptr_337_indices.push_back(const_int64_274);
Constant* const_ptr_337 = ConstantExpr::getGetElementPtr(gvar_array__str431, const_ptr_337_indices);
std::vector<Constant*> const_ptr_338_indices;
const_ptr_338_indices.push_back(const_int64_274);
const_ptr_338_indices.push_back(const_int64_274);
Constant* const_ptr_338 = ConstantExpr::getGetElementPtr(gvar_array__str532, const_ptr_338_indices);
ConstantInt* const_int64_339 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("584"), 10));
ConstantInt* const_int32_340 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("8"), 10));
ConstantInt* const_int32_341 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("9"), 10));
std::vector<Constant*> const_ptr_342_indices;
const_ptr_342_indices.push_back(const_int64_274);
const_ptr_342_indices.push_back(const_int64_274);
Constant* const_ptr_342 = ConstantExpr::getGetElementPtr(gvar_array__str633, const_ptr_342_indices);
ConstantInt* const_int32_343 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("75"), 10));
ConstantInt* const_int32_344 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("45"), 10));

// Global Variable Definitions
gvar_array__str->setInitializer(const_array_234);
gvar_array__str1->setInitializer(const_array_235);
gvar_array__str2->setInitializer(const_array_236);
gvar_array__str3->setInitializer(const_array_237);
gvar_array__str4->setInitializer(const_array_238);
gvar_array_main_kernel_3_3->setInitializer(const_array_239);
gvar_array_main_kernel_5_5->setInitializer(const_array_241);
gvar_array_main_kernel_7_7->setInitializer(const_array_243);
gvar_array__str5->setInitializer(const_array_244);
gvar_array__str6->setInitializer(const_array_245);
gvar_array__str7->setInitializer(const_array_246);
gvar_ptr_libfilename_3_3->setInitializer(const_ptr_247);
gvar_ptr_libfilename_5_5->setInitializer(const_ptr_249);
gvar_ptr_libfilename_7_7->setInitializer(const_ptr_250);
gvar_ptr_env_allow_hw->setInitializer(const_ptr_251);
gvar_array__str47->setInitializer(const_array_252);
gvar_array__str58->setInitializer(const_array_253);
gvar_array__str69->setInitializer(const_array_254);
gvar_array__str710->setInitializer(const_array_255);
gvar_array__str8->setInitializer(const_array_256);
gvar_array__str9->setInitializer(const_array_257);
gvar_array__str10->setInitializer(const_array_258);
gvar_array__str11->setInitializer(const_array_259);
gvar_array__str12->setInitializer(const_array_260);
gvar_array__str13->setInitializer(const_array_261);
gvar_array__str14->setInitializer(const_array_262);
gvar_array__str15->setInitializer(const_array_263);
gvar_array__str116->setInitializer(const_array_264);
gvar_array__str217->setInitializer(const_array_265);
gvar_array__str318->setInitializer(const_array_266);
gvar_array__str27->setInitializer(const_array_267);
gvar_array__str128->setInitializer(const_array_268);
gvar_array__str229->setInitializer(const_array_269);
gvar_array__str330->setInitializer(const_array_270);
gvar_array__str431->setInitializer(const_array_271);
gvar_array__str532->setInitializer(const_array_272);
gvar_array__str633->setInitializer(const_array_273);

// Function Definitions

// Function: filter_kernel (func_filter_kernel)
{
 Function::arg_iterator args = func_filter_kernel->arg_begin();
 Value* ptr_in = args++;
 ptr_in->setName("in");
 Value* ptr_out = args++;
 ptr_out->setName("out");
 Value* ptr_kernel = args++;
 ptr_kernel->setName("kernel");
 Value* int32_kn = args++;
 int32_kn->setName("kn");
 Value* int32_m = args++;
 int32_m->setName("m");
 Value* int32_n = args++;
 int32_n->setName("n");
 Value* int32_size_x = args++;
 int32_size_x->setName("size_x");
 Value* int32_size_y = args++;
 int32_size_y->setName("size_y");
 
 BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_filter_kernel,0);
 BasicBlock* label_for_inc_preheader_preheader = BasicBlock::Create(mod->getContext(), "for.inc.preheader.preheader",func_filter_kernel,0);
 BasicBlock* label_for_inc_preheader = BasicBlock::Create(mod->getContext(), "for.inc.preheader",func_filter_kernel,0);
 BasicBlock* label_for_inc = BasicBlock::Create(mod->getContext(), "for.inc",func_filter_kernel,0);
 BasicBlock* label_for_inc16 = BasicBlock::Create(mod->getContext(), "for.inc16",func_filter_kernel,0);
 BasicBlock* label_for_end18_loopexit = BasicBlock::Create(mod->getContext(), "for.end18.loopexit",func_filter_kernel,0);
 BasicBlock* label_for_end18 = BasicBlock::Create(mod->getContext(), "for.end18",func_filter_kernel,0);
 
 // Block entry (label_entry)
 std::vector<Value*> void_345_params;
 void_345_params.push_back(other_346);
 void_345_params.push_back(const_int64_274);
 void_345_params.push_back(other_347);
 void_345_params.push_back(other_348);
 CallInst* void_345 = CallInst::Create(func_llvm_dbg_value, void_345_params, "", label_entry);
 void_345->setCallingConv(CallingConv::C);
 void_345->setTailCall(true);
 AttributeSet void_345_PAL;
 void_345->setAttributes(void_345_PAL);
 
 std::vector<Value*> void_349_params;
 void_349_params.push_back(other_350);
 void_349_params.push_back(const_int64_274);
 void_349_params.push_back(other_351);
 void_349_params.push_back(other_348);
 CallInst* void_349 = CallInst::Create(func_llvm_dbg_value, void_349_params, "", label_entry);
 void_349->setCallingConv(CallingConv::C);
 void_349->setTailCall(true);
 AttributeSet void_349_PAL;
 void_349->setAttributes(void_349_PAL);
 
 std::vector<Value*> void_352_params;
 void_352_params.push_back(other_353);
 void_352_params.push_back(const_int64_274);
 void_352_params.push_back(other_354);
 void_352_params.push_back(other_348);
 CallInst* void_352 = CallInst::Create(func_llvm_dbg_value, void_352_params, "", label_entry);
 void_352->setCallingConv(CallingConv::C);
 void_352->setTailCall(true);
 AttributeSet void_352_PAL;
 void_352->setAttributes(void_352_PAL);
 
 std::vector<Value*> void_355_params;
 void_355_params.push_back(other_356);
 void_355_params.push_back(const_int64_274);
 void_355_params.push_back(other_357);
 void_355_params.push_back(other_348);
 CallInst* void_355 = CallInst::Create(func_llvm_dbg_value, void_355_params, "", label_entry);
 void_355->setCallingConv(CallingConv::C);
 void_355->setTailCall(true);
 AttributeSet void_355_PAL;
 void_355->setAttributes(void_355_PAL);
 
 std::vector<Value*> void_358_params;
 void_358_params.push_back(other_359);
 void_358_params.push_back(const_int64_274);
 void_358_params.push_back(other_360);
 void_358_params.push_back(other_348);
 CallInst* void_358 = CallInst::Create(func_llvm_dbg_value, void_358_params, "", label_entry);
 void_358->setCallingConv(CallingConv::C);
 void_358->setTailCall(true);
 AttributeSet void_358_PAL;
 void_358->setAttributes(void_358_PAL);
 
 std::vector<Value*> void_361_params;
 void_361_params.push_back(other_362);
 void_361_params.push_back(const_int64_274);
 void_361_params.push_back(other_363);
 void_361_params.push_back(other_348);
 CallInst* void_361 = CallInst::Create(func_llvm_dbg_value, void_361_params, "", label_entry);
 void_361->setCallingConv(CallingConv::C);
 void_361->setTailCall(true);
 AttributeSet void_361_PAL;
 void_361->setAttributes(void_361_PAL);
 
 std::vector<Value*> void_364_params;
 void_364_params.push_back(other_365);
 void_364_params.push_back(const_int64_274);
 void_364_params.push_back(other_366);
 void_364_params.push_back(other_348);
 CallInst* void_364 = CallInst::Create(func_llvm_dbg_value, void_364_params, "", label_entry);
 void_364->setCallingConv(CallingConv::C);
 void_364->setTailCall(true);
 AttributeSet void_364_PAL;
 void_364->setAttributes(void_364_PAL);
 
 std::vector<Value*> void_367_params;
 void_367_params.push_back(other_368);
 void_367_params.push_back(const_int64_274);
 void_367_params.push_back(other_369);
 void_367_params.push_back(other_348);
 CallInst* void_367 = CallInst::Create(func_llvm_dbg_value, void_367_params, "", label_entry);
 void_367->setCallingConv(CallingConv::C);
 void_367->setTailCall(true);
 AttributeSet void_367_PAL;
 void_367->setAttributes(void_367_PAL);
 
 BinaryOperator* int32_div = BinaryOperator::Create(Instruction::SDiv, int32_kn, const_int32_275, "div", label_entry);
 std::vector<Value*> void_370_params;
 void_370_params.push_back(other_371);
 void_370_params.push_back(const_int64_274);
 void_370_params.push_back(other_372);
 void_370_params.push_back(other_348);
 CallInst* void_370 = CallInst::Create(func_llvm_dbg_value, void_370_params, "", label_entry);
 void_370->setCallingConv(CallingConv::C);
 void_370->setTailCall(true);
 AttributeSet void_370_PAL;
 void_370->setAttributes(void_370_PAL);
 
 std::vector<Value*> void_373_params;
 void_373_params.push_back(other_374);
 void_373_params.push_back(const_int64_274);
 void_373_params.push_back(other_375);
 void_373_params.push_back(other_348);
 CallInst* void_373 = CallInst::Create(func_llvm_dbg_value, void_373_params, "", label_entry);
 void_373->setCallingConv(CallingConv::C);
 void_373->setTailCall(true);
 AttributeSet void_373_PAL;
 void_373->setAttributes(void_373_PAL);
 
 std::vector<Value*> void_376_params;
 void_376_params.push_back(other_377);
 void_376_params.push_back(const_int64_274);
 void_376_params.push_back(other_378);
 void_376_params.push_back(other_348);
 CallInst* void_376 = CallInst::Create(func_llvm_dbg_value, void_376_params, "", label_entry);
 void_376->setCallingConv(CallingConv::C);
 void_376->setTailCall(true);
 AttributeSet void_376_PAL;
 void_376->setAttributes(void_376_PAL);
 
 BinaryOperator* int32_sub = BinaryOperator::Create(Instruction::Sub, const_int32_248, int32_div, "sub", label_entry);
 std::vector<Value*> void_379_params;
 void_379_params.push_back(other_380);
 void_379_params.push_back(const_int64_274);
 void_379_params.push_back(other_381);
 void_379_params.push_back(other_348);
 CallInst* void_379 = CallInst::Create(func_llvm_dbg_value, void_379_params, "", label_entry);
 void_379->setCallingConv(CallingConv::C);
 void_379->setTailCall(true);
 AttributeSet void_379_PAL;
 void_379->setAttributes(void_379_PAL);
 
 CastInst* int64_382 = new SExtInst(int32_sub, IntegerType::get(mod->getContext(), 64), "", label_entry);
 CastInst* int64_383 = new SExtInst(int32_div, IntegerType::get(mod->getContext(), 64), "", label_entry);
 CastInst* int64_384 = new SExtInst(int32_n, IntegerType::get(mod->getContext(), 64), "", label_entry);
 CastInst* int64_385 = new SExtInst(int32_size_x, IntegerType::get(mod->getContext(), 64), "", label_entry);
 CastInst* int64_386 = new SExtInst(int32_m, IntegerType::get(mod->getContext(), 64), "", label_entry);
 CastInst* int64_387 = new SExtInst(int32_kn, IntegerType::get(mod->getContext(), 64), "", label_entry);
 ICmpInst* int1_cmp14 = new ICmpInst(*label_entry, ICmpInst::ICMP_SLT, int32_div, int32_sub, "cmp14");
 BranchInst::Create(label_for_end18, label_for_inc_preheader_preheader, int1_cmp14, label_entry);
 
 // Block for.inc.preheader.preheader (label_for_inc_preheader_preheader)
 BranchInst::Create(label_for_inc_preheader, label_for_inc_preheader_preheader);
 
 // Block for.inc.preheader (label_for_inc_preheader)
 Argument* fwdref_390 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_017 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.017", label_for_inc_preheader);
 float_pixel_017->addIncoming(fwdref_390, label_for_inc16);
 float_pixel_017->addIncoming(const_float_276, label_for_inc_preheader_preheader);
 
 Argument* fwdref_391 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv315 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv315", label_for_inc_preheader);
 int64_indvars_iv315->addIncoming(fwdref_391, label_for_inc16);
 int64_indvars_iv315->addIncoming(int64_382, label_for_inc_preheader_preheader);
 
 std::vector<Value*> void_392_params;
 void_392_params.push_back(other_380);
 void_392_params.push_back(const_int64_274);
 void_392_params.push_back(other_393);
 void_392_params.push_back(other_348);
 CallInst* void_392 = CallInst::Create(func_llvm_dbg_value, void_392_params, "", label_for_inc_preheader);
 void_392->setCallingConv(CallingConv::C);
 void_392->setTailCall(true);
 AttributeSet void_392_PAL;
 void_392->setAttributes(void_392_PAL);
 
 BinaryOperator* int64_394 = BinaryOperator::Create(Instruction::Sub, int64_384, int64_indvars_iv315, "", label_for_inc_preheader);
 BinaryOperator* int64_395 = BinaryOperator::Create(Instruction::Mul, int64_394, int64_385, "", label_for_inc_preheader);
 BinaryOperator* int64_396 = BinaryOperator::Create(Instruction::Add, int64_395, int64_386, "", label_for_inc_preheader);
 BinaryOperator* int64_397 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv315, int64_387, "", label_for_inc_preheader);
 BinaryOperator* int64_398 = BinaryOperator::Create(Instruction::Sub, const_int64_277, int64_397, "", label_for_inc_preheader);
 BranchInst::Create(label_for_inc, label_for_inc_preheader);
 
 // Block for.inc (label_for_inc)
 Argument* fwdref_400 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_113 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.113", label_for_inc);
 float_pixel_113->addIncoming(fwdref_400, label_for_inc);
 float_pixel_113->addIncoming(float_pixel_017, label_for_inc_preheader);
 
 Argument* fwdref_401 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv12 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv12", label_for_inc);
 int64_indvars_iv12->addIncoming(fwdref_401, label_for_inc);
 int64_indvars_iv12->addIncoming(int64_382, label_for_inc_preheader);
 
 std::vector<Value*> void_402_params;
 void_402_params.push_back(other_403);
 void_402_params.push_back(const_int64_274);
 void_402_params.push_back(other_375);
 void_402_params.push_back(other_348);
 CallInst* void_402 = CallInst::Create(func_llvm_dbg_value, void_402_params, "", label_for_inc);
 void_402->setCallingConv(CallingConv::C);
 void_402->setTailCall(true);
 AttributeSet void_402_PAL;
 void_402->setAttributes(void_402_PAL);
 
 BinaryOperator* int64_404 = BinaryOperator::Create(Instruction::Sub, int64_396, int64_indvars_iv12, "", label_for_inc);
 GetElementPtrInst* ptr_arrayidx = GetElementPtrInst::Create(ptr_in, int64_404, "arrayidx", label_for_inc);
 LoadInst* int8_405 = new LoadInst(ptr_arrayidx, "", false, label_for_inc);
 int8_405->setAlignment(1);
 CastInst* int32_conv = new ZExtInst(int8_405, IntegerType::get(mod->getContext(), 32), "conv", label_for_inc);
 CastInst* float_conv7 = new SIToFPInst(int32_conv, Type::getFloatTy(mod->getContext()), "conv7", label_for_inc);
 BinaryOperator* int64_406 = BinaryOperator::Create(Instruction::Sub, int64_398, int64_indvars_iv12, "", label_for_inc);
 GetElementPtrInst* ptr_arrayidx13 = GetElementPtrInst::Create(ptr_kernel, int64_406, "arrayidx13", label_for_inc);
 LoadInst* float_407 = new LoadInst(ptr_arrayidx13, "", false, label_for_inc);
 float_407->setAlignment(4);
 BinaryOperator* float_mul14 = BinaryOperator::Create(Instruction::FMul, float_407, float_conv7, "mul14", label_for_inc);
 BinaryOperator* float_add15 = BinaryOperator::Create(Instruction::FAdd, float_pixel_113, float_mul14, "add15", label_for_inc);
 BinaryOperator* int64_indvars_iv_next = BinaryOperator::Create(Instruction::Add, int64_indvars_iv12, const_int64_278, "indvars.iv.next", label_for_inc);
 ICmpInst* int1_cmp3 = new ICmpInst(*label_for_inc, ICmpInst::ICMP_SLT, int64_indvars_iv12, int64_383, "cmp3");
 BranchInst::Create(label_for_inc, label_for_inc16, int1_cmp3, label_for_inc);
 
 // Block for.inc16 (label_for_inc16)
 PHINode* float_add15_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add15.lcssa", label_for_inc16);
 float_add15_lcssa->addIncoming(float_add15, label_for_inc);
 
 BinaryOperator* int64_indvars_iv_next4 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv315, const_int64_278, "indvars.iv.next4", label_for_inc16);
 ICmpInst* int1_cmp = new ICmpInst(*label_for_inc16, ICmpInst::ICMP_SLT, int64_indvars_iv315, int64_383, "cmp");
 BranchInst::Create(label_for_inc_preheader, label_for_end18_loopexit, int1_cmp, label_for_inc16);
 
 // Block for.end18.loopexit (label_for_end18_loopexit)
 PHINode* float_add15_lcssa_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add15.lcssa.lcssa", label_for_end18_loopexit);
 float_add15_lcssa_lcssa->addIncoming(float_add15_lcssa, label_for_inc16);
 
 CastInst* int8_phitmp = new FPToUIInst(float_add15_lcssa_lcssa, IntegerType::get(mod->getContext(), 8), "phitmp", label_for_end18_loopexit);
 BranchInst::Create(label_for_end18, label_for_end18_loopexit);
 
 // Block for.end18 (label_for_end18)
 PHINode* int8_pixel_0_lcssa = PHINode::Create(IntegerType::get(mod->getContext(), 8), 2, "pixel.0.lcssa", label_for_end18);
 int8_pixel_0_lcssa->addIncoming(const_int8_279, label_entry);
 int8_pixel_0_lcssa->addIncoming(int8_phitmp, label_for_end18_loopexit);
 
 BinaryOperator* int32_mul20 = BinaryOperator::Create(Instruction::Mul, int32_size_x, int32_n, "mul20", label_for_end18);
 BinaryOperator* int32_add21 = BinaryOperator::Create(Instruction::Add, int32_mul20, int32_m, "add21", label_for_end18);
 CastInst* int64_idxprom22 = new SExtInst(int32_add21, IntegerType::get(mod->getContext(), 64), "idxprom22", label_for_end18);
 GetElementPtrInst* ptr_arrayidx23 = GetElementPtrInst::Create(ptr_out, int64_idxprom22, "arrayidx23", label_for_end18);
 StoreInst* void_411 = new StoreInst(int8_pixel_0_lcssa, ptr_arrayidx23, false, label_for_end18);
 void_411->setAlignment(1);
 ReturnInst::Create(mod->getContext(), label_for_end18);
 
 // Resolve Forward References
 fwdref_400->replaceAllUsesWith(float_add15); delete fwdref_400;
 fwdref_401->replaceAllUsesWith(int64_indvars_iv_next); delete fwdref_401;
 fwdref_390->replaceAllUsesWith(float_add15_lcssa); delete fwdref_390;
 fwdref_391->replaceAllUsesWith(int64_indvars_iv_next4); delete fwdref_391;
 
}

// Function: filter_kernel_2d (func_filter_kernel_2d)
{
 Function::arg_iterator args = func_filter_kernel_2d->arg_begin();
 Value* ptr_in_413 = args++;
 ptr_in_413->setName("in");
 Value* ptr_out_414 = args++;
 ptr_out_414->setName("out");
 Value* ptr_kernel_415 = args++;
 ptr_kernel_415->setName("kernel");
 Value* int32_kn_416 = args++;
 int32_kn_416->setName("kn");
 Value* int32_x = args++;
 int32_x->setName("x");
 Value* int32_y = args++;
 int32_y->setName("y");
 
 BasicBlock* label_entry_417 = BasicBlock::Create(mod->getContext(), "entry",func_filter_kernel_2d,0);
 BasicBlock* label_for_body_preheader = BasicBlock::Create(mod->getContext(), "for.body.preheader",func_filter_kernel_2d,0);
 BasicBlock* label_for_inc_preheader_418 = BasicBlock::Create(mod->getContext(), "for.inc.preheader",func_filter_kernel_2d,0);
 BasicBlock* label_for_inc_419 = BasicBlock::Create(mod->getContext(), "for.inc",func_filter_kernel_2d,0);
 BasicBlock* label_for_inc13 = BasicBlock::Create(mod->getContext(), "for.inc13",func_filter_kernel_2d,0);
 BasicBlock* label_for_end15_loopexit = BasicBlock::Create(mod->getContext(), "for.end15.loopexit",func_filter_kernel_2d,0);
 BasicBlock* label_for_end15 = BasicBlock::Create(mod->getContext(), "for.end15",func_filter_kernel_2d,0);
 
 // Block entry (label_entry_417)
 std::vector<Value*> void_420_params;
 void_420_params.push_back(other_421);
 void_420_params.push_back(const_int64_274);
 void_420_params.push_back(other_422);
 void_420_params.push_back(other_348);
 CallInst* void_420 = CallInst::Create(func_llvm_dbg_value, void_420_params, "", label_entry_417);
 void_420->setCallingConv(CallingConv::C);
 void_420->setTailCall(true);
 AttributeSet void_420_PAL;
 void_420->setAttributes(void_420_PAL);
 
 std::vector<Value*> void_423_params;
 void_423_params.push_back(other_424);
 void_423_params.push_back(const_int64_274);
 void_423_params.push_back(other_425);
 void_423_params.push_back(other_348);
 CallInst* void_423 = CallInst::Create(func_llvm_dbg_value, void_423_params, "", label_entry_417);
 void_423->setCallingConv(CallingConv::C);
 void_423->setTailCall(true);
 AttributeSet void_423_PAL;
 void_423->setAttributes(void_423_PAL);
 
 std::vector<Value*> void_426_params;
 void_426_params.push_back(other_427);
 void_426_params.push_back(const_int64_274);
 void_426_params.push_back(other_428);
 void_426_params.push_back(other_348);
 CallInst* void_426 = CallInst::Create(func_llvm_dbg_value, void_426_params, "", label_entry_417);
 void_426->setCallingConv(CallingConv::C);
 void_426->setTailCall(true);
 AttributeSet void_426_PAL;
 void_426->setAttributes(void_426_PAL);
 
 std::vector<Value*> void_429_params;
 void_429_params.push_back(other_430);
 void_429_params.push_back(const_int64_274);
 void_429_params.push_back(other_431);
 void_429_params.push_back(other_348);
 CallInst* void_429 = CallInst::Create(func_llvm_dbg_value, void_429_params, "", label_entry_417);
 void_429->setCallingConv(CallingConv::C);
 void_429->setTailCall(true);
 AttributeSet void_429_PAL;
 void_429->setAttributes(void_429_PAL);
 
 std::vector<Value*> void_432_params;
 void_432_params.push_back(other_433);
 void_432_params.push_back(const_int64_274);
 void_432_params.push_back(other_434);
 void_432_params.push_back(other_348);
 CallInst* void_432 = CallInst::Create(func_llvm_dbg_value, void_432_params, "", label_entry_417);
 void_432->setCallingConv(CallingConv::C);
 void_432->setTailCall(true);
 AttributeSet void_432_PAL;
 void_432->setAttributes(void_432_PAL);
 
 std::vector<Value*> void_435_params;
 void_435_params.push_back(other_436);
 void_435_params.push_back(const_int64_274);
 void_435_params.push_back(other_437);
 void_435_params.push_back(other_348);
 CallInst* void_435 = CallInst::Create(func_llvm_dbg_value, void_435_params, "", label_entry_417);
 void_435->setCallingConv(CallingConv::C);
 void_435->setTailCall(true);
 AttributeSet void_435_PAL;
 void_435->setAttributes(void_435_PAL);
 
 BinaryOperator* int32_div_438 = BinaryOperator::Create(Instruction::SDiv, int32_kn_416, const_int32_275, "div", label_entry_417);
 std::vector<Value*> void_439_params;
 void_439_params.push_back(other_440);
 void_439_params.push_back(const_int64_274);
 void_439_params.push_back(other_441);
 void_439_params.push_back(other_348);
 CallInst* void_439 = CallInst::Create(func_llvm_dbg_value, void_439_params, "", label_entry_417);
 void_439->setCallingConv(CallingConv::C);
 void_439->setTailCall(true);
 AttributeSet void_439_PAL;
 void_439->setAttributes(void_439_PAL);
 
 std::vector<Value*> void_442_params;
 void_442_params.push_back(other_374);
 void_442_params.push_back(const_int64_274);
 void_442_params.push_back(other_443);
 void_442_params.push_back(other_348);
 CallInst* void_442 = CallInst::Create(func_llvm_dbg_value, void_442_params, "", label_entry_417);
 void_442->setCallingConv(CallingConv::C);
 void_442->setTailCall(true);
 AttributeSet void_442_PAL;
 void_442->setAttributes(void_442_PAL);
 
 std::vector<Value*> void_444_params;
 void_444_params.push_back(other_377);
 void_444_params.push_back(const_int64_274);
 void_444_params.push_back(other_445);
 void_444_params.push_back(other_348);
 CallInst* void_444 = CallInst::Create(func_llvm_dbg_value, void_444_params, "", label_entry_417);
 void_444->setCallingConv(CallingConv::C);
 void_444->setTailCall(true);
 AttributeSet void_444_PAL;
 void_444->setAttributes(void_444_PAL);
 
 BinaryOperator* int32_sub_446 = BinaryOperator::Create(Instruction::Sub, const_int32_248, int32_div_438, "sub", label_entry_417);
 std::vector<Value*> void_447_params;
 void_447_params.push_back(other_448);
 void_447_params.push_back(const_int64_274);
 void_447_params.push_back(other_449);
 void_447_params.push_back(other_348);
 CallInst* void_447 = CallInst::Create(func_llvm_dbg_value, void_447_params, "", label_entry_417);
 void_447->setCallingConv(CallingConv::C);
 void_447->setTailCall(true);
 AttributeSet void_447_PAL;
 void_447->setAttributes(void_447_PAL);
 
 CastInst* int64_450 = new SExtInst(int32_sub_446, IntegerType::get(mod->getContext(), 64), "", label_entry_417);
 CastInst* int64_451 = new SExtInst(int32_div_438, IntegerType::get(mod->getContext(), 64), "", label_entry_417);
 CastInst* int64_452 = new SExtInst(int32_x, IntegerType::get(mod->getContext(), 64), "", label_entry_417);
 CastInst* int64_453 = new SExtInst(int32_y, IntegerType::get(mod->getContext(), 64), "", label_entry_417);
 ICmpInst* int1_cmp12 = new ICmpInst(*label_entry_417, ICmpInst::ICMP_SLT, int32_div_438, int32_sub_446, "cmp12");
 BranchInst::Create(label_for_end15, label_for_body_preheader, int1_cmp12, label_entry_417);
 
 // Block for.body.preheader (label_for_body_preheader)
 BinaryOperator* int64_455 = BinaryOperator::Create(Instruction::Add, int64_451, const_int64_278, "", label_for_body_preheader);
 BinaryOperator* int64_456 = BinaryOperator::Create(Instruction::Sub, int64_455, int64_450, "", label_for_body_preheader);
 BranchInst::Create(label_for_inc_preheader_418, label_for_body_preheader);
 
 // Block for.inc.preheader (label_for_inc_preheader_418)
 Argument* fwdref_458 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_c_016 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "c.016", label_for_inc_preheader_418);
 int64_c_016->addIncoming(fwdref_458, label_for_inc13);
 int64_c_016->addIncoming(const_int64_274, label_for_body_preheader);
 
 Argument* fwdref_459 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_015 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.015", label_for_inc_preheader_418);
 float_pixel_015->addIncoming(fwdref_459, label_for_inc13);
 float_pixel_015->addIncoming(const_float_276, label_for_body_preheader);
 
 Argument* fwdref_460 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv413 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv413", label_for_inc_preheader_418);
 int64_indvars_iv413->addIncoming(fwdref_460, label_for_inc13);
 int64_indvars_iv413->addIncoming(int64_450, label_for_body_preheader);
 
 std::vector<Value*> void_461_params;
 void_461_params.push_back(other_448);
 void_461_params.push_back(const_int64_274);
 void_461_params.push_back(other_462);
 void_461_params.push_back(other_348);
 CallInst* void_461 = CallInst::Create(func_llvm_dbg_value, void_461_params, "", label_for_inc_preheader_418);
 void_461->setCallingConv(CallingConv::C);
 void_461->setTailCall(true);
 AttributeSet void_461_PAL;
 void_461->setAttributes(void_461_PAL);
 
 BinaryOperator* int64_sext = BinaryOperator::Create(Instruction::Shl, int64_c_016, const_int64_280, "sext", label_for_inc_preheader_418);
 BinaryOperator* int64_463 = BinaryOperator::Create(Instruction::AShr, int64_sext, const_int64_280, "", label_for_inc_preheader_418);
 BinaryOperator* int64_464 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv413, int64_453, "", label_for_inc_preheader_418);
 GetElementPtrInst* ptr_arrayidx_465 = GetElementPtrInst::Create(ptr_in_413, int64_464, "arrayidx", label_for_inc_preheader_418);
 LoadInst* ptr_466 = new LoadInst(ptr_arrayidx_465, "", false, label_for_inc_preheader_418);
 ptr_466->setAlignment(8);
 BinaryOperator* int64_sext1 = BinaryOperator::Create(Instruction::Shl, int64_c_016, const_int64_280, "sext1", label_for_inc_preheader_418);
 BinaryOperator* int64_467 = BinaryOperator::Create(Instruction::AShr, int64_sext1, const_int64_280, "", label_for_inc_preheader_418);
 BranchInst::Create(label_for_inc_419, label_for_inc_preheader_418);
 
 // Block for.inc (label_for_inc_419)
 Argument* fwdref_469 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_110 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.110", label_for_inc_419);
 float_pixel_110->addIncoming(fwdref_469, label_for_inc_419);
 float_pixel_110->addIncoming(float_pixel_015, label_for_inc_preheader_418);
 
 Argument* fwdref_470 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv9 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv9", label_for_inc_419);
 int64_indvars_iv9->addIncoming(fwdref_470, label_for_inc_419);
 int64_indvars_iv9->addIncoming(int64_463, label_for_inc_preheader_418);
 
 Argument* fwdref_471 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv18 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv18", label_for_inc_419);
 int64_indvars_iv18->addIncoming(fwdref_471, label_for_inc_419);
 int64_indvars_iv18->addIncoming(int64_450, label_for_inc_preheader_418);
 
 std::vector<Value*> void_472_params;
 void_472_params.push_back(other_473);
 void_472_params.push_back(const_int64_274);
 void_472_params.push_back(other_443);
 void_472_params.push_back(other_348);
 CallInst* void_472 = CallInst::Create(func_llvm_dbg_value, void_472_params, "", label_for_inc_419);
 void_472->setCallingConv(CallingConv::C);
 void_472->setTailCall(true);
 AttributeSet void_472_PAL;
 void_472->setAttributes(void_472_PAL);
 
 BinaryOperator* int64_474 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv18, int64_452, "", label_for_inc_419);
 GetElementPtrInst* ptr_arrayidx7 = GetElementPtrInst::Create(ptr_466, int64_474, "arrayidx7", label_for_inc_419);
 LoadInst* int8_475 = new LoadInst(ptr_arrayidx7, "", false, label_for_inc_419);
 int8_475->setAlignment(1);
 CastInst* int32_conv_476 = new ZExtInst(int8_475, IntegerType::get(mod->getContext(), 32), "conv", label_for_inc_419);
 CastInst* float_conv8 = new SIToFPInst(int32_conv_476, Type::getFloatTy(mod->getContext()), "conv8", label_for_inc_419);
 GetElementPtrInst* ptr_arrayidx10 = GetElementPtrInst::Create(ptr_kernel_415, int64_indvars_iv9, "arrayidx10", label_for_inc_419);
 LoadInst* float_477 = new LoadInst(ptr_arrayidx10, "", false, label_for_inc_419);
 float_477->setAlignment(4);
 BinaryOperator* float_mul = BinaryOperator::Create(Instruction::FMul, float_477, float_conv8, "mul", label_for_inc_419);
 BinaryOperator* float_add11 = BinaryOperator::Create(Instruction::FAdd, float_pixel_110, float_mul, "add11", label_for_inc_419);
 BinaryOperator* int64_indvars_iv_next_478 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv9, const_int64_278, "indvars.iv.next", label_for_inc_419);
 BinaryOperator* int64_indvars_iv_next2 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv18, const_int64_278, "indvars.iv.next2", label_for_inc_419);
 ICmpInst* int1_cmp3_479 = new ICmpInst(*label_for_inc_419, ICmpInst::ICMP_SLT, int64_indvars_iv18, int64_451, "cmp3");
 BranchInst::Create(label_for_inc_419, label_for_inc13, int1_cmp3_479, label_for_inc_419);
 
 // Block for.inc13 (label_for_inc13)
 PHINode* float_add11_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add11.lcssa", label_for_inc13);
 float_add11_lcssa->addIncoming(float_add11, label_for_inc_419);
 
 BinaryOperator* int64_481 = BinaryOperator::Create(Instruction::Add, int64_456, int64_467, "", label_for_inc13);
 BinaryOperator* int64_indvars_iv_next5 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv413, const_int64_278, "indvars.iv.next5", label_for_inc13);
 ICmpInst* int1_cmp_482 = new ICmpInst(*label_for_inc13, ICmpInst::ICMP_SLT, int64_indvars_iv413, int64_451, "cmp");
 BranchInst::Create(label_for_inc_preheader_418, label_for_end15_loopexit, int1_cmp_482, label_for_inc13);
 
 // Block for.end15.loopexit (label_for_end15_loopexit)
 PHINode* float_add11_lcssa_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add11.lcssa.lcssa", label_for_end15_loopexit);
 float_add11_lcssa_lcssa->addIncoming(float_add11_lcssa, label_for_inc13);
 
 CastInst* int8_phitmp_484 = new FPToUIInst(float_add11_lcssa_lcssa, IntegerType::get(mod->getContext(), 8), "phitmp", label_for_end15_loopexit);
 BranchInst::Create(label_for_end15, label_for_end15_loopexit);
 
 // Block for.end15 (label_for_end15)
 PHINode* int8_pixel_0_lcssa_486 = PHINode::Create(IntegerType::get(mod->getContext(), 8), 2, "pixel.0.lcssa", label_for_end15);
 int8_pixel_0_lcssa_486->addIncoming(const_int8_279, label_entry_417);
 int8_pixel_0_lcssa_486->addIncoming(int8_phitmp_484, label_for_end15_loopexit);
 
 GetElementPtrInst* ptr_arrayidx19 = GetElementPtrInst::Create(ptr_out_414, int64_453, "arrayidx19", label_for_end15);
 LoadInst* ptr_487 = new LoadInst(ptr_arrayidx19, "", false, label_for_end15);
 ptr_487->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx20 = GetElementPtrInst::Create(ptr_487, int64_452, "arrayidx20", label_for_end15);
 StoreInst* void_488 = new StoreInst(int8_pixel_0_lcssa_486, ptr_arrayidx20, false, label_for_end15);
 void_488->setAlignment(1);
 ReturnInst::Create(mod->getContext(), label_for_end15);
 
 // Resolve Forward References
 fwdref_469->replaceAllUsesWith(float_add11); delete fwdref_469;
 fwdref_470->replaceAllUsesWith(int64_indvars_iv_next_478); delete fwdref_470;
 fwdref_471->replaceAllUsesWith(int64_indvars_iv_next2); delete fwdref_471;
 fwdref_459->replaceAllUsesWith(float_add11_lcssa); delete fwdref_459;
 fwdref_458->replaceAllUsesWith(int64_481); delete fwdref_458;
 fwdref_460->replaceAllUsesWith(int64_indvars_iv_next5); delete fwdref_460;
 
}

// Function: convolve_arr_linear (func_convolve_arr_linear)
{
 Function::arg_iterator args = func_convolve_arr_linear->arg_begin();
 Value* ptr_in_490 = args++;
 ptr_in_490->setName("in");
 Value* ptr_out_491 = args++;
 ptr_out_491->setName("out");
 Value* ptr_kernel_492 = args++;
 ptr_kernel_492->setName("kernel");
 Value* int32_kn_493 = args++;
 int32_kn_493->setName("kn");
 Value* int32_dim_x = args++;
 int32_dim_x->setName("dim_x");
 Value* int32_dim_y = args++;
 int32_dim_y->setName("dim_y");
 
 BasicBlock* label_entry_494 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_arr_linear,0);
 BasicBlock* label_bypassdesc = BasicBlock::Create(mod->getContext(), "bypassdesc",func_convolve_arr_linear,0);
 BasicBlock* label_for_cond1_preheader_preheader = BasicBlock::Create(mod->getContext(), "for.cond1.preheader.preheader",func_convolve_arr_linear,0);
 BasicBlock* label_for_cond1_preheader = BasicBlock::Create(mod->getContext(), "for.cond1.preheader",func_convolve_arr_linear,0);
 BasicBlock* label_for_body4_preheader = BasicBlock::Create(mod->getContext(), "for.body4.preheader",func_convolve_arr_linear,0);
 BasicBlock* label_for_body4 = BasicBlock::Create(mod->getContext(), "for.body4",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc_i_preheader_preheader = BasicBlock::Create(mod->getContext(), "for.inc.i.preheader.preheader",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc_i_preheader = BasicBlock::Create(mod->getContext(), "for.inc.i.preheader",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc_i = BasicBlock::Create(mod->getContext(), "for.inc.i",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc16_i = BasicBlock::Create(mod->getContext(), "for.inc16.i",func_convolve_arr_linear,0);
 BasicBlock* label_filter_kernel_exit_loopexit = BasicBlock::Create(mod->getContext(), "filter_kernel.exit.loopexit",func_convolve_arr_linear,0);
 BasicBlock* label_filter_kernel_exit = BasicBlock::Create(mod->getContext(), "filter_kernel.exit",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc5_loopexit = BasicBlock::Create(mod->getContext(), "for.inc5.loopexit",func_convolve_arr_linear,0);
 BasicBlock* label_for_inc5 = BasicBlock::Create(mod->getContext(), "for.inc5",func_convolve_arr_linear,0);
 BasicBlock* label_for_end7_loopexit = BasicBlock::Create(mod->getContext(), "for.end7.loopexit",func_convolve_arr_linear,0);
 BasicBlock* label_for_end7 = BasicBlock::Create(mod->getContext(), "for.end7",func_convolve_arr_linear,0);
 BasicBlock* label_acc = BasicBlock::Create(mod->getContext(), "acc",func_convolve_arr_linear,0);
 
 // Block entry (label_entry_494)
 std::vector<Value*> void_495_params;
 void_495_params.push_back(other_496);
 void_495_params.push_back(const_int64_274);
 void_495_params.push_back(other_497);
 void_495_params.push_back(other_348);
 CallInst* void_495 = CallInst::Create(func_llvm_dbg_value, void_495_params, "", label_entry_494);
 void_495->setCallingConv(CallingConv::C);
 void_495->setTailCall(true);
 AttributeSet void_495_PAL;
 void_495->setAttributes(void_495_PAL);
 
 std::vector<Value*> void_498_params;
 void_498_params.push_back(other_499);
 void_498_params.push_back(const_int64_274);
 void_498_params.push_back(other_500);
 void_498_params.push_back(other_348);
 CallInst* void_498 = CallInst::Create(func_llvm_dbg_value, void_498_params, "", label_entry_494);
 void_498->setCallingConv(CallingConv::C);
 void_498->setTailCall(true);
 AttributeSet void_498_PAL;
 void_498->setAttributes(void_498_PAL);
 
 std::vector<Value*> void_501_params;
 void_501_params.push_back(other_502);
 void_501_params.push_back(const_int64_274);
 void_501_params.push_back(other_503);
 void_501_params.push_back(other_348);
 CallInst* void_501 = CallInst::Create(func_llvm_dbg_value, void_501_params, "", label_entry_494);
 void_501->setCallingConv(CallingConv::C);
 void_501->setTailCall(true);
 AttributeSet void_501_PAL;
 void_501->setAttributes(void_501_PAL);
 
 std::vector<Value*> void_504_params;
 void_504_params.push_back(other_505);
 void_504_params.push_back(const_int64_274);
 void_504_params.push_back(other_506);
 void_504_params.push_back(other_348);
 CallInst* void_504 = CallInst::Create(func_llvm_dbg_value, void_504_params, "", label_entry_494);
 void_504->setCallingConv(CallingConv::C);
 void_504->setTailCall(true);
 AttributeSet void_504_PAL;
 void_504->setAttributes(void_504_PAL);
 
 std::vector<Value*> void_507_params;
 void_507_params.push_back(other_508);
 void_507_params.push_back(const_int64_274);
 void_507_params.push_back(other_509);
 void_507_params.push_back(other_348);
 CallInst* void_507 = CallInst::Create(func_llvm_dbg_value, void_507_params, "", label_entry_494);
 void_507->setCallingConv(CallingConv::C);
 void_507->setTailCall(true);
 AttributeSet void_507_PAL;
 void_507->setAttributes(void_507_PAL);
 
 std::vector<Value*> void_510_params;
 void_510_params.push_back(other_511);
 void_510_params.push_back(const_int64_274);
 void_510_params.push_back(other_512);
 void_510_params.push_back(other_348);
 CallInst* void_510 = CallInst::Create(func_llvm_dbg_value, void_510_params, "", label_entry_494);
 void_510->setCallingConv(CallingConv::C);
 void_510->setTailCall(true);
 AttributeSet void_510_PAL;
 void_510->setAttributes(void_510_PAL);
 
 BinaryOperator* int32_div_513 = BinaryOperator::Create(Instruction::SDiv, int32_kn_493, const_int32_275, "div", label_entry_494);
 std::vector<Value*> void_514_params;
 void_514_params.push_back(other_515);
 void_514_params.push_back(const_int64_274);
 void_514_params.push_back(other_516);
 void_514_params.push_back(other_348);
 CallInst* void_514 = CallInst::Create(func_llvm_dbg_value, void_514_params, "", label_entry_494);
 void_514->setCallingConv(CallingConv::C);
 void_514->setTailCall(true);
 AttributeSet void_514_PAL;
 void_514->setAttributes(void_514_PAL);
 
 std::vector<Value*> void_517_params;
 void_517_params.push_back(other_515);
 void_517_params.push_back(const_int64_274);
 void_517_params.push_back(other_518);
 void_517_params.push_back(other_348);
 CallInst* void_517 = CallInst::Create(func_llvm_dbg_value, void_517_params, "", label_entry_494);
 void_517->setCallingConv(CallingConv::C);
 void_517->setTailCall(true);
 AttributeSet void_517_PAL;
 void_517->setAttributes(void_517_PAL);
 
 CastInst* int64_519 = new SExtInst(int32_div_513, IntegerType::get(mod->getContext(), 64), "", label_entry_494);
 CastInst* int64_520 = new SExtInst(int32_dim_x, IntegerType::get(mod->getContext(), 64), "", label_entry_494);
 BinaryOperator* int32_sub_521 = BinaryOperator::Create(Instruction::Sub, int32_dim_x, int32_div_513, "sub", label_entry_494);
 ICmpInst* int1_cmp8 = new ICmpInst(*label_entry_494, ICmpInst::ICMP_SLT, int32_div_513, int32_sub_521, "cmp8");
 BranchInst::Create(label_bypassdesc, label_for_end7, int1_cmp8, label_entry_494);
 
 // Block bypassdesc (label_bypassdesc)
 std::vector<Value*> int1_bypass_params;
 int1_bypass_params.push_back(int32_kn_493);
 int1_bypass_params.push_back(int32_dim_y);
 int1_bypass_params.push_back(int32_dim_x);
 CallInst* int1_bypass = CallInst::Create(func_convolve_hw_use_accelerator, int1_bypass_params, "bypass", label_bypassdesc);
 int1_bypass->setCallingConv(CallingConv::C);
 int1_bypass->setTailCall(true);
 AttributeSet int1_bypass_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int1_bypass_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int1_bypass->setAttributes(int1_bypass_PAL);
 
 BranchInst::Create(label_acc, label_for_cond1_preheader_preheader, int1_bypass, label_bypassdesc);
 
 // Block for.cond1.preheader.preheader (label_for_cond1_preheader_preheader)
 BinaryOperator* int32_sub2 = BinaryOperator::Create(Instruction::Sub, int32_dim_y, int32_div_513, "sub2", label_for_cond1_preheader_preheader);
 ICmpInst* int1_cmp36 = new ICmpInst(*label_for_cond1_preheader_preheader, ICmpInst::ICMP_SLT, int32_div_513, int32_sub2, "cmp36");
 BinaryOperator* int32_sub_i = BinaryOperator::Create(Instruction::Sub, const_int32_248, int32_div_513, "sub.i", label_for_cond1_preheader_preheader);
 CastInst* int64_524 = new SExtInst(int32_sub_i, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader);
 CastInst* int64_525 = new SExtInst(int32_kn_493, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader);
 ICmpInst* int1_cmp14_i = new ICmpInst(*label_for_cond1_preheader_preheader, ICmpInst::ICMP_SLT, int32_div_513, int32_sub_i, "cmp14.i");
 CastInst* int64_526 = new SExtInst(int32_sub2, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader);
 BinaryOperator* int64_527 = BinaryOperator::Create(Instruction::Add, int64_526, const_int64_281, "", label_for_cond1_preheader_preheader);
 CastInst* int64_528 = new SExtInst(int32_sub_521, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader);
 BinaryOperator* int64_529 = BinaryOperator::Create(Instruction::Add, int64_528, const_int64_281, "", label_for_cond1_preheader_preheader);
 BranchInst::Create(label_for_cond1_preheader, label_for_cond1_preheader_preheader);
 
 // Block for.cond1.preheader (label_for_cond1_preheader)
 Argument* fwdref_531 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv49 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv49", label_for_cond1_preheader);
 int64_indvars_iv49->addIncoming(fwdref_531, label_for_inc5);
 int64_indvars_iv49->addIncoming(int64_519, label_for_cond1_preheader_preheader);
 
 BranchInst::Create(label_for_body4_preheader, label_for_inc5, int1_cmp36, label_for_cond1_preheader);
 
 // Block for.body4.preheader (label_for_body4_preheader)
 BranchInst::Create(label_for_body4, label_for_body4_preheader);
 
 // Block for.body4 (label_for_body4)
 Argument* fwdref_534 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv7 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv7", label_for_body4);
 int64_indvars_iv7->addIncoming(fwdref_534, label_filter_kernel_exit);
 int64_indvars_iv7->addIncoming(int64_519, label_for_body4_preheader);
 
 std::vector<Value*> void_535_params;
 void_535_params.push_back(other_496);
 void_535_params.push_back(const_int64_274);
 void_535_params.push_back(other_536);
 void_535_params.push_back(other_348);
 CallInst* void_535 = CallInst::Create(func_llvm_dbg_value, void_535_params, "", label_for_body4);
 void_535->setCallingConv(CallingConv::C);
 void_535->setTailCall(true);
 AttributeSet void_535_PAL;
 void_535->setAttributes(void_535_PAL);
 
 std::vector<Value*> void_537_params;
 void_537_params.push_back(other_499);
 void_537_params.push_back(const_int64_274);
 void_537_params.push_back(other_538);
 void_537_params.push_back(other_348);
 CallInst* void_537 = CallInst::Create(func_llvm_dbg_value, void_537_params, "", label_for_body4);
 void_537->setCallingConv(CallingConv::C);
 void_537->setTailCall(true);
 AttributeSet void_537_PAL;
 void_537->setAttributes(void_537_PAL);
 
 std::vector<Value*> void_539_params;
 void_539_params.push_back(other_502);
 void_539_params.push_back(const_int64_274);
 void_539_params.push_back(other_540);
 void_539_params.push_back(other_348);
 CallInst* void_539 = CallInst::Create(func_llvm_dbg_value, void_539_params, "", label_for_body4);
 void_539->setCallingConv(CallingConv::C);
 void_539->setTailCall(true);
 AttributeSet void_539_PAL;
 void_539->setAttributes(void_539_PAL);
 
 std::vector<Value*> void_541_params;
 void_541_params.push_back(other_505);
 void_541_params.push_back(const_int64_274);
 void_541_params.push_back(other_542);
 void_541_params.push_back(other_348);
 CallInst* void_541 = CallInst::Create(func_llvm_dbg_value, void_541_params, "", label_for_body4);
 void_541->setCallingConv(CallingConv::C);
 void_541->setTailCall(true);
 AttributeSet void_541_PAL;
 void_541->setAttributes(void_541_PAL);
 
 std::vector<Value*> void_543_params;
 void_543_params.push_back(other_544);
 void_543_params.push_back(const_int64_274);
 void_543_params.push_back(other_545);
 void_543_params.push_back(other_348);
 CallInst* void_543 = CallInst::Create(func_llvm_dbg_value, void_543_params, "", label_for_body4);
 void_543->setCallingConv(CallingConv::C);
 void_543->setTailCall(true);
 AttributeSet void_543_PAL;
 void_543->setAttributes(void_543_PAL);
 
 std::vector<Value*> void_546_params;
 void_546_params.push_back(other_544);
 void_546_params.push_back(const_int64_274);
 void_546_params.push_back(other_547);
 void_546_params.push_back(other_348);
 CallInst* void_546 = CallInst::Create(func_llvm_dbg_value, void_546_params, "", label_for_body4);
 void_546->setCallingConv(CallingConv::C);
 void_546->setTailCall(true);
 AttributeSet void_546_PAL;
 void_546->setAttributes(void_546_PAL);
 
 std::vector<Value*> void_548_params;
 void_548_params.push_back(other_508);
 void_548_params.push_back(const_int64_274);
 void_548_params.push_back(other_549);
 void_548_params.push_back(other_348);
 CallInst* void_548 = CallInst::Create(func_llvm_dbg_value, void_548_params, "", label_for_body4);
 void_548->setCallingConv(CallingConv::C);
 void_548->setTailCall(true);
 AttributeSet void_548_PAL;
 void_548->setAttributes(void_548_PAL);
 
 std::vector<Value*> void_550_params;
 void_550_params.push_back(other_511);
 void_550_params.push_back(const_int64_274);
 void_550_params.push_back(other_551);
 void_550_params.push_back(other_348);
 CallInst* void_550 = CallInst::Create(func_llvm_dbg_value, void_550_params, "", label_for_body4);
 void_550->setCallingConv(CallingConv::C);
 void_550->setTailCall(true);
 AttributeSet void_550_PAL;
 void_550->setAttributes(void_550_PAL);
 
 std::vector<Value*> void_552_params;
 void_552_params.push_back(other_515);
 void_552_params.push_back(const_int64_274);
 void_552_params.push_back(other_553);
 void_552_params.push_back(other_348);
 CallInst* void_552 = CallInst::Create(func_llvm_dbg_value, void_552_params, "", label_for_body4);
 void_552->setCallingConv(CallingConv::C);
 void_552->setTailCall(true);
 AttributeSet void_552_PAL;
 void_552->setAttributes(void_552_PAL);
 
 std::vector<Value*> void_554_params;
 void_554_params.push_back(other_374);
 void_554_params.push_back(const_int64_274);
 void_554_params.push_back(other_555);
 void_554_params.push_back(other_348);
 CallInst* void_554 = CallInst::Create(func_llvm_dbg_value, void_554_params, "", label_for_body4);
 void_554->setCallingConv(CallingConv::C);
 void_554->setTailCall(true);
 AttributeSet void_554_PAL;
 void_554->setAttributes(void_554_PAL);
 
 std::vector<Value*> void_556_params;
 void_556_params.push_back(other_377);
 void_556_params.push_back(const_int64_274);
 void_556_params.push_back(other_557);
 void_556_params.push_back(other_348);
 CallInst* void_556 = CallInst::Create(func_llvm_dbg_value, void_556_params, "", label_for_body4);
 void_556->setCallingConv(CallingConv::C);
 void_556->setTailCall(true);
 AttributeSet void_556_PAL;
 void_556->setAttributes(void_556_PAL);
 
 std::vector<Value*> void_558_params;
 void_558_params.push_back(other_559);
 void_558_params.push_back(const_int64_274);
 void_558_params.push_back(other_560);
 void_558_params.push_back(other_348);
 CallInst* void_558 = CallInst::Create(func_llvm_dbg_value, void_558_params, "", label_for_body4);
 void_558->setCallingConv(CallingConv::C);
 void_558->setTailCall(true);
 AttributeSet void_558_PAL;
 void_558->setAttributes(void_558_PAL);
 
 BranchInst::Create(label_filter_kernel_exit, label_for_inc_i_preheader_preheader, int1_cmp14_i, label_for_body4);
 
 // Block for.inc.i.preheader.preheader (label_for_inc_i_preheader_preheader)
 BranchInst::Create(label_for_inc_i_preheader, label_for_inc_i_preheader_preheader);
 
 // Block for.inc.i.preheader (label_for_inc_i_preheader)
 Argument* fwdref_563 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_017_i = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.017.i", label_for_inc_i_preheader);
 float_pixel_017_i->addIncoming(fwdref_563, label_for_inc16_i);
 float_pixel_017_i->addIncoming(const_float_276, label_for_inc_i_preheader_preheader);
 
 Argument* fwdref_564 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv315_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv315.i", label_for_inc_i_preheader);
 int64_indvars_iv315_i->addIncoming(fwdref_564, label_for_inc16_i);
 int64_indvars_iv315_i->addIncoming(int64_524, label_for_inc_i_preheader_preheader);
 
 std::vector<Value*> void_565_params;
 void_565_params.push_back(other_559);
 void_565_params.push_back(const_int64_274);
 void_565_params.push_back(other_566);
 void_565_params.push_back(other_348);
 CallInst* void_565 = CallInst::Create(func_llvm_dbg_value, void_565_params, "", label_for_inc_i_preheader);
 void_565->setCallingConv(CallingConv::C);
 void_565->setTailCall(true);
 AttributeSet void_565_PAL;
 void_565->setAttributes(void_565_PAL);
 
 BinaryOperator* int64_567 = BinaryOperator::Create(Instruction::Sub, int64_indvars_iv7, int64_indvars_iv315_i, "", label_for_inc_i_preheader);
 BinaryOperator* int64_568 = BinaryOperator::Create(Instruction::Mul, int64_567, int64_520, "", label_for_inc_i_preheader);
 BinaryOperator* int64_569 = BinaryOperator::Create(Instruction::Add, int64_568, int64_indvars_iv49, "", label_for_inc_i_preheader);
 BinaryOperator* int64_570 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv315_i, int64_525, "", label_for_inc_i_preheader);
 BinaryOperator* int64_571 = BinaryOperator::Create(Instruction::Sub, const_int64_277, int64_570, "", label_for_inc_i_preheader);
 BranchInst::Create(label_for_inc_i, label_for_inc_i_preheader);
 
 // Block for.inc.i (label_for_inc_i)
 Argument* fwdref_573 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_113_i = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.113.i", label_for_inc_i);
 float_pixel_113_i->addIncoming(fwdref_573, label_for_inc_i);
 float_pixel_113_i->addIncoming(float_pixel_017_i, label_for_inc_i_preheader);
 
 Argument* fwdref_574 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv12_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv12.i", label_for_inc_i);
 int64_indvars_iv12_i->addIncoming(fwdref_574, label_for_inc_i);
 int64_indvars_iv12_i->addIncoming(int64_524, label_for_inc_i_preheader);
 
 BinaryOperator* int64_575 = BinaryOperator::Create(Instruction::Sub, int64_569, int64_indvars_iv12_i, "", label_for_inc_i);
 GetElementPtrInst* ptr_arrayidx_i = GetElementPtrInst::Create(ptr_in_490, int64_575, "arrayidx.i", label_for_inc_i);
 LoadInst* int8_576 = new LoadInst(ptr_arrayidx_i, "", false, label_for_inc_i);
 int8_576->setAlignment(1);
 CastInst* int32_conv_i = new ZExtInst(int8_576, IntegerType::get(mod->getContext(), 32), "conv.i", label_for_inc_i);
 CastInst* float_conv7_i = new SIToFPInst(int32_conv_i, Type::getFloatTy(mod->getContext()), "conv7.i", label_for_inc_i);
 BinaryOperator* int64_577 = BinaryOperator::Create(Instruction::Sub, int64_571, int64_indvars_iv12_i, "", label_for_inc_i);
 GetElementPtrInst* ptr_arrayidx13_i = GetElementPtrInst::Create(ptr_kernel_492, int64_577, "arrayidx13.i", label_for_inc_i);
 LoadInst* float_578 = new LoadInst(ptr_arrayidx13_i, "", false, label_for_inc_i);
 float_578->setAlignment(4);
 BinaryOperator* float_mul14_i = BinaryOperator::Create(Instruction::FMul, float_578, float_conv7_i, "mul14.i", label_for_inc_i);
 BinaryOperator* float_add15_i = BinaryOperator::Create(Instruction::FAdd, float_pixel_113_i, float_mul14_i, "add15.i", label_for_inc_i);
 BinaryOperator* int64_indvars_iv_next_i = BinaryOperator::Create(Instruction::Add, int64_indvars_iv12_i, const_int64_278, "indvars.iv.next.i", label_for_inc_i);
 ICmpInst* int1_exitcond = new ICmpInst(*label_for_inc_i, ICmpInst::ICMP_EQ, int64_indvars_iv12_i, int64_519, "exitcond");
 BranchInst::Create(label_for_inc16_i, label_for_inc_i, int1_exitcond, label_for_inc_i);
 
 // Block for.inc16.i (label_for_inc16_i)
 PHINode* float_add15_i_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add15.i.lcssa", label_for_inc16_i);
 float_add15_i_lcssa->addIncoming(float_add15_i, label_for_inc_i);
 
 BinaryOperator* int64_indvars_iv_next4_i = BinaryOperator::Create(Instruction::Add, int64_indvars_iv315_i, const_int64_278, "indvars.iv.next4.i", label_for_inc16_i);
 ICmpInst* int1_exitcond1 = new ICmpInst(*label_for_inc16_i, ICmpInst::ICMP_EQ, int64_indvars_iv315_i, int64_519, "exitcond1");
 BranchInst::Create(label_filter_kernel_exit_loopexit, label_for_inc_i_preheader, int1_exitcond1, label_for_inc16_i);
 
 // Block filter_kernel.exit.loopexit (label_filter_kernel_exit_loopexit)
 PHINode* float_add15_i_lcssa_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add15.i.lcssa.lcssa", label_filter_kernel_exit_loopexit);
 float_add15_i_lcssa_lcssa->addIncoming(float_add15_i_lcssa, label_for_inc16_i);
 
 BranchInst::Create(label_filter_kernel_exit, label_filter_kernel_exit_loopexit);
 
 // Block filter_kernel.exit (label_filter_kernel_exit)
 PHINode* float_pixel_0_lcssa_i = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.0.lcssa.i", label_filter_kernel_exit);
 float_pixel_0_lcssa_i->addIncoming(const_float_276, label_for_body4);
 float_pixel_0_lcssa_i->addIncoming(float_add15_i_lcssa_lcssa, label_filter_kernel_exit_loopexit);
 
 CastInst* int8_conv19_i = new FPToUIInst(float_pixel_0_lcssa_i, IntegerType::get(mod->getContext(), 8), "conv19.i", label_filter_kernel_exit);
 BinaryOperator* int64_582 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv7, int64_520, "", label_filter_kernel_exit);
 BinaryOperator* int64_583 = BinaryOperator::Create(Instruction::Add, int64_582, int64_indvars_iv49, "", label_filter_kernel_exit);
 GetElementPtrInst* ptr_arrayidx23_i = GetElementPtrInst::Create(ptr_out_491, int64_583, "arrayidx23.i", label_filter_kernel_exit);
 StoreInst* void_584 = new StoreInst(int8_conv19_i, ptr_arrayidx23_i, false, label_filter_kernel_exit);
 void_584->setAlignment(1);
 BinaryOperator* int64_indvars_iv_next_585 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv7, const_int64_278, "indvars.iv.next", label_filter_kernel_exit);
 ICmpInst* int1_exitcond2 = new ICmpInst(*label_filter_kernel_exit, ICmpInst::ICMP_EQ, int64_indvars_iv7, int64_527, "exitcond2");
 BranchInst::Create(label_for_inc5_loopexit, label_for_body4, int1_exitcond2, label_filter_kernel_exit);
 
 // Block for.inc5.loopexit (label_for_inc5_loopexit)
 BranchInst::Create(label_for_inc5, label_for_inc5_loopexit);
 
 // Block for.inc5 (label_for_inc5)
 BinaryOperator* int64_indvars_iv_next5_588 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv49, const_int64_278, "indvars.iv.next5", label_for_inc5);
 ICmpInst* int1_exitcond3 = new ICmpInst(*label_for_inc5, ICmpInst::ICMP_EQ, int64_indvars_iv49, int64_529, "exitcond3");
 BranchInst::Create(label_for_end7_loopexit, label_for_cond1_preheader, int1_exitcond3, label_for_inc5);
 
 // Block for.end7.loopexit (label_for_end7_loopexit)
 BranchInst::Create(label_for_end7, label_for_end7_loopexit);
 
 // Block for.end7 (label_for_end7)
 ReturnInst::Create(mod->getContext(), label_for_end7);
 
 // Block acc (label_acc)
 std::vector<Value*> void_592_params;
 void_592_params.push_back(ptr_in_490);
 void_592_params.push_back(ptr_out_491);
 void_592_params.push_back(ptr_kernel_492);
 void_592_params.push_back(int32_kn_493);
 void_592_params.push_back(int32_dim_y);
 void_592_params.push_back(int32_dim_x);
 CallInst* void_592 = CallInst::Create(func_convolve_bypass_hw_iface0, void_592_params, "", label_acc);
 void_592->setCallingConv(CallingConv::C);
 void_592->setTailCall(true);
 AttributeSet void_592_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_592_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_592->setAttributes(void_592_PAL);
 
 ReturnInst::Create(mod->getContext(), label_acc);
 
 // Resolve Forward References
 fwdref_573->replaceAllUsesWith(float_add15_i); delete fwdref_573;
 fwdref_574->replaceAllUsesWith(int64_indvars_iv_next_i); delete fwdref_574;
 fwdref_563->replaceAllUsesWith(float_add15_i_lcssa); delete fwdref_563;
 fwdref_564->replaceAllUsesWith(int64_indvars_iv_next4_i); delete fwdref_564;
 fwdref_534->replaceAllUsesWith(int64_indvars_iv_next_585); delete fwdref_534;
 fwdref_531->replaceAllUsesWith(int64_indvars_iv_next5_588); delete fwdref_531;
 
}

// Function: convolve_arr_indirection (func_convolve_arr_indirection)
{
 Function::arg_iterator args = func_convolve_arr_indirection->arg_begin();
 Value* ptr_in_594 = args++;
 ptr_in_594->setName("in");
 Value* ptr_out_595 = args++;
 ptr_out_595->setName("out");
 Value* ptr_kernel_596 = args++;
 ptr_kernel_596->setName("kernel");
 Value* int32_kn_597 = args++;
 int32_kn_597->setName("kn");
 Value* int32_dim_x_598 = args++;
 int32_dim_x_598->setName("dim_x");
 Value* int32_dim_y_599 = args++;
 int32_dim_y_599->setName("dim_y");
 
 BasicBlock* label_entry_600 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_arr_indirection,0);
 BasicBlock* label_bypassdesc_601 = BasicBlock::Create(mod->getContext(), "bypassdesc",func_convolve_arr_indirection,0);
 BasicBlock* label_for_cond1_preheader_preheader_602 = BasicBlock::Create(mod->getContext(), "for.cond1.preheader.preheader",func_convolve_arr_indirection,0);
 BasicBlock* label_for_cond1_preheader_603 = BasicBlock::Create(mod->getContext(), "for.cond1.preheader",func_convolve_arr_indirection,0);
 BasicBlock* label_for_body4_preheader_604 = BasicBlock::Create(mod->getContext(), "for.body4.preheader",func_convolve_arr_indirection,0);
 BasicBlock* label_for_body4_605 = BasicBlock::Create(mod->getContext(), "for.body4",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc_i_preheader_preheader_606 = BasicBlock::Create(mod->getContext(), "for.inc.i.preheader.preheader",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc_i_preheader_607 = BasicBlock::Create(mod->getContext(), "for.inc.i.preheader",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc_i_608 = BasicBlock::Create(mod->getContext(), "for.inc.i",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc13_i = BasicBlock::Create(mod->getContext(), "for.inc13.i",func_convolve_arr_indirection,0);
 BasicBlock* label_filter_kernel_2d_exit_loopexit = BasicBlock::Create(mod->getContext(), "filter_kernel_2d.exit.loopexit",func_convolve_arr_indirection,0);
 BasicBlock* label_filter_kernel_2d_exit = BasicBlock::Create(mod->getContext(), "filter_kernel_2d.exit",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc5_loopexit_609 = BasicBlock::Create(mod->getContext(), "for.inc5.loopexit",func_convolve_arr_indirection,0);
 BasicBlock* label_for_inc5_610 = BasicBlock::Create(mod->getContext(), "for.inc5",func_convolve_arr_indirection,0);
 BasicBlock* label_for_end7_loopexit_611 = BasicBlock::Create(mod->getContext(), "for.end7.loopexit",func_convolve_arr_indirection,0);
 BasicBlock* label_for_end7_612 = BasicBlock::Create(mod->getContext(), "for.end7",func_convolve_arr_indirection,0);
 BasicBlock* label_acc_613 = BasicBlock::Create(mod->getContext(), "acc",func_convolve_arr_indirection,0);
 
 // Block entry (label_entry_600)
 std::vector<Value*> void_614_params;
 void_614_params.push_back(other_615);
 void_614_params.push_back(const_int64_274);
 void_614_params.push_back(other_616);
 void_614_params.push_back(other_348);
 CallInst* void_614 = CallInst::Create(func_llvm_dbg_value, void_614_params, "", label_entry_600);
 void_614->setCallingConv(CallingConv::C);
 void_614->setTailCall(true);
 AttributeSet void_614_PAL;
 void_614->setAttributes(void_614_PAL);
 
 std::vector<Value*> void_617_params;
 void_617_params.push_back(other_618);
 void_617_params.push_back(const_int64_274);
 void_617_params.push_back(other_619);
 void_617_params.push_back(other_348);
 CallInst* void_617 = CallInst::Create(func_llvm_dbg_value, void_617_params, "", label_entry_600);
 void_617->setCallingConv(CallingConv::C);
 void_617->setTailCall(true);
 AttributeSet void_617_PAL;
 void_617->setAttributes(void_617_PAL);
 
 std::vector<Value*> void_620_params;
 void_620_params.push_back(other_621);
 void_620_params.push_back(const_int64_274);
 void_620_params.push_back(other_622);
 void_620_params.push_back(other_348);
 CallInst* void_620 = CallInst::Create(func_llvm_dbg_value, void_620_params, "", label_entry_600);
 void_620->setCallingConv(CallingConv::C);
 void_620->setTailCall(true);
 AttributeSet void_620_PAL;
 void_620->setAttributes(void_620_PAL);
 
 std::vector<Value*> void_623_params;
 void_623_params.push_back(other_624);
 void_623_params.push_back(const_int64_274);
 void_623_params.push_back(other_625);
 void_623_params.push_back(other_348);
 CallInst* void_623 = CallInst::Create(func_llvm_dbg_value, void_623_params, "", label_entry_600);
 void_623->setCallingConv(CallingConv::C);
 void_623->setTailCall(true);
 AttributeSet void_623_PAL;
 void_623->setAttributes(void_623_PAL);
 
 std::vector<Value*> void_626_params;
 void_626_params.push_back(other_627);
 void_626_params.push_back(const_int64_274);
 void_626_params.push_back(other_628);
 void_626_params.push_back(other_348);
 CallInst* void_626 = CallInst::Create(func_llvm_dbg_value, void_626_params, "", label_entry_600);
 void_626->setCallingConv(CallingConv::C);
 void_626->setTailCall(true);
 AttributeSet void_626_PAL;
 void_626->setAttributes(void_626_PAL);
 
 std::vector<Value*> void_629_params;
 void_629_params.push_back(other_630);
 void_629_params.push_back(const_int64_274);
 void_629_params.push_back(other_631);
 void_629_params.push_back(other_348);
 CallInst* void_629 = CallInst::Create(func_llvm_dbg_value, void_629_params, "", label_entry_600);
 void_629->setCallingConv(CallingConv::C);
 void_629->setTailCall(true);
 AttributeSet void_629_PAL;
 void_629->setAttributes(void_629_PAL);
 
 BinaryOperator* int32_div_632 = BinaryOperator::Create(Instruction::SDiv, int32_kn_597, const_int32_275, "div", label_entry_600);
 std::vector<Value*> void_633_params;
 void_633_params.push_back(other_634);
 void_633_params.push_back(const_int64_274);
 void_633_params.push_back(other_635);
 void_633_params.push_back(other_348);
 CallInst* void_633 = CallInst::Create(func_llvm_dbg_value, void_633_params, "", label_entry_600);
 void_633->setCallingConv(CallingConv::C);
 void_633->setTailCall(true);
 AttributeSet void_633_PAL;
 void_633->setAttributes(void_633_PAL);
 
 std::vector<Value*> void_636_params;
 void_636_params.push_back(other_634);
 void_636_params.push_back(const_int64_274);
 void_636_params.push_back(other_637);
 void_636_params.push_back(other_348);
 CallInst* void_636 = CallInst::Create(func_llvm_dbg_value, void_636_params, "", label_entry_600);
 void_636->setCallingConv(CallingConv::C);
 void_636->setTailCall(true);
 AttributeSet void_636_PAL;
 void_636->setAttributes(void_636_PAL);
 
 CastInst* int64_638 = new SExtInst(int32_div_632, IntegerType::get(mod->getContext(), 64), "", label_entry_600);
 BinaryOperator* int64_639 = BinaryOperator::Create(Instruction::Add, int64_638, const_int64_278, "", label_entry_600);
 BinaryOperator* int32_640 = BinaryOperator::Create(Instruction::Sub, const_int32_248, int32_div_632, "", label_entry_600);
 CastInst* int64_641 = new SExtInst(int32_640, IntegerType::get(mod->getContext(), 64), "", label_entry_600);
 BinaryOperator* int64_642 = BinaryOperator::Create(Instruction::Sub, int64_639, int64_641, "", label_entry_600);
 BinaryOperator* int32_sub_643 = BinaryOperator::Create(Instruction::Sub, int32_dim_x_598, int32_div_632, "sub", label_entry_600);
 ICmpInst* int1_cmp7 = new ICmpInst(*label_entry_600, ICmpInst::ICMP_SLT, int32_div_632, int32_sub_643, "cmp7");
 BranchInst::Create(label_bypassdesc_601, label_for_end7_612, int1_cmp7, label_entry_600);
 
 // Block bypassdesc (label_bypassdesc_601)
 std::vector<Value*> int1_bypass_645_params;
 int1_bypass_645_params.push_back(int32_kn_597);
 int1_bypass_645_params.push_back(int32_dim_y_599);
 int1_bypass_645_params.push_back(int32_dim_x_598);
 CallInst* int1_bypass_645 = CallInst::Create(func_convolve_hw_use_accelerator, int1_bypass_645_params, "bypass", label_bypassdesc_601);
 int1_bypass_645->setCallingConv(CallingConv::C);
 int1_bypass_645->setTailCall(true);
 AttributeSet int1_bypass_645_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int1_bypass_645_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int1_bypass_645->setAttributes(int1_bypass_645_PAL);
 
 BranchInst::Create(label_acc_613, label_for_cond1_preheader_preheader_602, int1_bypass_645, label_bypassdesc_601);
 
 // Block for.cond1.preheader.preheader (label_for_cond1_preheader_preheader_602)
 BinaryOperator* int32_sub2_647 = BinaryOperator::Create(Instruction::Sub, int32_dim_y_599, int32_div_632, "sub2", label_for_cond1_preheader_preheader_602);
 ICmpInst* int1_cmp34 = new ICmpInst(*label_for_cond1_preheader_preheader_602, ICmpInst::ICMP_SLT, int32_div_632, int32_sub2_647, "cmp34");
 ICmpInst* int1_cmp12_i = new ICmpInst(*label_for_cond1_preheader_preheader_602, ICmpInst::ICMP_SLT, int32_div_632, int32_640, "cmp12.i");
 CastInst* int64_648 = new SExtInst(int32_sub2_647, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader_602);
 BinaryOperator* int64_649 = BinaryOperator::Create(Instruction::Add, int64_648, const_int64_281, "", label_for_cond1_preheader_preheader_602);
 CastInst* int64_650 = new SExtInst(int32_sub_643, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader_602);
 BinaryOperator* int64_651 = BinaryOperator::Create(Instruction::Add, int64_650, const_int64_281, "", label_for_cond1_preheader_preheader_602);
 BranchInst::Create(label_for_cond1_preheader_603, label_for_cond1_preheader_preheader_602);
 
 // Block for.cond1.preheader (label_for_cond1_preheader_603)
 Argument* fwdref_653 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv28 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv28", label_for_cond1_preheader_603);
 int64_indvars_iv28->addIncoming(fwdref_653, label_for_inc5_610);
 int64_indvars_iv28->addIncoming(int64_638, label_for_cond1_preheader_preheader_602);
 
 BranchInst::Create(label_for_body4_preheader_604, label_for_inc5_610, int1_cmp34, label_for_cond1_preheader_603);
 
 // Block for.body4.preheader (label_for_body4_preheader_604)
 GetElementPtrInst* ptr_arrayidx19_i = GetElementPtrInst::Create(ptr_out_595, int64_indvars_iv28, "arrayidx19.i", label_for_body4_preheader_604);
 BranchInst::Create(label_for_body4_605, label_for_body4_preheader_604);
 
 // Block for.body4 (label_for_body4_605)
 Argument* fwdref_656 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv5 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv5", label_for_body4_605);
 int64_indvars_iv5->addIncoming(fwdref_656, label_filter_kernel_2d_exit);
 int64_indvars_iv5->addIncoming(int64_638, label_for_body4_preheader_604);
 
 std::vector<Value*> void_657_params;
 void_657_params.push_back(other_615);
 void_657_params.push_back(const_int64_274);
 void_657_params.push_back(other_658);
 void_657_params.push_back(other_348);
 CallInst* void_657 = CallInst::Create(func_llvm_dbg_value, void_657_params, "", label_for_body4_605);
 void_657->setCallingConv(CallingConv::C);
 void_657->setTailCall(true);
 AttributeSet void_657_PAL;
 void_657->setAttributes(void_657_PAL);
 
 std::vector<Value*> void_659_params;
 void_659_params.push_back(other_618);
 void_659_params.push_back(const_int64_274);
 void_659_params.push_back(other_660);
 void_659_params.push_back(other_348);
 CallInst* void_659 = CallInst::Create(func_llvm_dbg_value, void_659_params, "", label_for_body4_605);
 void_659->setCallingConv(CallingConv::C);
 void_659->setTailCall(true);
 AttributeSet void_659_PAL;
 void_659->setAttributes(void_659_PAL);
 
 std::vector<Value*> void_661_params;
 void_661_params.push_back(other_621);
 void_661_params.push_back(const_int64_274);
 void_661_params.push_back(other_662);
 void_661_params.push_back(other_348);
 CallInst* void_661 = CallInst::Create(func_llvm_dbg_value, void_661_params, "", label_for_body4_605);
 void_661->setCallingConv(CallingConv::C);
 void_661->setTailCall(true);
 AttributeSet void_661_PAL;
 void_661->setAttributes(void_661_PAL);
 
 std::vector<Value*> void_663_params;
 void_663_params.push_back(other_624);
 void_663_params.push_back(const_int64_274);
 void_663_params.push_back(other_664);
 void_663_params.push_back(other_348);
 CallInst* void_663 = CallInst::Create(func_llvm_dbg_value, void_663_params, "", label_for_body4_605);
 void_663->setCallingConv(CallingConv::C);
 void_663->setTailCall(true);
 AttributeSet void_663_PAL;
 void_663->setAttributes(void_663_PAL);
 
 std::vector<Value*> void_665_params;
 void_665_params.push_back(other_544);
 void_665_params.push_back(const_int64_274);
 void_665_params.push_back(other_666);
 void_665_params.push_back(other_348);
 CallInst* void_665 = CallInst::Create(func_llvm_dbg_value, void_665_params, "", label_for_body4_605);
 void_665->setCallingConv(CallingConv::C);
 void_665->setTailCall(true);
 AttributeSet void_665_PAL;
 void_665->setAttributes(void_665_PAL);
 
 std::vector<Value*> void_667_params;
 void_667_params.push_back(other_544);
 void_667_params.push_back(const_int64_274);
 void_667_params.push_back(other_668);
 void_667_params.push_back(other_348);
 CallInst* void_667 = CallInst::Create(func_llvm_dbg_value, void_667_params, "", label_for_body4_605);
 void_667->setCallingConv(CallingConv::C);
 void_667->setTailCall(true);
 AttributeSet void_667_PAL;
 void_667->setAttributes(void_667_PAL);
 
 std::vector<Value*> void_669_params;
 void_669_params.push_back(other_634);
 void_669_params.push_back(const_int64_274);
 void_669_params.push_back(other_670);
 void_669_params.push_back(other_348);
 CallInst* void_669 = CallInst::Create(func_llvm_dbg_value, void_669_params, "", label_for_body4_605);
 void_669->setCallingConv(CallingConv::C);
 void_669->setTailCall(true);
 AttributeSet void_669_PAL;
 void_669->setAttributes(void_669_PAL);
 
 std::vector<Value*> void_671_params;
 void_671_params.push_back(other_374);
 void_671_params.push_back(const_int64_274);
 void_671_params.push_back(other_672);
 void_671_params.push_back(other_348);
 CallInst* void_671 = CallInst::Create(func_llvm_dbg_value, void_671_params, "", label_for_body4_605);
 void_671->setCallingConv(CallingConv::C);
 void_671->setTailCall(true);
 AttributeSet void_671_PAL;
 void_671->setAttributes(void_671_PAL);
 
 std::vector<Value*> void_673_params;
 void_673_params.push_back(other_377);
 void_673_params.push_back(const_int64_274);
 void_673_params.push_back(other_674);
 void_673_params.push_back(other_348);
 CallInst* void_673 = CallInst::Create(func_llvm_dbg_value, void_673_params, "", label_for_body4_605);
 void_673->setCallingConv(CallingConv::C);
 void_673->setTailCall(true);
 AttributeSet void_673_PAL;
 void_673->setAttributes(void_673_PAL);
 
 std::vector<Value*> void_675_params;
 void_675_params.push_back(other_676);
 void_675_params.push_back(const_int64_274);
 void_675_params.push_back(other_677);
 void_675_params.push_back(other_348);
 CallInst* void_675 = CallInst::Create(func_llvm_dbg_value, void_675_params, "", label_for_body4_605);
 void_675->setCallingConv(CallingConv::C);
 void_675->setTailCall(true);
 AttributeSet void_675_PAL;
 void_675->setAttributes(void_675_PAL);
 
 BranchInst::Create(label_filter_kernel_2d_exit, label_for_inc_i_preheader_preheader_606, int1_cmp12_i, label_for_body4_605);
 
 // Block for.inc.i.preheader.preheader (label_for_inc_i_preheader_preheader_606)
 BranchInst::Create(label_for_inc_i_preheader_607, label_for_inc_i_preheader_preheader_606);
 
 // Block for.inc.i.preheader (label_for_inc_i_preheader_607)
 Argument* fwdref_680 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_c_016_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "c.016.i", label_for_inc_i_preheader_607);
 int64_c_016_i->addIncoming(fwdref_680, label_for_inc13_i);
 int64_c_016_i->addIncoming(const_int64_274, label_for_inc_i_preheader_preheader_606);
 
 Argument* fwdref_681 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_015_i = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.015.i", label_for_inc_i_preheader_607);
 float_pixel_015_i->addIncoming(fwdref_681, label_for_inc13_i);
 float_pixel_015_i->addIncoming(const_float_276, label_for_inc_i_preheader_preheader_606);
 
 Argument* fwdref_682 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv413_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv413.i", label_for_inc_i_preheader_607);
 int64_indvars_iv413_i->addIncoming(fwdref_682, label_for_inc13_i);
 int64_indvars_iv413_i->addIncoming(int64_641, label_for_inc_i_preheader_preheader_606);
 
 std::vector<Value*> void_683_params;
 void_683_params.push_back(other_676);
 void_683_params.push_back(const_int64_274);
 void_683_params.push_back(other_684);
 void_683_params.push_back(other_348);
 CallInst* void_683 = CallInst::Create(func_llvm_dbg_value, void_683_params, "", label_for_inc_i_preheader_607);
 void_683->setCallingConv(CallingConv::C);
 void_683->setTailCall(true);
 AttributeSet void_683_PAL;
 void_683->setAttributes(void_683_PAL);
 
 BinaryOperator* int64_sext_685 = BinaryOperator::Create(Instruction::Shl, int64_c_016_i, const_int64_280, "sext", label_for_inc_i_preheader_607);
 BinaryOperator* int64_686 = BinaryOperator::Create(Instruction::AShr, int64_sext_685, const_int64_280, "", label_for_inc_i_preheader_607);
 BinaryOperator* int64_687 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv413_i, int64_indvars_iv28, "", label_for_inc_i_preheader_607);
 GetElementPtrInst* ptr_arrayidx_i_688 = GetElementPtrInst::Create(ptr_in_594, int64_687, "arrayidx.i", label_for_inc_i_preheader_607);
 LoadInst* ptr_689 = new LoadInst(ptr_arrayidx_i_688, "", false, label_for_inc_i_preheader_607);
 ptr_689->setAlignment(8);
 BranchInst::Create(label_for_inc_i_608, label_for_inc_i_preheader_607);
 
 // Block for.inc.i (label_for_inc_i_608)
 Argument* fwdref_691 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_110_i = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.110.i", label_for_inc_i_608);
 float_pixel_110_i->addIncoming(fwdref_691, label_for_inc_i_608);
 float_pixel_110_i->addIncoming(float_pixel_015_i, label_for_inc_i_preheader_607);
 
 Argument* fwdref_692 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv9_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv9.i", label_for_inc_i_608);
 int64_indvars_iv9_i->addIncoming(fwdref_692, label_for_inc_i_608);
 int64_indvars_iv9_i->addIncoming(int64_686, label_for_inc_i_preheader_607);
 
 Argument* fwdref_693 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv18_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv18.i", label_for_inc_i_608);
 int64_indvars_iv18_i->addIncoming(fwdref_693, label_for_inc_i_608);
 int64_indvars_iv18_i->addIncoming(int64_641, label_for_inc_i_preheader_607);
 
 BinaryOperator* int64_694 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv18_i, int64_indvars_iv5, "", label_for_inc_i_608);
 GetElementPtrInst* ptr_arrayidx7_i = GetElementPtrInst::Create(ptr_689, int64_694, "arrayidx7.i", label_for_inc_i_608);
 LoadInst* int8_695 = new LoadInst(ptr_arrayidx7_i, "", false, label_for_inc_i_608);
 int8_695->setAlignment(1);
 CastInst* int32_conv_i_696 = new ZExtInst(int8_695, IntegerType::get(mod->getContext(), 32), "conv.i", label_for_inc_i_608);
 CastInst* float_conv8_i = new SIToFPInst(int32_conv_i_696, Type::getFloatTy(mod->getContext()), "conv8.i", label_for_inc_i_608);
 GetElementPtrInst* ptr_arrayidx10_i = GetElementPtrInst::Create(ptr_kernel_596, int64_indvars_iv9_i, "arrayidx10.i", label_for_inc_i_608);
 LoadInst* float_697 = new LoadInst(ptr_arrayidx10_i, "", false, label_for_inc_i_608);
 float_697->setAlignment(4);
 BinaryOperator* float_mul_i = BinaryOperator::Create(Instruction::FMul, float_697, float_conv8_i, "mul.i", label_for_inc_i_608);
 BinaryOperator* float_add11_i = BinaryOperator::Create(Instruction::FAdd, float_pixel_110_i, float_mul_i, "add11.i", label_for_inc_i_608);
 BinaryOperator* int64_indvars_iv_next_i_698 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv9_i, const_int64_278, "indvars.iv.next.i", label_for_inc_i_608);
 BinaryOperator* int64_indvars_iv_next2_i = BinaryOperator::Create(Instruction::Add, int64_indvars_iv18_i, const_int64_278, "indvars.iv.next2.i", label_for_inc_i_608);
 ICmpInst* int1_exitcond_699 = new ICmpInst(*label_for_inc_i_608, ICmpInst::ICMP_EQ, int64_indvars_iv18_i, int64_638, "exitcond");
 BranchInst::Create(label_for_inc13_i, label_for_inc_i_608, int1_exitcond_699, label_for_inc_i_608);
 
 // Block for.inc13.i (label_for_inc13_i)
 PHINode* float_add11_i_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add11.i.lcssa", label_for_inc13_i);
 float_add11_i_lcssa->addIncoming(float_add11_i, label_for_inc_i_608);
 
 BinaryOperator* int64_701 = BinaryOperator::Create(Instruction::Add, int64_642, int64_686, "", label_for_inc13_i);
 BinaryOperator* int64_indvars_iv_next5_i = BinaryOperator::Create(Instruction::Add, int64_indvars_iv413_i, const_int64_278, "indvars.iv.next5.i", label_for_inc13_i);
 ICmpInst* int1_exitcond1_702 = new ICmpInst(*label_for_inc13_i, ICmpInst::ICMP_EQ, int64_indvars_iv413_i, int64_638, "exitcond1");
 BranchInst::Create(label_filter_kernel_2d_exit_loopexit, label_for_inc_i_preheader_607, int1_exitcond1_702, label_for_inc13_i);
 
 // Block filter_kernel_2d.exit.loopexit (label_filter_kernel_2d_exit_loopexit)
 PHINode* float_add11_i_lcssa_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add11.i.lcssa.lcssa", label_filter_kernel_2d_exit_loopexit);
 float_add11_i_lcssa_lcssa->addIncoming(float_add11_i_lcssa, label_for_inc13_i);
 
 BranchInst::Create(label_filter_kernel_2d_exit, label_filter_kernel_2d_exit_loopexit);
 
 // Block filter_kernel_2d.exit (label_filter_kernel_2d_exit)
 PHINode* float_pixel_0_lcssa_i_705 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.0.lcssa.i", label_filter_kernel_2d_exit);
 float_pixel_0_lcssa_i_705->addIncoming(const_float_276, label_for_body4_605);
 float_pixel_0_lcssa_i_705->addIncoming(float_add11_i_lcssa_lcssa, label_filter_kernel_2d_exit_loopexit);
 
 CastInst* int8_conv16_i = new FPToUIInst(float_pixel_0_lcssa_i_705, IntegerType::get(mod->getContext(), 8), "conv16.i", label_filter_kernel_2d_exit);
 LoadInst* ptr_706 = new LoadInst(ptr_arrayidx19_i, "", false, label_filter_kernel_2d_exit);
 ptr_706->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx20_i = GetElementPtrInst::Create(ptr_706, int64_indvars_iv5, "arrayidx20.i", label_filter_kernel_2d_exit);
 StoreInst* void_707 = new StoreInst(int8_conv16_i, ptr_arrayidx20_i, false, label_filter_kernel_2d_exit);
 void_707->setAlignment(1);
 BinaryOperator* int64_indvars_iv_next_708 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv5, const_int64_278, "indvars.iv.next", label_filter_kernel_2d_exit);
 ICmpInst* int1_exitcond2_709 = new ICmpInst(*label_filter_kernel_2d_exit, ICmpInst::ICMP_EQ, int64_indvars_iv5, int64_649, "exitcond2");
 BranchInst::Create(label_for_inc5_loopexit_609, label_for_body4_605, int1_exitcond2_709, label_filter_kernel_2d_exit);
 
 // Block for.inc5.loopexit (label_for_inc5_loopexit_609)
 BranchInst::Create(label_for_inc5_610, label_for_inc5_loopexit_609);
 
 // Block for.inc5 (label_for_inc5_610)
 BinaryOperator* int64_indvars_iv_next3 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv28, const_int64_278, "indvars.iv.next3", label_for_inc5_610);
 ICmpInst* int1_exitcond3_712 = new ICmpInst(*label_for_inc5_610, ICmpInst::ICMP_EQ, int64_indvars_iv28, int64_651, "exitcond3");
 BranchInst::Create(label_for_end7_loopexit_611, label_for_cond1_preheader_603, int1_exitcond3_712, label_for_inc5_610);
 
 // Block for.end7.loopexit (label_for_end7_loopexit_611)
 BranchInst::Create(label_for_end7_612, label_for_end7_loopexit_611);
 
 // Block for.end7 (label_for_end7_612)
 ReturnInst::Create(mod->getContext(), label_for_end7_612);
 
 // Block acc (label_acc_613)
 std::vector<Value*> void_716_params;
 void_716_params.push_back(ptr_in_594);
 void_716_params.push_back(ptr_out_595);
 void_716_params.push_back(ptr_kernel_596);
 void_716_params.push_back(int32_kn_597);
 void_716_params.push_back(int32_dim_y_599);
 void_716_params.push_back(int32_dim_x_598);
 CallInst* void_716 = CallInst::Create(func_convolve_bypass_hw_iface1, void_716_params, "", label_acc_613);
 void_716->setCallingConv(CallingConv::C);
 void_716->setTailCall(true);
 AttributeSet void_716_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_716_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_716->setAttributes(void_716_PAL);
 
 ReturnInst::Create(mod->getContext(), label_acc_613);
 
 // Resolve Forward References
 fwdref_681->replaceAllUsesWith(float_add11_i_lcssa); delete fwdref_681;
 fwdref_691->replaceAllUsesWith(float_add11_i); delete fwdref_691;
 fwdref_692->replaceAllUsesWith(int64_indvars_iv_next_i_698); delete fwdref_692;
 fwdref_693->replaceAllUsesWith(int64_indvars_iv_next2_i); delete fwdref_693;
 fwdref_680->replaceAllUsesWith(int64_701); delete fwdref_680;
 fwdref_682->replaceAllUsesWith(int64_indvars_iv_next5_i); delete fwdref_682;
 fwdref_656->replaceAllUsesWith(int64_indvars_iv_next_708); delete fwdref_656;
 fwdref_653->replaceAllUsesWith(int64_indvars_iv_next3); delete fwdref_653;
 
}

// Function: convolve_loop_nest (func_convolve_loop_nest)
{
 Function::arg_iterator args = func_convolve_loop_nest->arg_begin();
 Value* ptr_in_718 = args++;
 ptr_in_718->setName("in");
 Value* ptr_out_719 = args++;
 ptr_out_719->setName("out");
 Value* ptr_kernel_720 = args++;
 ptr_kernel_720->setName("kernel");
 Value* int32_kn_721 = args++;
 int32_kn_721->setName("kn");
 Value* int32_dim_x_722 = args++;
 int32_dim_x_722->setName("dim_x");
 Value* int32_dim_y_723 = args++;
 int32_dim_y_723->setName("dim_y");
 
 BasicBlock* label_entry_724 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_loop_nest,0);
 BasicBlock* label_bypassdesc_725 = BasicBlock::Create(mod->getContext(), "bypassdesc",func_convolve_loop_nest,0);
 BasicBlock* label_for_cond1_preheader_preheader_726 = BasicBlock::Create(mod->getContext(), "for.cond1.preheader.preheader",func_convolve_loop_nest,0);
 BasicBlock* label_for_cond1_preheader_727 = BasicBlock::Create(mod->getContext(), "for.cond1.preheader",func_convolve_loop_nest,0);
 BasicBlock* label_for_body4_preheader_728 = BasicBlock::Create(mod->getContext(), "for.body4.preheader",func_convolve_loop_nest,0);
 BasicBlock* label_for_body4_729 = BasicBlock::Create(mod->getContext(), "for.body4",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc_preheader_preheader_730 = BasicBlock::Create(mod->getContext(), "for.inc.preheader.preheader",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc_preheader_731 = BasicBlock::Create(mod->getContext(), "for.inc.preheader",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc_732 = BasicBlock::Create(mod->getContext(), "for.inc",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc21 = BasicBlock::Create(mod->getContext(), "for.inc21",func_convolve_loop_nest,0);
 BasicBlock* label_for_end23_loopexit = BasicBlock::Create(mod->getContext(), "for.end23.loopexit",func_convolve_loop_nest,0);
 BasicBlock* label_for_end23 = BasicBlock::Create(mod->getContext(), "for.end23",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc32_loopexit = BasicBlock::Create(mod->getContext(), "for.inc32.loopexit",func_convolve_loop_nest,0);
 BasicBlock* label_for_inc32 = BasicBlock::Create(mod->getContext(), "for.inc32",func_convolve_loop_nest,0);
 BasicBlock* label_for_end34_loopexit = BasicBlock::Create(mod->getContext(), "for.end34.loopexit",func_convolve_loop_nest,0);
 BasicBlock* label_for_end34 = BasicBlock::Create(mod->getContext(), "for.end34",func_convolve_loop_nest,0);
 BasicBlock* label_acc_733 = BasicBlock::Create(mod->getContext(), "acc",func_convolve_loop_nest,0);
 
 // Block entry (label_entry_724)
 std::vector<Value*> void_734_params;
 void_734_params.push_back(other_735);
 void_734_params.push_back(const_int64_274);
 void_734_params.push_back(other_736);
 void_734_params.push_back(other_348);
 CallInst* void_734 = CallInst::Create(func_llvm_dbg_value, void_734_params, "", label_entry_724);
 void_734->setCallingConv(CallingConv::C);
 void_734->setTailCall(true);
 AttributeSet void_734_PAL;
 void_734->setAttributes(void_734_PAL);
 
 std::vector<Value*> void_737_params;
 void_737_params.push_back(other_738);
 void_737_params.push_back(const_int64_274);
 void_737_params.push_back(other_739);
 void_737_params.push_back(other_348);
 CallInst* void_737 = CallInst::Create(func_llvm_dbg_value, void_737_params, "", label_entry_724);
 void_737->setCallingConv(CallingConv::C);
 void_737->setTailCall(true);
 AttributeSet void_737_PAL;
 void_737->setAttributes(void_737_PAL);
 
 std::vector<Value*> void_740_params;
 void_740_params.push_back(other_741);
 void_740_params.push_back(const_int64_274);
 void_740_params.push_back(other_742);
 void_740_params.push_back(other_348);
 CallInst* void_740 = CallInst::Create(func_llvm_dbg_value, void_740_params, "", label_entry_724);
 void_740->setCallingConv(CallingConv::C);
 void_740->setTailCall(true);
 AttributeSet void_740_PAL;
 void_740->setAttributes(void_740_PAL);
 
 std::vector<Value*> void_743_params;
 void_743_params.push_back(other_744);
 void_743_params.push_back(const_int64_274);
 void_743_params.push_back(other_745);
 void_743_params.push_back(other_348);
 CallInst* void_743 = CallInst::Create(func_llvm_dbg_value, void_743_params, "", label_entry_724);
 void_743->setCallingConv(CallingConv::C);
 void_743->setTailCall(true);
 AttributeSet void_743_PAL;
 void_743->setAttributes(void_743_PAL);
 
 std::vector<Value*> void_746_params;
 void_746_params.push_back(other_747);
 void_746_params.push_back(const_int64_274);
 void_746_params.push_back(other_748);
 void_746_params.push_back(other_348);
 CallInst* void_746 = CallInst::Create(func_llvm_dbg_value, void_746_params, "", label_entry_724);
 void_746->setCallingConv(CallingConv::C);
 void_746->setTailCall(true);
 AttributeSet void_746_PAL;
 void_746->setAttributes(void_746_PAL);
 
 std::vector<Value*> void_749_params;
 void_749_params.push_back(other_750);
 void_749_params.push_back(const_int64_274);
 void_749_params.push_back(other_751);
 void_749_params.push_back(other_348);
 CallInst* void_749 = CallInst::Create(func_llvm_dbg_value, void_749_params, "", label_entry_724);
 void_749->setCallingConv(CallingConv::C);
 void_749->setTailCall(true);
 AttributeSet void_749_PAL;
 void_749->setAttributes(void_749_PAL);
 
 BinaryOperator* int32_div_752 = BinaryOperator::Create(Instruction::SDiv, int32_kn_721, const_int32_275, "div", label_entry_724);
 std::vector<Value*> void_753_params;
 void_753_params.push_back(other_754);
 void_753_params.push_back(const_int64_274);
 void_753_params.push_back(other_755);
 void_753_params.push_back(other_348);
 CallInst* void_753 = CallInst::Create(func_llvm_dbg_value, void_753_params, "", label_entry_724);
 void_753->setCallingConv(CallingConv::C);
 void_753->setTailCall(true);
 AttributeSet void_753_PAL;
 void_753->setAttributes(void_753_PAL);
 
 std::vector<Value*> void_756_params;
 void_756_params.push_back(other_754);
 void_756_params.push_back(const_int64_274);
 void_756_params.push_back(other_757);
 void_756_params.push_back(other_348);
 CallInst* void_756 = CallInst::Create(func_llvm_dbg_value, void_756_params, "", label_entry_724);
 void_756->setCallingConv(CallingConv::C);
 void_756->setTailCall(true);
 AttributeSet void_756_PAL;
 void_756->setAttributes(void_756_PAL);
 
 BinaryOperator* int32_758 = BinaryOperator::Create(Instruction::Sub, const_int32_248, int32_div_752, "", label_entry_724);
 CastInst* int64_759 = new SExtInst(int32_758, IntegerType::get(mod->getContext(), 64), "", label_entry_724);
 CastInst* int64_760 = new SExtInst(int32_div_752, IntegerType::get(mod->getContext(), 64), "", label_entry_724);
 BinaryOperator* int32_sub_761 = BinaryOperator::Create(Instruction::Sub, int32_dim_x_722, int32_div_752, "sub", label_entry_724);
 ICmpInst* int1_cmp25 = new ICmpInst(*label_entry_724, ICmpInst::ICMP_SLT, int32_div_752, int32_sub_761, "cmp25");
 BranchInst::Create(label_bypassdesc_725, label_for_end34, int1_cmp25, label_entry_724);
 
 // Block bypassdesc (label_bypassdesc_725)
 std::vector<Value*> int1_bypass_763_params;
 int1_bypass_763_params.push_back(int32_kn_721);
 int1_bypass_763_params.push_back(int32_dim_y_723);
 int1_bypass_763_params.push_back(int32_dim_x_722);
 CallInst* int1_bypass_763 = CallInst::Create(func_convolve_hw_use_accelerator, int1_bypass_763_params, "bypass", label_bypassdesc_725);
 int1_bypass_763->setCallingConv(CallingConv::C);
 int1_bypass_763->setTailCall(true);
 AttributeSet int1_bypass_763_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int1_bypass_763_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int1_bypass_763->setAttributes(int1_bypass_763_PAL);
 
 BranchInst::Create(label_acc_733, label_for_cond1_preheader_preheader_726, int1_bypass_763, label_bypassdesc_725);
 
 // Block for.cond1.preheader.preheader (label_for_cond1_preheader_preheader_726)
 BinaryOperator* int32_sub2_765 = BinaryOperator::Create(Instruction::Sub, int32_dim_y_723, int32_div_752, "sub2", label_for_cond1_preheader_preheader_726);
 ICmpInst* int1_cmp322 = new ICmpInst(*label_for_cond1_preheader_preheader_726, ICmpInst::ICMP_SLT, int32_div_752, int32_sub2_765, "cmp322");
 ICmpInst* int1_cmp716 = new ICmpInst(*label_for_cond1_preheader_preheader_726, ICmpInst::ICMP_SLT, int32_div_752, int32_758, "cmp716");
 BinaryOperator* int64_766 = BinaryOperator::Create(Instruction::Add, int64_760, const_int64_278, "", label_for_cond1_preheader_preheader_726);
 BinaryOperator* int64_767 = BinaryOperator::Create(Instruction::Sub, int64_766, int64_759, "", label_for_cond1_preheader_preheader_726);
 CastInst* int64_768 = new SExtInst(int32_sub2_765, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader_726);
 BinaryOperator* int64_769 = BinaryOperator::Create(Instruction::Add, int64_768, const_int64_281, "", label_for_cond1_preheader_preheader_726);
 CastInst* int64_770 = new SExtInst(int32_sub_761, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_preheader_726);
 BinaryOperator* int64_771 = BinaryOperator::Create(Instruction::Add, int64_770, const_int64_281, "", label_for_cond1_preheader_preheader_726);
 BranchInst::Create(label_for_cond1_preheader_727, label_for_cond1_preheader_preheader_726);
 
 // Block for.cond1.preheader (label_for_cond1_preheader_727)
 Argument* fwdref_773 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv926 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv926", label_for_cond1_preheader_727);
 int64_indvars_iv926->addIncoming(fwdref_773, label_for_inc32);
 int64_indvars_iv926->addIncoming(int64_760, label_for_cond1_preheader_preheader_726);
 
 BranchInst::Create(label_for_body4_preheader_728, label_for_inc32, int1_cmp322, label_for_cond1_preheader_727);
 
 // Block for.body4.preheader (label_for_body4_preheader_728)
 BranchInst::Create(label_for_body4_729, label_for_body4_preheader_728);
 
 // Block for.body4 (label_for_body4_729)
 Argument* fwdref_776 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv723 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv723", label_for_body4_729);
 int64_indvars_iv723->addIncoming(fwdref_776, label_for_end23);
 int64_indvars_iv723->addIncoming(int64_760, label_for_body4_preheader_728);
 
 std::vector<Value*> void_777_params;
 void_777_params.push_back(other_374);
 void_777_params.push_back(const_int64_274);
 void_777_params.push_back(other_778);
 void_777_params.push_back(other_348);
 CallInst* void_777 = CallInst::Create(func_llvm_dbg_value, void_777_params, "", label_for_body4_729);
 void_777->setCallingConv(CallingConv::C);
 void_777->setTailCall(true);
 AttributeSet void_777_PAL;
 void_777->setAttributes(void_777_PAL);
 
 std::vector<Value*> void_779_params;
 void_779_params.push_back(other_377);
 void_779_params.push_back(const_int64_274);
 void_779_params.push_back(other_780);
 void_779_params.push_back(other_348);
 CallInst* void_779 = CallInst::Create(func_llvm_dbg_value, void_779_params, "", label_for_body4_729);
 void_779->setCallingConv(CallingConv::C);
 void_779->setTailCall(true);
 AttributeSet void_779_PAL;
 void_779->setAttributes(void_779_PAL);
 
 BranchInst::Create(label_for_end23, label_for_inc_preheader_preheader_730, int1_cmp716, label_for_body4_729);
 
 // Block for.inc.preheader.preheader (label_for_inc_preheader_preheader_730)
 BranchInst::Create(label_for_inc_preheader_731, label_for_inc_preheader_preheader_730);
 
 // Block for.inc.preheader (label_for_inc_preheader_731)
 Argument* fwdref_783 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_c_020 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "c.020", label_for_inc_preheader_731);
 int64_c_020->addIncoming(fwdref_783, label_for_inc21);
 int64_c_020->addIncoming(const_int64_274, label_for_inc_preheader_preheader_730);
 
 Argument* fwdref_784 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_019 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.019", label_for_inc_preheader_731);
 float_pixel_019->addIncoming(fwdref_784, label_for_inc21);
 float_pixel_019->addIncoming(const_float_276, label_for_inc_preheader_preheader_730);
 
 Argument* fwdref_785 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv417 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv417", label_for_inc_preheader_731);
 int64_indvars_iv417->addIncoming(fwdref_785, label_for_inc21);
 int64_indvars_iv417->addIncoming(int64_759, label_for_inc_preheader_preheader_730);
 
 BinaryOperator* int64_sext_786 = BinaryOperator::Create(Instruction::Shl, int64_c_020, const_int64_280, "sext", label_for_inc_preheader_731);
 BinaryOperator* int64_787 = BinaryOperator::Create(Instruction::AShr, int64_sext_786, const_int64_280, "", label_for_inc_preheader_731);
 BinaryOperator* int64_788 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv417, int64_indvars_iv723, "", label_for_inc_preheader_731);
 GetElementPtrInst* ptr_arrayidx_789 = GetElementPtrInst::Create(ptr_in_718, int64_788, "arrayidx", label_for_inc_preheader_731);
 LoadInst* ptr_790 = new LoadInst(ptr_arrayidx_789, "", false, label_for_inc_preheader_731);
 ptr_790->setAlignment(8);
 BinaryOperator* int64_sext2 = BinaryOperator::Create(Instruction::Shl, int64_c_020, const_int64_280, "sext2", label_for_inc_preheader_731);
 BinaryOperator* int64_791 = BinaryOperator::Create(Instruction::AShr, int64_sext2, const_int64_280, "", label_for_inc_preheader_731);
 BranchInst::Create(label_for_inc_732, label_for_inc_preheader_731);
 
 // Block for.inc (label_for_inc_732)
 Argument* fwdref_793 = new Argument(Type::getFloatTy(mod->getContext()));
 PHINode* float_pixel_114 = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.114", label_for_inc_732);
 float_pixel_114->addIncoming(fwdref_793, label_for_inc_732);
 float_pixel_114->addIncoming(float_pixel_019, label_for_inc_preheader_731);
 
 Argument* fwdref_794 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv13 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv13", label_for_inc_732);
 int64_indvars_iv13->addIncoming(fwdref_794, label_for_inc_732);
 int64_indvars_iv13->addIncoming(int64_787, label_for_inc_preheader_731);
 
 Argument* fwdref_795 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv112 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv112", label_for_inc_732);
 int64_indvars_iv112->addIncoming(fwdref_795, label_for_inc_732);
 int64_indvars_iv112->addIncoming(int64_759, label_for_inc_preheader_731);
 
 std::vector<Value*> void_796_params;
 void_796_params.push_back(other_797);
 void_796_params.push_back(const_int64_274);
 void_796_params.push_back(other_778);
 void_796_params.push_back(other_348);
 CallInst* void_796 = CallInst::Create(func_llvm_dbg_value, void_796_params, "", label_for_inc_732);
 void_796->setCallingConv(CallingConv::C);
 void_796->setTailCall(true);
 AttributeSet void_796_PAL;
 void_796->setAttributes(void_796_PAL);
 
 BinaryOperator* int64_798 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv112, int64_indvars_iv926, "", label_for_inc_732);
 GetElementPtrInst* ptr_arrayidx15 = GetElementPtrInst::Create(ptr_790, int64_798, "arrayidx15", label_for_inc_732);
 LoadInst* int8_799 = new LoadInst(ptr_arrayidx15, "", false, label_for_inc_732);
 int8_799->setAlignment(1);
 CastInst* int32_conv_800 = new ZExtInst(int8_799, IntegerType::get(mod->getContext(), 32), "conv", label_for_inc_732);
 CastInst* float_conv16 = new SIToFPInst(int32_conv_800, Type::getFloatTy(mod->getContext()), "conv16", label_for_inc_732);
 GetElementPtrInst* ptr_arrayidx18 = GetElementPtrInst::Create(ptr_kernel_720, int64_indvars_iv13, "arrayidx18", label_for_inc_732);
 LoadInst* float_801 = new LoadInst(ptr_arrayidx18, "", false, label_for_inc_732);
 float_801->setAlignment(4);
 BinaryOperator* float_mul_802 = BinaryOperator::Create(Instruction::FMul, float_801, float_conv16, "mul", label_for_inc_732);
 BinaryOperator* float_add19 = BinaryOperator::Create(Instruction::FAdd, float_pixel_114, float_mul_802, "add19", label_for_inc_732);
 BinaryOperator* int64_indvars_iv_next_803 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv13, const_int64_278, "indvars.iv.next", label_for_inc_732);
 BinaryOperator* int64_indvars_iv_next2_804 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv112, const_int64_278, "indvars.iv.next2", label_for_inc_732);
 ICmpInst* int1_cmp11 = new ICmpInst(*label_for_inc_732, ICmpInst::ICMP_SLT, int64_indvars_iv112, int64_760, "cmp11");
 BranchInst::Create(label_for_inc_732, label_for_inc21, int1_cmp11, label_for_inc_732);
 
 // Block for.inc21 (label_for_inc21)
 PHINode* float_add19_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add19.lcssa", label_for_inc21);
 float_add19_lcssa->addIncoming(float_add19, label_for_inc_732);
 
 BinaryOperator* int64_806 = BinaryOperator::Create(Instruction::Add, int64_767, int64_791, "", label_for_inc21);
 BinaryOperator* int64_indvars_iv_next5_807 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv417, const_int64_278, "indvars.iv.next5", label_for_inc21);
 ICmpInst* int1_cmp7_808 = new ICmpInst(*label_for_inc21, ICmpInst::ICMP_SLT, int64_indvars_iv417, int64_760, "cmp7");
 BranchInst::Create(label_for_inc_preheader_731, label_for_end23_loopexit, int1_cmp7_808, label_for_inc21);
 
 // Block for.end23.loopexit (label_for_end23_loopexit)
 PHINode* float_add19_lcssa_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 1, "add19.lcssa.lcssa", label_for_end23_loopexit);
 float_add19_lcssa_lcssa->addIncoming(float_add19_lcssa, label_for_inc21);
 
 BranchInst::Create(label_for_end23, label_for_end23_loopexit);
 
 // Block for.end23 (label_for_end23)
 PHINode* float_pixel_0_lcssa = PHINode::Create(Type::getFloatTy(mod->getContext()), 2, "pixel.0.lcssa", label_for_end23);
 float_pixel_0_lcssa->addIncoming(const_float_276, label_for_body4_729);
 float_pixel_0_lcssa->addIncoming(float_add19_lcssa_lcssa, label_for_end23_loopexit);
 
 CastInst* int8_conv24 = new FPToUIInst(float_pixel_0_lcssa, IntegerType::get(mod->getContext(), 8), "conv24", label_for_end23);
 GetElementPtrInst* ptr_arrayidx27 = GetElementPtrInst::Create(ptr_out_719, int64_indvars_iv723, "arrayidx27", label_for_end23);
 LoadInst* ptr_811 = new LoadInst(ptr_arrayidx27, "", false, label_for_end23);
 ptr_811->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx28 = GetElementPtrInst::Create(ptr_811, int64_indvars_iv926, "arrayidx28", label_for_end23);
 StoreInst* void_812 = new StoreInst(int8_conv24, ptr_arrayidx28, false, label_for_end23);
 void_812->setAlignment(1);
 BinaryOperator* int64_indvars_iv_next8 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv723, const_int64_278, "indvars.iv.next8", label_for_end23);
 ICmpInst* int1_exitcond_813 = new ICmpInst(*label_for_end23, ICmpInst::ICMP_EQ, int64_indvars_iv723, int64_769, "exitcond");
 BranchInst::Create(label_for_inc32_loopexit, label_for_body4_729, int1_exitcond_813, label_for_end23);
 
 // Block for.inc32.loopexit (label_for_inc32_loopexit)
 BranchInst::Create(label_for_inc32, label_for_inc32_loopexit);
 
 // Block for.inc32 (label_for_inc32)
 BinaryOperator* int64_indvars_iv_next10 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv926, const_int64_278, "indvars.iv.next10", label_for_inc32);
 ICmpInst* int1_exitcond1_816 = new ICmpInst(*label_for_inc32, ICmpInst::ICMP_EQ, int64_indvars_iv926, int64_771, "exitcond1");
 BranchInst::Create(label_for_end34_loopexit, label_for_cond1_preheader_727, int1_exitcond1_816, label_for_inc32);
 
 // Block for.end34.loopexit (label_for_end34_loopexit)
 BranchInst::Create(label_for_end34, label_for_end34_loopexit);
 
 // Block for.end34 (label_for_end34)
 ReturnInst::Create(mod->getContext(), label_for_end34);
 
 // Block acc (label_acc_733)
 std::vector<Value*> void_820_params;
 void_820_params.push_back(ptr_in_718);
 void_820_params.push_back(ptr_out_719);
 void_820_params.push_back(ptr_kernel_720);
 void_820_params.push_back(int32_kn_721);
 void_820_params.push_back(int32_dim_y_723);
 void_820_params.push_back(int32_dim_x_722);
 CallInst* void_820 = CallInst::Create(func_convolve_bypass_hw_iface1, void_820_params, "", label_acc_733);
 void_820->setCallingConv(CallingConv::C);
 void_820->setTailCall(true);
 AttributeSet void_820_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_820_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_820->setAttributes(void_820_PAL);
 
 ReturnInst::Create(mod->getContext(), label_acc_733);
 
 // Resolve Forward References
 fwdref_785->replaceAllUsesWith(int64_indvars_iv_next5_807); delete fwdref_785;
 fwdref_793->replaceAllUsesWith(float_add19); delete fwdref_793;
 fwdref_794->replaceAllUsesWith(int64_indvars_iv_next_803); delete fwdref_794;
 fwdref_795->replaceAllUsesWith(int64_indvars_iv_next2_804); delete fwdref_795;
 fwdref_784->replaceAllUsesWith(float_add19_lcssa); delete fwdref_784;
 fwdref_783->replaceAllUsesWith(int64_806); delete fwdref_783;
 fwdref_776->replaceAllUsesWith(int64_indvars_iv_next8); delete fwdref_776;
 fwdref_773->replaceAllUsesWith(int64_indvars_iv_next10); delete fwdref_773;
 
}

// Function: main (func_main)
{
 Function::arg_iterator args = func_main->arg_begin();
 Value* int32_argc = args++;
 int32_argc->setName("argc");
 Value* ptr_argv = args++;
 ptr_argv->setName("argv");
 
 BasicBlock* label_entry_822 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
 BasicBlock* label_while_cond = BasicBlock::Create(mod->getContext(), "while.cond",func_main,0);
 BasicBlock* label_while_body = BasicBlock::Create(mod->getContext(), "while.body",func_main,0);
 BasicBlock* label_sw_bb = BasicBlock::Create(mod->getContext(), "sw.bb",func_main,0);
 BasicBlock* label_sw_bb1 = BasicBlock::Create(mod->getContext(), "sw.bb1",func_main,0);
 BasicBlock* label_sw_default = BasicBlock::Create(mod->getContext(), "sw.default",func_main,0);
 BasicBlock* label_sw_epilog = BasicBlock::Create(mod->getContext(), "sw.epilog",func_main,0);
 BasicBlock* label_while_end = BasicBlock::Create(mod->getContext(), "while.end",func_main,0);
 BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func_main,0);
 BasicBlock* label_for_cond = BasicBlock::Create(mod->getContext(), "for.cond",func_main,0);
 BasicBlock* label_for_body = BasicBlock::Create(mod->getContext(), "for.body",func_main,0);
 BasicBlock* label_sw_bb4 = BasicBlock::Create(mod->getContext(), "sw.bb4",func_main,0);
 BasicBlock* label_sw_bb7 = BasicBlock::Create(mod->getContext(), "sw.bb7",func_main,0);
 BasicBlock* label_sw_epilog11 = BasicBlock::Create(mod->getContext(), "sw.epilog11",func_main,0);
 BasicBlock* label_for_inc_823 = BasicBlock::Create(mod->getContext(), "for.inc",func_main,0);
 BasicBlock* label_for_end = BasicBlock::Create(mod->getContext(), "for.end",func_main,0);
 BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func_main,0);
 BasicBlock* label_if_then20 = BasicBlock::Create(mod->getContext(), "if.then20",func_main,0);
 BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func_main,0);
 BasicBlock* label_for_cond22 = BasicBlock::Create(mod->getContext(), "for.cond22",func_main,0);
 BasicBlock* label_for_body25 = BasicBlock::Create(mod->getContext(), "for.body25",func_main,0);
 BasicBlock* label_sw_bb27 = BasicBlock::Create(mod->getContext(), "sw.bb27",func_main,0);
 BasicBlock* label_sw_epilog31 = BasicBlock::Create(mod->getContext(), "sw.epilog31",func_main,0);
 BasicBlock* label_for_inc32_824 = BasicBlock::Create(mod->getContext(), "for.inc32",func_main,0);
 BasicBlock* label_for_end34_825 = BasicBlock::Create(mod->getContext(), "for.end34",func_main,0);
 BasicBlock* label_if_end38 = BasicBlock::Create(mod->getContext(), "if.end38",func_main,0);
 BasicBlock* label_if_then47 = BasicBlock::Create(mod->getContext(), "if.then47",func_main,0);
 BasicBlock* label_if_else49 = BasicBlock::Create(mod->getContext(), "if.else49",func_main,0);
 BasicBlock* label_if_then52 = BasicBlock::Create(mod->getContext(), "if.then52",func_main,0);
 BasicBlock* label_if_else54 = BasicBlock::Create(mod->getContext(), "if.else54",func_main,0);
 BasicBlock* label_if_then57 = BasicBlock::Create(mod->getContext(), "if.then57",func_main,0);
 BasicBlock* label_if_else59 = BasicBlock::Create(mod->getContext(), "if.else59",func_main,0);
 BasicBlock* label_if_end63 = BasicBlock::Create(mod->getContext(), "if.end63",func_main,0);
 BasicBlock* label_if_end64 = BasicBlock::Create(mod->getContext(), "if.end64",func_main,0);
 BasicBlock* label_if_end65 = BasicBlock::Create(mod->getContext(), "if.end65",func_main,0);
 BasicBlock* label_if_then67 = BasicBlock::Create(mod->getContext(), "if.then67",func_main,0);
 BasicBlock* label_for_cond68 = BasicBlock::Create(mod->getContext(), "for.cond68",func_main,0);
 BasicBlock* label_for_body71 = BasicBlock::Create(mod->getContext(), "for.body71",func_main,0);
 BasicBlock* label_for_cond72 = BasicBlock::Create(mod->getContext(), "for.cond72",func_main,0);
 BasicBlock* label_for_body75 = BasicBlock::Create(mod->getContext(), "for.body75",func_main,0);
 BasicBlock* label_for_inc82 = BasicBlock::Create(mod->getContext(), "for.inc82",func_main,0);
 BasicBlock* label_for_end84 = BasicBlock::Create(mod->getContext(), "for.end84",func_main,0);
 BasicBlock* label_for_inc86 = BasicBlock::Create(mod->getContext(), "for.inc86",func_main,0);
 BasicBlock* label_for_end88 = BasicBlock::Create(mod->getContext(), "for.end88",func_main,0);
 BasicBlock* label_if_end89 = BasicBlock::Create(mod->getContext(), "if.end89",func_main,0);
 BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_main,0);
 
 // Block entry (label_entry_822)
 AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry_822);
 ptr_retval->setAlignment(4);
 AllocaInst* ptr_argc_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "argc.addr", label_entry_822);
 ptr_argc_addr->setAlignment(4);
 AllocaInst* ptr_argv_addr = new AllocaInst(PointerTy_1, "argv.addr", label_entry_822);
 ptr_argv_addr->setAlignment(8);
 AllocaInst* ptr_index = new AllocaInst(IntegerType::get(mod->getContext(), 32), "index", label_entry_822);
 ptr_index->setAlignment(4);
 AllocaInst* ptr_verbose_output = new AllocaInst(IntegerType::get(mod->getContext(), 32), "verbose_output", label_entry_822);
 ptr_verbose_output->setAlignment(4);
 AllocaInst* ptr_arg = new AllocaInst(IntegerType::get(mod->getContext(), 32), "arg", label_entry_822);
 ptr_arg->setAlignment(4);
 AllocaInst* ptr__size_arr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "_size_arr", label_entry_822);
 ptr__size_arr->setAlignment(4);
 AllocaInst* ptr__size_filter = new AllocaInst(IntegerType::get(mod->getContext(), 32), "_size_filter", label_entry_822);
 ptr__size_filter->setAlignment(4);
 AllocaInst* ptr_data_input = new AllocaInst(PointerTy_1, "data_input", label_entry_822);
 ptr_data_input->setAlignment(8);
 AllocaInst* ptr_data_output = new AllocaInst(PointerTy_1, "data_output", label_entry_822);
 ptr_data_output->setAlignment(8);
 AllocaInst* ptr_nrows = new AllocaInst(IntegerType::get(mod->getContext(), 32), "nrows", label_entry_822);
 ptr_nrows->setAlignment(4);
 AllocaInst* ptr_ncols = new AllocaInst(IntegerType::get(mod->getContext(), 32), "ncols", label_entry_822);
 ptr_ncols->setAlignment(4);
 AllocaInst* ptr_nchannels = new AllocaInst(IntegerType::get(mod->getContext(), 32), "nchannels", label_entry_822);
 ptr_nchannels->setAlignment(4);
 AllocaInst* ptr_opt = new AllocaInst(IntegerType::get(mod->getContext(), 32), "opt", label_entry_822);
 ptr_opt->setAlignment(4);
 AllocaInst* ptr_filename_in = new AllocaInst(PointerTy_2, "filename_in", label_entry_822);
 ptr_filename_in->setAlignment(8);
 AllocaInst* ptr_filename_out = new AllocaInst(PointerTy_2, "filename_out", label_entry_822);
 ptr_filename_out->setAlignment(8);
 AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry_822);
 ptr_i->setAlignment(4);
 AllocaInst* ptr_j = new AllocaInst(IntegerType::get(mod->getContext(), 32), "j", label_entry_822);
 ptr_j->setAlignment(4);
 AllocaInst* ptr_kernel_3_3 = new AllocaInst(ArrayTy_16, "kernel_3_3", label_entry_822);
 ptr_kernel_3_3->setAlignment(16);
 AllocaInst* ptr_kernel_5_5 = new AllocaInst(ArrayTy_18, "kernel_5_5", label_entry_822);
 ptr_kernel_5_5->setAlignment(16);
 AllocaInst* ptr_kernel_7_7 = new AllocaInst(ArrayTy_20, "kernel_7_7", label_entry_822);
 ptr_kernel_7_7->setAlignment(16);
 StoreInst* void_826 = new StoreInst(const_int32_248, ptr_retval, false, label_entry_822);
 StoreInst* void_827 = new StoreInst(int32_argc, ptr_argc_addr, false, label_entry_822);
 void_827->setAlignment(4);
 std::vector<Value*> void_828_params;
 void_828_params.push_back(other_829);
 void_828_params.push_back(other_830);
 void_828_params.push_back(other_348);
 CallInst* void_828 = CallInst::Create(func_llvm_dbg_declare, void_828_params, "", label_entry_822);
 void_828->setCallingConv(CallingConv::C);
 void_828->setTailCall(false);
 AttributeSet void_828_PAL;
 void_828->setAttributes(void_828_PAL);
 
 StoreInst* void_831 = new StoreInst(ptr_argv, ptr_argv_addr, false, label_entry_822);
 void_831->setAlignment(8);
 std::vector<Value*> void_832_params;
 void_832_params.push_back(other_833);
 void_832_params.push_back(other_834);
 void_832_params.push_back(other_348);
 CallInst* void_832 = CallInst::Create(func_llvm_dbg_declare, void_832_params, "", label_entry_822);
 void_832->setCallingConv(CallingConv::C);
 void_832->setTailCall(false);
 AttributeSet void_832_PAL;
 void_832->setAttributes(void_832_PAL);
 
 StoreInst* void_835 = new StoreInst(const_int32_248, gvar_int32_opterr, false, label_entry_822);
 void_835->setAlignment(4);
 std::vector<Value*> void_836_params;
 void_836_params.push_back(other_837);
 void_836_params.push_back(other_838);
 void_836_params.push_back(other_348);
 CallInst* void_836 = CallInst::Create(func_llvm_dbg_declare, void_836_params, "", label_entry_822);
 void_836->setCallingConv(CallingConv::C);
 void_836->setTailCall(false);
 AttributeSet void_836_PAL;
 void_836->setAttributes(void_836_PAL);
 
 StoreInst* void_839 = new StoreInst(const_int32_248, ptr_index, false, label_entry_822);
 void_839->setAlignment(4);
 std::vector<Value*> void_840_params;
 void_840_params.push_back(other_841);
 void_840_params.push_back(other_842);
 void_840_params.push_back(other_348);
 CallInst* void_840 = CallInst::Create(func_llvm_dbg_declare, void_840_params, "", label_entry_822);
 void_840->setCallingConv(CallingConv::C);
 void_840->setTailCall(false);
 AttributeSet void_840_PAL;
 void_840->setAttributes(void_840_PAL);
 
 StoreInst* void_843 = new StoreInst(const_int32_248, ptr_verbose_output, false, label_entry_822);
 void_843->setAlignment(4);
 std::vector<Value*> void_844_params;
 void_844_params.push_back(other_845);
 void_844_params.push_back(other_846);
 void_844_params.push_back(other_348);
 CallInst* void_844 = CallInst::Create(func_llvm_dbg_declare, void_844_params, "", label_entry_822);
 void_844->setCallingConv(CallingConv::C);
 void_844->setTailCall(false);
 AttributeSet void_844_PAL;
 void_844->setAttributes(void_844_PAL);
 
 StoreInst* void_847 = new StoreInst(const_int32_248, ptr_arg, false, label_entry_822);
 void_847->setAlignment(4);
 std::vector<Value*> void_848_params;
 void_848_params.push_back(other_849);
 void_848_params.push_back(other_850);
 void_848_params.push_back(other_348);
 CallInst* void_848 = CallInst::Create(func_llvm_dbg_declare, void_848_params, "", label_entry_822);
 void_848->setCallingConv(CallingConv::C);
 void_848->setTailCall(false);
 AttributeSet void_848_PAL;
 void_848->setAttributes(void_848_PAL);
 
 StoreInst* void_851 = new StoreInst(const_int32_248, ptr__size_arr, false, label_entry_822);
 void_851->setAlignment(4);
 std::vector<Value*> void_852_params;
 void_852_params.push_back(other_853);
 void_852_params.push_back(other_854);
 void_852_params.push_back(other_348);
 CallInst* void_852 = CallInst::Create(func_llvm_dbg_declare, void_852_params, "", label_entry_822);
 void_852->setCallingConv(CallingConv::C);
 void_852->setTailCall(false);
 AttributeSet void_852_PAL;
 void_852->setAttributes(void_852_PAL);
 
 StoreInst* void_855 = new StoreInst(const_int32_248, ptr__size_filter, false, label_entry_822);
 void_855->setAlignment(4);
 std::vector<Value*> void_856_params;
 void_856_params.push_back(other_857);
 void_856_params.push_back(other_858);
 void_856_params.push_back(other_348);
 CallInst* void_856 = CallInst::Create(func_llvm_dbg_declare, void_856_params, "", label_entry_822);
 void_856->setCallingConv(CallingConv::C);
 void_856->setTailCall(false);
 AttributeSet void_856_PAL;
 void_856->setAttributes(void_856_PAL);
 
 std::vector<Value*> void_859_params;
 void_859_params.push_back(other_860);
 void_859_params.push_back(other_861);
 void_859_params.push_back(other_348);
 CallInst* void_859 = CallInst::Create(func_llvm_dbg_declare, void_859_params, "", label_entry_822);
 void_859->setCallingConv(CallingConv::C);
 void_859->setTailCall(false);
 AttributeSet void_859_PAL;
 void_859->setAttributes(void_859_PAL);
 
 std::vector<Value*> void_862_params;
 void_862_params.push_back(other_863);
 void_862_params.push_back(other_864);
 void_862_params.push_back(other_348);
 CallInst* void_862 = CallInst::Create(func_llvm_dbg_declare, void_862_params, "", label_entry_822);
 void_862->setCallingConv(CallingConv::C);
 void_862->setTailCall(false);
 AttributeSet void_862_PAL;
 void_862->setAttributes(void_862_PAL);
 
 std::vector<Value*> void_865_params;
 void_865_params.push_back(other_866);
 void_865_params.push_back(other_867);
 void_865_params.push_back(other_348);
 CallInst* void_865 = CallInst::Create(func_llvm_dbg_declare, void_865_params, "", label_entry_822);
 void_865->setCallingConv(CallingConv::C);
 void_865->setTailCall(false);
 AttributeSet void_865_PAL;
 void_865->setAttributes(void_865_PAL);
 
 std::vector<Value*> void_868_params;
 void_868_params.push_back(other_869);
 void_868_params.push_back(other_870);
 void_868_params.push_back(other_348);
 CallInst* void_868 = CallInst::Create(func_llvm_dbg_declare, void_868_params, "", label_entry_822);
 void_868->setCallingConv(CallingConv::C);
 void_868->setTailCall(false);
 AttributeSet void_868_PAL;
 void_868->setAttributes(void_868_PAL);
 
 std::vector<Value*> void_871_params;
 void_871_params.push_back(other_872);
 void_871_params.push_back(other_873);
 void_871_params.push_back(other_348);
 CallInst* void_871 = CallInst::Create(func_llvm_dbg_declare, void_871_params, "", label_entry_822);
 void_871->setCallingConv(CallingConv::C);
 void_871->setTailCall(false);
 AttributeSet void_871_PAL;
 void_871->setAttributes(void_871_PAL);
 
 std::vector<Value*> void_874_params;
 void_874_params.push_back(other_875);
 void_874_params.push_back(other_876);
 void_874_params.push_back(other_348);
 CallInst* void_874 = CallInst::Create(func_llvm_dbg_declare, void_874_params, "", label_entry_822);
 void_874->setCallingConv(CallingConv::C);
 void_874->setTailCall(false);
 AttributeSet void_874_PAL;
 void_874->setAttributes(void_874_PAL);
 
 StoreInst* void_877 = new StoreInst(const_ptr_283, ptr_filename_in, false, label_entry_822);
 void_877->setAlignment(8);
 std::vector<Value*> void_878_params;
 void_878_params.push_back(other_879);
 void_878_params.push_back(other_880);
 void_878_params.push_back(other_348);
 CallInst* void_878 = CallInst::Create(func_llvm_dbg_declare, void_878_params, "", label_entry_822);
 void_878->setCallingConv(CallingConv::C);
 void_878->setTailCall(false);
 AttributeSet void_878_PAL;
 void_878->setAttributes(void_878_PAL);
 
 StoreInst* void_881 = new StoreInst(const_ptr_283, ptr_filename_out, false, label_entry_822);
 void_881->setAlignment(8);
 BranchInst::Create(label_while_cond, label_entry_822);
 
 // Block while.cond (label_while_cond)
 LoadInst* int32_883 = new LoadInst(ptr_argc_addr, "", false, label_while_cond);
 int32_883->setAlignment(4);
 LoadInst* ptr_884 = new LoadInst(ptr_argv_addr, "", false, label_while_cond);
 ptr_884->setAlignment(8);
 std::vector<Value*> int32_call_params;
 int32_call_params.push_back(int32_883);
 int32_call_params.push_back(ptr_884);
 int32_call_params.push_back(const_ptr_284);
 CallInst* int32_call = CallInst::Create(func_getopt, int32_call_params, "call", label_while_cond);
 int32_call->setCallingConv(CallingConv::C);
 int32_call->setTailCall(false);
 AttributeSet int32_call_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call->setAttributes(int32_call_PAL);
 
 StoreInst* void_885 = new StoreInst(int32_call, ptr_opt, false, label_while_cond);
 void_885->setAlignment(4);
 ICmpInst* int1_cmp_886 = new ICmpInst(*label_while_cond, ICmpInst::ICMP_NE, int32_call, const_int32_285, "cmp");
 BranchInst::Create(label_while_body, label_while_end, int1_cmp_886, label_while_cond);
 
 // Block while.body (label_while_body)
 LoadInst* int32_888 = new LoadInst(ptr_opt, "", false, label_while_body);
 int32_888->setAlignment(4);
 SwitchInst* void_889 = SwitchInst::Create(int32_888, label_sw_default, 2, label_while_body);
 void_889->addCase(const_int32_286, label_sw_bb);
 void_889->addCase(const_int32_287, label_sw_bb1);
 
 
 // Block sw.bb (label_sw_bb)
 LoadInst* ptr_890 = new LoadInst(gvar_ptr_optarg, "", false, label_sw_bb);
 ptr_890->setAlignment(8);
 StoreInst* void_891 = new StoreInst(ptr_890, ptr_filename_in, false, label_sw_bb);
 void_891->setAlignment(8);
 BranchInst::Create(label_sw_epilog, label_sw_bb);
 
 // Block sw.bb1 (label_sw_bb1)
 StoreInst* void_893 = new StoreInst(const_int32_282, ptr_verbose_output, false, label_sw_bb1);
 void_893->setAlignment(4);
 BranchInst::Create(label_sw_epilog, label_sw_bb1);
 
 // Block sw.default (label_sw_default)
 LoadInst* ptr_895 = new LoadInst(gvar_ptr_stderr, "", false, label_sw_default);
 ptr_895->setAlignment(8);
 LoadInst* ptr_896 = new LoadInst(ptr_argv_addr, "", false, label_sw_default);
 ptr_896->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx_897 = GetElementPtrInst::Create(ptr_896, const_int64_274, "arrayidx", label_sw_default);
 LoadInst* ptr_898 = new LoadInst(ptr_arrayidx_897, "", false, label_sw_default);
 ptr_898->setAlignment(8);
 std::vector<Value*> int32_call2_params;
 int32_call2_params.push_back(ptr_895);
 int32_call2_params.push_back(const_ptr_288);
 int32_call2_params.push_back(ptr_898);
 CallInst* int32_call2 = CallInst::Create(func_fprintf, int32_call2_params, "call2", label_sw_default);
 int32_call2->setCallingConv(CallingConv::C);
 int32_call2->setTailCall(false);
 AttributeSet int32_call2_PAL;
 int32_call2->setAttributes(int32_call2_PAL);
 
 CallInst* void_899 = CallInst::Create(func_exit, const_int32_282, "", label_sw_default);
 void_899->setCallingConv(CallingConv::C);
 void_899->setTailCall(false);
 AttributeSet void_899_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoReturn);
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_899_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_899->setAttributes(void_899_PAL);
 
 new UnreachableInst(mod->getContext(), label_sw_default);
 
 // Block sw.epilog (label_sw_epilog)
 BranchInst::Create(label_while_cond, label_sw_epilog);
 
 // Block while.end (label_while_end)
 LoadInst* ptr_902 = new LoadInst(ptr_filename_in, "", false, label_while_end);
 ptr_902->setAlignment(8);
 ICmpInst* int1_tobool = new ICmpInst(*label_while_end, ICmpInst::ICMP_NE, ptr_902, const_ptr_283, "tobool");
 BranchInst::Create(label_if_else, label_if_then, int1_tobool, label_while_end);
 
 // Block if.then (label_if_then)
 LoadInst* int32_904 = new LoadInst(gvar_int32_optind, "", false, label_if_then);
 int32_904->setAlignment(4);
 StoreInst* void_905 = new StoreInst(int32_904, ptr_index, false, label_if_then);
 void_905->setAlignment(4);
 BranchInst::Create(label_for_cond, label_if_then);
 
 // Block for.cond (label_for_cond)
 LoadInst* int32_907 = new LoadInst(ptr_index, "", false, label_for_cond);
 int32_907->setAlignment(4);
 LoadInst* int32_908 = new LoadInst(ptr_argc_addr, "", false, label_for_cond);
 int32_908->setAlignment(4);
 ICmpInst* int1_cmp3_909 = new ICmpInst(*label_for_cond, ICmpInst::ICMP_SLT, int32_907, int32_908, "cmp3");
 BranchInst::Create(label_for_body, label_for_end, int1_cmp3_909, label_for_cond);
 
 // Block for.body (label_for_body)
 LoadInst* int32_911 = new LoadInst(ptr_arg, "", false, label_for_body);
 int32_911->setAlignment(4);
 BinaryOperator* int32_inc = BinaryOperator::Create(Instruction::Add, int32_911, const_int32_282, "inc", label_for_body);
 StoreInst* void_912 = new StoreInst(int32_inc, ptr_arg, false, label_for_body);
 void_912->setAlignment(4);
 SwitchInst* void_913 = SwitchInst::Create(int32_911, label_sw_epilog11, 2, label_for_body);
 void_913->addCase(const_int32_248, label_sw_bb4);
 void_913->addCase(const_int32_282, label_sw_bb7);
 
 
 // Block sw.bb4 (label_sw_bb4)
 LoadInst* int32_914 = new LoadInst(ptr_index, "", false, label_sw_bb4);
 int32_914->setAlignment(4);
 CastInst* int64_idxprom = new SExtInst(int32_914, IntegerType::get(mod->getContext(), 64), "idxprom", label_sw_bb4);
 LoadInst* ptr_915 = new LoadInst(ptr_argv_addr, "", false, label_sw_bb4);
 ptr_915->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx5 = GetElementPtrInst::Create(ptr_915, int64_idxprom, "arrayidx5", label_sw_bb4);
 LoadInst* ptr_916 = new LoadInst(ptr_arrayidx5, "", false, label_sw_bb4);
 ptr_916->setAlignment(8);
 CallInst* int32_call6 = CallInst::Create(func_atoi, ptr_916, "call6", label_sw_bb4);
 int32_call6->setCallingConv(CallingConv::C);
 int32_call6->setTailCall(false);
 AttributeSet int32_call6_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call6_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call6->setAttributes(int32_call6_PAL);
 
 StoreInst* void_917 = new StoreInst(int32_call6, ptr__size_arr, false, label_sw_bb4);
 void_917->setAlignment(4);
 BranchInst::Create(label_sw_epilog11, label_sw_bb4);
 
 // Block sw.bb7 (label_sw_bb7)
 LoadInst* int32_919 = new LoadInst(ptr_index, "", false, label_sw_bb7);
 int32_919->setAlignment(4);
 CastInst* int64_idxprom8 = new SExtInst(int32_919, IntegerType::get(mod->getContext(), 64), "idxprom8", label_sw_bb7);
 LoadInst* ptr_920 = new LoadInst(ptr_argv_addr, "", false, label_sw_bb7);
 ptr_920->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx9 = GetElementPtrInst::Create(ptr_920, int64_idxprom8, "arrayidx9", label_sw_bb7);
 LoadInst* ptr_921 = new LoadInst(ptr_arrayidx9, "", false, label_sw_bb7);
 ptr_921->setAlignment(8);
 CallInst* int32_call10 = CallInst::Create(func_atoi, ptr_921, "call10", label_sw_bb7);
 int32_call10->setCallingConv(CallingConv::C);
 int32_call10->setTailCall(false);
 AttributeSet int32_call10_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call10_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call10->setAttributes(int32_call10_PAL);
 
 StoreInst* void_922 = new StoreInst(int32_call10, ptr__size_filter, false, label_sw_bb7);
 void_922->setAlignment(4);
 BranchInst::Create(label_sw_epilog11, label_sw_bb7);
 
 // Block sw.epilog11 (label_sw_epilog11)
 BranchInst::Create(label_for_inc_823, label_sw_epilog11);
 
 // Block for.inc (label_for_inc_823)
 LoadInst* int32_925 = new LoadInst(ptr_index, "", false, label_for_inc_823);
 int32_925->setAlignment(4);
 BinaryOperator* int32_inc12 = BinaryOperator::Create(Instruction::Add, int32_925, const_int32_282, "inc12", label_for_inc_823);
 StoreInst* void_926 = new StoreInst(int32_inc12, ptr_index, false, label_for_inc_823);
 void_926->setAlignment(4);
 BranchInst::Create(label_for_cond, label_for_inc_823);
 
 // Block for.end (label_for_end)
 LoadInst* int32_928 = new LoadInst(ptr__size_arr, "", false, label_for_end);
 int32_928->setAlignment(4);
 StoreInst* void_929 = new StoreInst(int32_928, ptr_ncols, false, label_for_end);
 void_929->setAlignment(4);
 StoreInst* void_930 = new StoreInst(int32_928, ptr_nrows, false, label_for_end);
 void_930->setAlignment(4);
 StoreInst* void_931 = new StoreInst(const_ptr_289, ptr_filename_in, false, label_for_end);
 void_931->setAlignment(8);
 LoadInst* int32_932 = new LoadInst(ptr_nrows, "", false, label_for_end);
 int32_932->setAlignment(4);
 CastInst* int64_conv = new ZExtInst(int32_932, IntegerType::get(mod->getContext(), 64), "conv", label_for_end);
 LoadInst* int32_933 = new LoadInst(ptr_ncols, "", false, label_for_end);
 int32_933->setAlignment(4);
 CastInst* int64_conv13 = new ZExtInst(int32_933, IntegerType::get(mod->getContext(), 64), "conv13", label_for_end);
 std::vector<Value*> ptr_call14_params;
 ptr_call14_params.push_back(int64_conv);
 ptr_call14_params.push_back(int64_conv13);
 ptr_call14_params.push_back(const_int8_290);
 CallInst* ptr_call14 = CallInst::Create(func_create_array_2d, ptr_call14_params, "call14", label_for_end);
 ptr_call14->setCallingConv(CallingConv::C);
 ptr_call14->setTailCall(false);
 AttributeSet ptr_call14_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call14_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call14->setAttributes(ptr_call14_PAL);
 
 StoreInst* void_934 = new StoreInst(ptr_call14, ptr_data_input, false, label_for_end);
 void_934->setAlignment(8);
 LoadInst* int32_935 = new LoadInst(ptr_nrows, "", false, label_for_end);
 int32_935->setAlignment(4);
 CastInst* int64_conv15 = new ZExtInst(int32_935, IntegerType::get(mod->getContext(), 64), "conv15", label_for_end);
 LoadInst* int32_936 = new LoadInst(ptr_ncols, "", false, label_for_end);
 int32_936->setAlignment(4);
 CastInst* int64_conv16 = new ZExtInst(int32_936, IntegerType::get(mod->getContext(), 64), "conv16", label_for_end);
 std::vector<Value*> ptr_call17_params;
 ptr_call17_params.push_back(int64_conv15);
 ptr_call17_params.push_back(int64_conv16);
 ptr_call17_params.push_back(const_int8_279);
 CallInst* ptr_call17 = CallInst::Create(func_create_array_2d, ptr_call17_params, "call17", label_for_end);
 ptr_call17->setCallingConv(CallingConv::C);
 ptr_call17->setTailCall(false);
 AttributeSet ptr_call17_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call17_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call17->setAttributes(ptr_call17_PAL);
 
 StoreInst* void_937 = new StoreInst(ptr_call17, ptr_data_output, false, label_for_end);
 void_937->setAlignment(8);
 BranchInst::Create(label_if_end38, label_for_end);
 
 // Block if.else (label_if_else)
 LoadInst* ptr_939 = new LoadInst(ptr_filename_in, "", false, label_if_else);
 ptr_939->setAlignment(8);
 std::vector<Value*> int32_call18_params;
 int32_call18_params.push_back(ptr_data_input);
 int32_call18_params.push_back(ptr_ncols);
 int32_call18_params.push_back(ptr_nrows);
 int32_call18_params.push_back(ptr_nchannels);
 int32_call18_params.push_back(ptr_939);
 CallInst* int32_call18 = CallInst::Create(func_jpeg_decompress, int32_call18_params, "call18", label_if_else);
 int32_call18->setCallingConv(CallingConv::C);
 int32_call18->setTailCall(false);
 AttributeSet int32_call18_PAL;
 int32_call18->setAttributes(int32_call18_PAL);
 
 ICmpInst* int1_tobool19 = new ICmpInst(*label_if_else, ICmpInst::ICMP_NE, int32_call18, const_int32_248, "tobool19");
 BranchInst::Create(label_if_then20, label_if_end, int1_tobool19, label_if_else);
 
 // Block if.then20 (label_if_then20)
 LoadInst* ptr_941 = new LoadInst(gvar_ptr_stderr, "", false, label_if_then20);
 ptr_941->setAlignment(8);
 std::vector<Value*> int32_call21_params;
 int32_call21_params.push_back(ptr_941);
 int32_call21_params.push_back(const_ptr_291);
 CallInst* int32_call21 = CallInst::Create(func_fprintf, int32_call21_params, "call21", label_if_then20);
 int32_call21->setCallingConv(CallingConv::C);
 int32_call21->setTailCall(false);
 AttributeSet int32_call21_PAL;
 int32_call21->setAttributes(int32_call21_PAL);
 
 StoreInst* void_942 = new StoreInst(const_int32_282, ptr_retval, false, label_if_then20);
 BranchInst::Create(label_return, label_if_then20);
 
 // Block if.end (label_if_end)
 LoadInst* int32_944 = new LoadInst(gvar_int32_optind, "", false, label_if_end);
 int32_944->setAlignment(4);
 StoreInst* void_945 = new StoreInst(int32_944, ptr_index, false, label_if_end);
 void_945->setAlignment(4);
 BranchInst::Create(label_for_cond22, label_if_end);
 
 // Block for.cond22 (label_for_cond22)
 LoadInst* int32_947 = new LoadInst(ptr_index, "", false, label_for_cond22);
 int32_947->setAlignment(4);
 LoadInst* int32_948 = new LoadInst(ptr_argc_addr, "", false, label_for_cond22);
 int32_948->setAlignment(4);
 ICmpInst* int1_cmp23 = new ICmpInst(*label_for_cond22, ICmpInst::ICMP_SLT, int32_947, int32_948, "cmp23");
 BranchInst::Create(label_for_body25, label_for_end34_825, int1_cmp23, label_for_cond22);
 
 // Block for.body25 (label_for_body25)
 LoadInst* int32_950 = new LoadInst(ptr_arg, "", false, label_for_body25);
 int32_950->setAlignment(4);
 BinaryOperator* int32_inc26 = BinaryOperator::Create(Instruction::Add, int32_950, const_int32_282, "inc26", label_for_body25);
 StoreInst* void_951 = new StoreInst(int32_inc26, ptr_arg, false, label_for_body25);
 void_951->setAlignment(4);
 SwitchInst* void_952 = SwitchInst::Create(int32_950, label_sw_epilog31, 1, label_for_body25);
 void_952->addCase(const_int32_248, label_sw_bb27);
 
 
 // Block sw.bb27 (label_sw_bb27)
 LoadInst* int32_953 = new LoadInst(ptr_index, "", false, label_sw_bb27);
 int32_953->setAlignment(4);
 CastInst* int64_idxprom28 = new SExtInst(int32_953, IntegerType::get(mod->getContext(), 64), "idxprom28", label_sw_bb27);
 LoadInst* ptr_954 = new LoadInst(ptr_argv_addr, "", false, label_sw_bb27);
 ptr_954->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx29 = GetElementPtrInst::Create(ptr_954, int64_idxprom28, "arrayidx29", label_sw_bb27);
 LoadInst* ptr_955 = new LoadInst(ptr_arrayidx29, "", false, label_sw_bb27);
 ptr_955->setAlignment(8);
 CallInst* int32_call30 = CallInst::Create(func_atoi, ptr_955, "call30", label_sw_bb27);
 int32_call30->setCallingConv(CallingConv::C);
 int32_call30->setTailCall(false);
 AttributeSet int32_call30_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call30_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call30->setAttributes(int32_call30_PAL);
 
 StoreInst* void_956 = new StoreInst(int32_call30, ptr__size_filter, false, label_sw_bb27);
 void_956->setAlignment(4);
 BranchInst::Create(label_sw_epilog31, label_sw_bb27);
 
 // Block sw.epilog31 (label_sw_epilog31)
 BranchInst::Create(label_for_inc32_824, label_sw_epilog31);
 
 // Block for.inc32 (label_for_inc32_824)
 LoadInst* int32_959 = new LoadInst(ptr_index, "", false, label_for_inc32_824);
 int32_959->setAlignment(4);
 BinaryOperator* int32_inc33 = BinaryOperator::Create(Instruction::Add, int32_959, const_int32_282, "inc33", label_for_inc32_824);
 StoreInst* void_960 = new StoreInst(int32_inc33, ptr_index, false, label_for_inc32_824);
 void_960->setAlignment(4);
 BranchInst::Create(label_for_cond22, label_for_inc32_824);
 
 // Block for.end34 (label_for_end34_825)
 LoadInst* int32_962 = new LoadInst(ptr_nrows, "", false, label_for_end34_825);
 int32_962->setAlignment(4);
 CastInst* int64_conv35 = new ZExtInst(int32_962, IntegerType::get(mod->getContext(), 64), "conv35", label_for_end34_825);
 LoadInst* int32_963 = new LoadInst(ptr_ncols, "", false, label_for_end34_825);
 int32_963->setAlignment(4);
 CastInst* int64_conv36 = new ZExtInst(int32_963, IntegerType::get(mod->getContext(), 64), "conv36", label_for_end34_825);
 std::vector<Value*> ptr_call37_params;
 ptr_call37_params.push_back(int64_conv35);
 ptr_call37_params.push_back(int64_conv36);
 ptr_call37_params.push_back(const_int8_279);
 CallInst* ptr_call37 = CallInst::Create(func_create_array_2d, ptr_call37_params, "call37", label_for_end34_825);
 ptr_call37->setCallingConv(CallingConv::C);
 ptr_call37->setTailCall(false);
 AttributeSet ptr_call37_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call37_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call37->setAttributes(ptr_call37_PAL);
 
 StoreInst* void_964 = new StoreInst(ptr_call37, ptr_data_output, false, label_for_end34_825);
 void_964->setAlignment(8);
 BranchInst::Create(label_if_end38, label_for_end34_825);
 
 // Block if.end38 (label_if_end38)
 LoadInst* ptr_966 = new LoadInst(ptr_filename_in, "", false, label_if_end38);
 ptr_966->setAlignment(8);
 CallInst* int64_call39 = CallInst::Create(func_strlen, ptr_966, "call39", label_if_end38);
 int64_call39->setCallingConv(CallingConv::C);
 int64_call39->setTailCall(false);
 AttributeSet int64_call39_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadOnly);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int64_call39_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int64_call39->setAttributes(int64_call39_PAL);
 
 BinaryOperator* int64_add = BinaryOperator::Create(Instruction::Add, int64_call39, const_int64_292, "add", label_if_end38);
 BinaryOperator* int64_add40 = BinaryOperator::Create(Instruction::Add, int64_add, const_int64_278, "add40", label_if_end38);
 std::vector<Value*> ptr_call41_params;
 ptr_call41_params.push_back(const_int64_278);
 ptr_call41_params.push_back(int64_add40);
 CallInst* ptr_call41 = CallInst::Create(func_calloc, ptr_call41_params, "call41", label_if_end38);
 ptr_call41->setCallingConv(CallingConv::C);
 ptr_call41->setTailCall(false);
 AttributeSet ptr_call41_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call41_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call41->setAttributes(ptr_call41_PAL);

StoreInst* void_967 = new StoreInst(ptr_call41, ptr_filename_out, false, label_if_end38);
void_967->setAlignment(8);
LoadInst* ptr_968 = new LoadInst(ptr_filename_out, "", false, label_if_end38);
ptr_968->setAlignment(8);
LoadInst* ptr_969 = new LoadInst(ptr_filename_in, "", false, label_if_end38);
ptr_969->setAlignment(8);
LoadInst* ptr_970 = new LoadInst(ptr_filename_in, "", false, label_if_end38);
ptr_970->setAlignment(8);
CallInst* int64_call42 = CallInst::Create(func_strlen, ptr_970, "call42", label_if_end38);
int64_call42->setCallingConv(CallingConv::C);
int64_call42->setTailCall(false);
AttributeSet int64_call42_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int64_call42_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int64_call42->setAttributes(int64_call42_PAL);

std::vector<Value*> ptr_call43_params;
ptr_call43_params.push_back(ptr_968);
ptr_call43_params.push_back(ptr_969);
ptr_call43_params.push_back(int64_call42);
CallInst* ptr_call43 = CallInst::Create(func_strncpy, ptr_call43_params, "call43", label_if_end38);
ptr_call43->setCallingConv(CallingConv::C);
ptr_call43->setTailCall(false);
AttributeSet ptr_call43_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call43_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call43->setAttributes(ptr_call43_PAL);

LoadInst* ptr_971 = new LoadInst(ptr_filename_out, "", false, label_if_end38);
ptr_971->setAlignment(8);
std::vector<Value*> ptr_call44_params;
ptr_call44_params.push_back(ptr_971);
ptr_call44_params.push_back(const_ptr_293);
CallInst* ptr_call44 = CallInst::Create(func_strcat, ptr_call44_params, "call44", label_if_end38);
ptr_call44->setCallingConv(CallingConv::C);
ptr_call44->setTailCall(false);
AttributeSet ptr_call44_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call44_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call44->setAttributes(ptr_call44_PAL);

std::vector<Value*> void_972_params;
void_972_params.push_back(other_973);
void_972_params.push_back(other_974);
void_972_params.push_back(other_348);
CallInst* void_972 = CallInst::Create(func_llvm_dbg_declare, void_972_params, "", label_if_end38);
void_972->setCallingConv(CallingConv::C);
void_972->setTailCall(false);
AttributeSet void_972_PAL;
void_972->setAttributes(void_972_PAL);

StoreInst* void_975 = new StoreInst(const_int32_248, ptr_i, false, label_if_end38);
void_975->setAlignment(4);
std::vector<Value*> void_976_params;
void_976_params.push_back(other_977);
void_976_params.push_back(other_978);
void_976_params.push_back(other_348);
CallInst* void_976 = CallInst::Create(func_llvm_dbg_declare, void_976_params, "", label_if_end38);
void_976->setCallingConv(CallingConv::C);
void_976->setTailCall(false);
AttributeSet void_976_PAL;
void_976->setAttributes(void_976_PAL);

StoreInst* void_979 = new StoreInst(const_int32_248, ptr_j, false, label_if_end38);
void_979->setAlignment(4);
std::vector<Value*> void_980_params;
void_980_params.push_back(other_981);
void_980_params.push_back(other_982);
void_980_params.push_back(other_348);
CallInst* void_980 = CallInst::Create(func_llvm_dbg_declare, void_980_params, "", label_if_end38);
void_980->setCallingConv(CallingConv::C);
void_980->setTailCall(false);
AttributeSet void_980_PAL;
void_980->setAttributes(void_980_PAL);

CastInst* ptr_983 = new BitCastInst(ptr_kernel_3_3, PointerTy_2, "", label_if_end38);
std::vector<Value*> void_984_params;
void_984_params.push_back(ptr_983);
void_984_params.push_back(const_ptr_294);
void_984_params.push_back(const_int64_295);
void_984_params.push_back(const_int32_296);
void_984_params.push_back(const_int1_297);
CallInst* void_984 = CallInst::Create(func_llvm_memcpy_p0i8_p0i8_i64, void_984_params, "", label_if_end38);
void_984->setCallingConv(CallingConv::C);
void_984->setTailCall(false);
AttributeSet void_984_PAL;
void_984->setAttributes(void_984_PAL);

std::vector<Value*> void_985_params;
void_985_params.push_back(other_986);
void_985_params.push_back(other_987);
void_985_params.push_back(other_348);
CallInst* void_985 = CallInst::Create(func_llvm_dbg_declare, void_985_params, "", label_if_end38);
void_985->setCallingConv(CallingConv::C);
void_985->setTailCall(false);
AttributeSet void_985_PAL;
void_985->setAttributes(void_985_PAL);

CastInst* ptr_988 = new BitCastInst(ptr_kernel_5_5, PointerTy_2, "", label_if_end38);
std::vector<Value*> void_989_params;
void_989_params.push_back(ptr_988);
void_989_params.push_back(const_ptr_298);
void_989_params.push_back(const_int64_299);
void_989_params.push_back(const_int32_296);
void_989_params.push_back(const_int1_297);
CallInst* void_989 = CallInst::Create(func_llvm_memcpy_p0i8_p0i8_i64, void_989_params, "", label_if_end38);
void_989->setCallingConv(CallingConv::C);
void_989->setTailCall(false);
AttributeSet void_989_PAL;
void_989->setAttributes(void_989_PAL);

std::vector<Value*> void_990_params;
void_990_params.push_back(other_991);
void_990_params.push_back(other_992);
void_990_params.push_back(other_348);
CallInst* void_990 = CallInst::Create(func_llvm_dbg_declare, void_990_params, "", label_if_end38);
void_990->setCallingConv(CallingConv::C);
void_990->setTailCall(false);
AttributeSet void_990_PAL;
void_990->setAttributes(void_990_PAL);

CastInst* ptr_993 = new BitCastInst(ptr_kernel_7_7, PointerTy_2, "", label_if_end38);
std::vector<Value*> void_994_params;
void_994_params.push_back(ptr_993);
void_994_params.push_back(const_ptr_300);
void_994_params.push_back(const_int64_301);
void_994_params.push_back(const_int32_296);
void_994_params.push_back(const_int1_297);
CallInst* void_994 = CallInst::Create(func_llvm_memcpy_p0i8_p0i8_i64, void_994_params, "", label_if_end38);
void_994->setCallingConv(CallingConv::C);
void_994->setTailCall(false);
AttributeSet void_994_PAL;
void_994->setAttributes(void_994_PAL);

LoadInst* int32_995 = new LoadInst(ptr__size_filter, "", false, label_if_end38);
int32_995->setAlignment(4);
ICmpInst* int1_cmp45 = new ICmpInst(*label_if_end38, ICmpInst::ICMP_EQ, int32_995, const_int32_302, "cmp45");
BranchInst::Create(label_if_then47, label_if_else49, int1_cmp45, label_if_end38);

// Block if.then47 (label_if_then47)
LoadInst* ptr_997 = new LoadInst(ptr_data_input, "", false, label_if_then47);
ptr_997->setAlignment(8);
LoadInst* ptr_998 = new LoadInst(ptr_data_output, "", false, label_if_then47);
ptr_998->setAlignment(8);
std::vector<Value*> ptr_arrayidx48_indices;
ptr_arrayidx48_indices.push_back(const_int32_248);
ptr_arrayidx48_indices.push_back(const_int64_274);
Instruction* ptr_arrayidx48 = GetElementPtrInst::Create(ptr_kernel_3_3, ptr_arrayidx48_indices, "arrayidx48", label_if_then47);
LoadInst* int32_999 = new LoadInst(ptr_ncols, "", false, label_if_then47);
int32_999->setAlignment(4);
LoadInst* int32_1000 = new LoadInst(ptr_nrows, "", false, label_if_then47);
int32_1000->setAlignment(4);
std::vector<Value*> void_1001_params;
void_1001_params.push_back(ptr_997);
void_1001_params.push_back(ptr_998);
void_1001_params.push_back(ptr_arrayidx48);
void_1001_params.push_back(const_int32_302);
void_1001_params.push_back(int32_999);
void_1001_params.push_back(int32_1000);
CallInst* void_1001 = CallInst::Create(func_convolve_loop_nest, void_1001_params, "", label_if_then47);
void_1001->setCallingConv(CallingConv::C);
void_1001->setTailCall(false);
AttributeSet void_1001_PAL;
void_1001->setAttributes(void_1001_PAL);

BranchInst::Create(label_if_end65, label_if_then47);

// Block if.else49 (label_if_else49)
LoadInst* int32_1003 = new LoadInst(ptr__size_filter, "", false, label_if_else49);
int32_1003->setAlignment(4);
ICmpInst* int1_cmp50 = new ICmpInst(*label_if_else49, ICmpInst::ICMP_EQ, int32_1003, const_int32_303, "cmp50");
BranchInst::Create(label_if_then52, label_if_else54, int1_cmp50, label_if_else49);

// Block if.then52 (label_if_then52)
LoadInst* ptr_1005 = new LoadInst(ptr_data_input, "", false, label_if_then52);
ptr_1005->setAlignment(8);
LoadInst* ptr_1006 = new LoadInst(ptr_data_output, "", false, label_if_then52);
ptr_1006->setAlignment(8);
std::vector<Value*> ptr_arrayidx53_indices;
ptr_arrayidx53_indices.push_back(const_int32_248);
ptr_arrayidx53_indices.push_back(const_int64_274);
Instruction* ptr_arrayidx53 = GetElementPtrInst::Create(ptr_kernel_5_5, ptr_arrayidx53_indices, "arrayidx53", label_if_then52);
LoadInst* int32_1007 = new LoadInst(ptr_ncols, "", false, label_if_then52);
int32_1007->setAlignment(4);
LoadInst* int32_1008 = new LoadInst(ptr_nrows, "", false, label_if_then52);
int32_1008->setAlignment(4);
std::vector<Value*> void_1009_params;
void_1009_params.push_back(ptr_1005);
void_1009_params.push_back(ptr_1006);
void_1009_params.push_back(ptr_arrayidx53);
void_1009_params.push_back(const_int32_303);
void_1009_params.push_back(int32_1007);
void_1009_params.push_back(int32_1008);
CallInst* void_1009 = CallInst::Create(func_convolve_loop_nest, void_1009_params, "", label_if_then52);
void_1009->setCallingConv(CallingConv::C);
void_1009->setTailCall(false);
AttributeSet void_1009_PAL;
void_1009->setAttributes(void_1009_PAL);

BranchInst::Create(label_if_end64, label_if_then52);

// Block if.else54 (label_if_else54)
LoadInst* int32_1011 = new LoadInst(ptr__size_filter, "", false, label_if_else54);
int32_1011->setAlignment(4);
ICmpInst* int1_cmp55 = new ICmpInst(*label_if_else54, ICmpInst::ICMP_EQ, int32_1011, const_int32_304, "cmp55");
BranchInst::Create(label_if_then57, label_if_else59, int1_cmp55, label_if_else54);

// Block if.then57 (label_if_then57)
LoadInst* ptr_1013 = new LoadInst(ptr_data_input, "", false, label_if_then57);
ptr_1013->setAlignment(8);
LoadInst* ptr_1014 = new LoadInst(ptr_data_output, "", false, label_if_then57);
ptr_1014->setAlignment(8);
std::vector<Value*> ptr_arrayidx58_indices;
ptr_arrayidx58_indices.push_back(const_int32_248);
ptr_arrayidx58_indices.push_back(const_int64_274);
Instruction* ptr_arrayidx58 = GetElementPtrInst::Create(ptr_kernel_7_7, ptr_arrayidx58_indices, "arrayidx58", label_if_then57);
LoadInst* int32_1015 = new LoadInst(ptr_ncols, "", false, label_if_then57);
int32_1015->setAlignment(4);
LoadInst* int32_1016 = new LoadInst(ptr_nrows, "", false, label_if_then57);
int32_1016->setAlignment(4);
std::vector<Value*> void_1017_params;
void_1017_params.push_back(ptr_1013);
void_1017_params.push_back(ptr_1014);
void_1017_params.push_back(ptr_arrayidx58);
void_1017_params.push_back(const_int32_304);
void_1017_params.push_back(int32_1015);
void_1017_params.push_back(int32_1016);
CallInst* void_1017 = CallInst::Create(func_convolve_loop_nest, void_1017_params, "", label_if_then57);
void_1017->setCallingConv(CallingConv::C);
void_1017->setTailCall(false);
AttributeSet void_1017_PAL;
void_1017->setAttributes(void_1017_PAL);

BranchInst::Create(label_if_end63, label_if_then57);

// Block if.else59 (label_if_else59)
CallInst* int32_call60 = CallInst::Create(func_printf, const_ptr_305, "call60", label_if_else59);
int32_call60->setCallingConv(CallingConv::C);
int32_call60->setTailCall(false);
AttributeSet int32_call60_PAL;
int32_call60->setAttributes(int32_call60_PAL);

LoadInst* int32_1019 = new LoadInst(ptr_nrows, "", false, label_if_else59);
int32_1019->setAlignment(4);
CastInst* int64_conv61 = new ZExtInst(int32_1019, IntegerType::get(mod->getContext(), 64), "conv61", label_if_else59);
LoadInst* ptr_1020 = new LoadInst(ptr_data_input, "", false, label_if_else59);
ptr_1020->setAlignment(8);
std::vector<Value*> void_1021_params;
void_1021_params.push_back(int64_conv61);
void_1021_params.push_back(ptr_1020);
CallInst* void_1021 = CallInst::Create(func_free_array_2d, void_1021_params, "", label_if_else59);
void_1021->setCallingConv(CallingConv::C);
void_1021->setTailCall(false);
AttributeSet void_1021_PAL;
void_1021->setAttributes(void_1021_PAL);

LoadInst* int32_1022 = new LoadInst(ptr_nrows, "", false, label_if_else59);
int32_1022->setAlignment(4);
CastInst* int64_conv62 = new ZExtInst(int32_1022, IntegerType::get(mod->getContext(), 64), "conv62", label_if_else59);
LoadInst* ptr_1023 = new LoadInst(ptr_data_output, "", false, label_if_else59);
ptr_1023->setAlignment(8);
std::vector<Value*> void_1024_params;
void_1024_params.push_back(int64_conv62);
void_1024_params.push_back(ptr_1023);
CallInst* void_1024 = CallInst::Create(func_free_array_2d, void_1024_params, "", label_if_else59);
void_1024->setCallingConv(CallingConv::C);
void_1024->setTailCall(false);
AttributeSet void_1024_PAL;
void_1024->setAttributes(void_1024_PAL);

StoreInst* void_1025 = new StoreInst(const_int32_282, ptr_retval, false, label_if_else59);
BranchInst::Create(label_return, label_if_else59);

// Block if.end63 (label_if_end63)
BranchInst::Create(label_if_end64, label_if_end63);

// Block if.end64 (label_if_end64)
BranchInst::Create(label_if_end65, label_if_end64);

// Block if.end65 (label_if_end65)
LoadInst* int32_1029 = new LoadInst(ptr_verbose_output, "", false, label_if_end65);
int32_1029->setAlignment(4);
ICmpInst* int1_tobool66 = new ICmpInst(*label_if_end65, ICmpInst::ICMP_NE, int32_1029, const_int32_248, "tobool66");
BranchInst::Create(label_if_then67, label_if_end89, int1_tobool66, label_if_end65);

// Block if.then67 (label_if_then67)
StoreInst* void_1031 = new StoreInst(const_int32_248, ptr_j, false, label_if_then67);
void_1031->setAlignment(4);
BranchInst::Create(label_for_cond68, label_if_then67);

// Block for.cond68 (label_for_cond68)
LoadInst* int32_1033 = new LoadInst(ptr_j, "", false, label_for_cond68);
int32_1033->setAlignment(4);
LoadInst* int32_1034 = new LoadInst(ptr__size_arr, "", false, label_for_cond68);
int32_1034->setAlignment(4);
ICmpInst* int1_cmp69 = new ICmpInst(*label_for_cond68, ICmpInst::ICMP_SLT, int32_1033, int32_1034, "cmp69");
BranchInst::Create(label_for_body71, label_for_end88, int1_cmp69, label_for_cond68);

// Block for.body71 (label_for_body71)
StoreInst* void_1036 = new StoreInst(const_int32_248, ptr_i, false, label_for_body71);
void_1036->setAlignment(4);
BranchInst::Create(label_for_cond72, label_for_body71);

// Block for.cond72 (label_for_cond72)
LoadInst* int32_1038 = new LoadInst(ptr_i, "", false, label_for_cond72);
int32_1038->setAlignment(4);
LoadInst* int32_1039 = new LoadInst(ptr__size_arr, "", false, label_for_cond72);
int32_1039->setAlignment(4);
ICmpInst* int1_cmp73 = new ICmpInst(*label_for_cond72, ICmpInst::ICMP_SLT, int32_1038, int32_1039, "cmp73");
BranchInst::Create(label_for_body75, label_for_end84, int1_cmp73, label_for_cond72);

// Block for.body75 (label_for_body75)
LoadInst* int32_1041 = new LoadInst(ptr_j, "", false, label_for_body75);
int32_1041->setAlignment(4);
CastInst* int64_idxprom76 = new SExtInst(int32_1041, IntegerType::get(mod->getContext(), 64), "idxprom76", label_for_body75);
LoadInst* int32_1042 = new LoadInst(ptr_i, "", false, label_for_body75);
int32_1042->setAlignment(4);
CastInst* int64_idxprom77 = new SExtInst(int32_1042, IntegerType::get(mod->getContext(), 64), "idxprom77", label_for_body75);
LoadInst* ptr_1043 = new LoadInst(ptr_data_output, "", false, label_for_body75);
ptr_1043->setAlignment(8);
GetElementPtrInst* ptr_arrayidx78 = GetElementPtrInst::Create(ptr_1043, int64_idxprom77, "arrayidx78", label_for_body75);
LoadInst* ptr_1044 = new LoadInst(ptr_arrayidx78, "", false, label_for_body75);
ptr_1044->setAlignment(8);
GetElementPtrInst* ptr_arrayidx79 = GetElementPtrInst::Create(ptr_1044, int64_idxprom76, "arrayidx79", label_for_body75);
LoadInst* int8_1045 = new LoadInst(ptr_arrayidx79, "", false, label_for_body75);
int8_1045->setAlignment(1);
CastInst* int32_conv80 = new ZExtInst(int8_1045, IntegerType::get(mod->getContext(), 32), "conv80", label_for_body75);
std::vector<Value*> int32_call81_params;
int32_call81_params.push_back(const_ptr_306);
int32_call81_params.push_back(int32_conv80);
CallInst* int32_call81 = CallInst::Create(func_printf, int32_call81_params, "call81", label_for_body75);
int32_call81->setCallingConv(CallingConv::C);
int32_call81->setTailCall(false);
AttributeSet int32_call81_PAL;
int32_call81->setAttributes(int32_call81_PAL);

BranchInst::Create(label_for_inc82, label_for_body75);

// Block for.inc82 (label_for_inc82)
LoadInst* int32_1047 = new LoadInst(ptr_i, "", false, label_for_inc82);
int32_1047->setAlignment(4);
BinaryOperator* int32_inc83 = BinaryOperator::Create(Instruction::Add, int32_1047, const_int32_282, "inc83", label_for_inc82);
StoreInst* void_1048 = new StoreInst(int32_inc83, ptr_i, false, label_for_inc82);
void_1048->setAlignment(4);
BranchInst::Create(label_for_cond72, label_for_inc82);

// Block for.end84 (label_for_end84)
CallInst* int32_call85 = CallInst::Create(func_printf, const_ptr_307, "call85", label_for_end84);
int32_call85->setCallingConv(CallingConv::C);
int32_call85->setTailCall(false);
AttributeSet int32_call85_PAL;
int32_call85->setAttributes(int32_call85_PAL);

BranchInst::Create(label_for_inc86, label_for_end84);

// Block for.inc86 (label_for_inc86)
LoadInst* int32_1051 = new LoadInst(ptr_j, "", false, label_for_inc86);
int32_1051->setAlignment(4);
BinaryOperator* int32_inc87 = BinaryOperator::Create(Instruction::Add, int32_1051, const_int32_282, "inc87", label_for_inc86);
StoreInst* void_1052 = new StoreInst(int32_inc87, ptr_j, false, label_for_inc86);
void_1052->setAlignment(4);
BranchInst::Create(label_for_cond68, label_for_inc86);

// Block for.end88 (label_for_end88)
BranchInst::Create(label_if_end89, label_for_end88);

// Block if.end89 (label_if_end89)
LoadInst* ptr_1055 = new LoadInst(ptr_data_output, "", false, label_if_end89);
ptr_1055->setAlignment(8);
LoadInst* int32_1056 = new LoadInst(ptr_ncols, "", false, label_if_end89);
int32_1056->setAlignment(4);
LoadInst* int32_1057 = new LoadInst(ptr_nrows, "", false, label_if_end89);
int32_1057->setAlignment(4);
LoadInst* ptr_1058 = new LoadInst(ptr_filename_out, "", false, label_if_end89);
ptr_1058->setAlignment(8);
std::vector<Value*> int32_call90_params;
int32_call90_params.push_back(ptr_1055);
int32_call90_params.push_back(int32_1056);
int32_call90_params.push_back(int32_1057);
int32_call90_params.push_back(const_int32_282);
int32_call90_params.push_back(ptr_1058);
CallInst* int32_call90 = CallInst::Create(func_jpeg_compress, int32_call90_params, "call90", label_if_end89);
int32_call90->setCallingConv(CallingConv::C);
int32_call90->setTailCall(false);
AttributeSet int32_call90_PAL;
int32_call90->setAttributes(int32_call90_PAL);

LoadInst* int32_1059 = new LoadInst(ptr_nrows, "", false, label_if_end89);
int32_1059->setAlignment(4);
CastInst* int64_conv91 = new ZExtInst(int32_1059, IntegerType::get(mod->getContext(), 64), "conv91", label_if_end89);
LoadInst* ptr_1060 = new LoadInst(ptr_data_input, "", false, label_if_end89);
ptr_1060->setAlignment(8);
std::vector<Value*> void_1061_params;
void_1061_params.push_back(int64_conv91);
void_1061_params.push_back(ptr_1060);
CallInst* void_1061 = CallInst::Create(func_free_array_2d, void_1061_params, "", label_if_end89);
void_1061->setCallingConv(CallingConv::C);
void_1061->setTailCall(false);
AttributeSet void_1061_PAL;
void_1061->setAttributes(void_1061_PAL);

LoadInst* int32_1062 = new LoadInst(ptr_nrows, "", false, label_if_end89);
int32_1062->setAlignment(4);
CastInst* int64_conv92 = new ZExtInst(int32_1062, IntegerType::get(mod->getContext(), 64), "conv92", label_if_end89);
LoadInst* ptr_1063 = new LoadInst(ptr_data_output, "", false, label_if_end89);
ptr_1063->setAlignment(8);
std::vector<Value*> void_1064_params;
void_1064_params.push_back(int64_conv92);
void_1064_params.push_back(ptr_1063);
CallInst* void_1064 = CallInst::Create(func_free_array_2d, void_1064_params, "", label_if_end89);
void_1064->setCallingConv(CallingConv::C);
void_1064->setTailCall(false);
AttributeSet void_1064_PAL;
void_1064->setAttributes(void_1064_PAL);

StoreInst* void_1065 = new StoreInst(const_int32_248, ptr_retval, false, label_if_end89);
BranchInst::Create(label_return, label_if_end89);

// Block return (label_return)
LoadInst* int32_1067 = new LoadInst(ptr_retval, "", false, label_return);
ReturnInst::Create(mod->getContext(), int32_1067, label_return);

}

// Function: convolve_hw_use_accelerator (func_convolve_hw_use_accelerator)
{
 Function::arg_iterator args = func_convolve_hw_use_accelerator->arg_begin();
 Value* int32_filter_size = args++;
 int32_filter_size->setName("filter_size");
 Value* int32_nx = args++;
 int32_nx->setName("nx");
 Value* int32_ny = args++;
 int32_ny->setName("ny");
 
 BasicBlock* label_entry_1069 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_then_1070 = BasicBlock::Create(mod->getContext(), "if.then",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_end_1071 = BasicBlock::Create(mod->getContext(), "if.end",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_then3 = BasicBlock::Create(mod->getContext(), "if.then3",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_land_lhs_true = BasicBlock::Create(mod->getContext(), "land.lhs.true",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_then8 = BasicBlock::Create(mod->getContext(), "if.then8",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_then11 = BasicBlock::Create(mod->getContext(), "if.then11",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_end12 = BasicBlock::Create(mod->getContext(), "if.end12",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_end13 = BasicBlock::Create(mod->getContext(), "if.end13",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_if_end14 = BasicBlock::Create(mod->getContext(), "if.end14",func_convolve_hw_use_accelerator,0);
 BasicBlock* label_return_1072 = BasicBlock::Create(mod->getContext(), "return",func_convolve_hw_use_accelerator,0);
 
 // Block entry (label_entry_1069)
 AllocaInst* ptr_retval_1073 = new AllocaInst(IntegerType::get(mod->getContext(), 1), "retval", label_entry_1069);
 ptr_retval_1073->setAlignment(1);
 AllocaInst* ptr_filter_size_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "filter_size.addr", label_entry_1069);
 ptr_filter_size_addr->setAlignment(4);
 AllocaInst* ptr_nx_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "nx.addr", label_entry_1069);
 ptr_nx_addr->setAlignment(4);
 AllocaInst* ptr_ny_addr = new AllocaInst(IntegerType::get(mod->getContext(), 32), "ny.addr", label_entry_1069);
 ptr_ny_addr->setAlignment(4);
 AllocaInst* ptr_allow_hw = new AllocaInst(IntegerType::get(mod->getContext(), 8), "allow_hw", label_entry_1069);
 ptr_allow_hw->setAlignment(1);
 AllocaInst* ptr_pAllowHWAccelerationEnv = new AllocaInst(PointerTy_2, "pAllowHWAccelerationEnv", label_entry_1069);
 ptr_pAllowHWAccelerationEnv->setAlignment(8);
 StoreInst* void_1074 = new StoreInst(int32_filter_size, ptr_filter_size_addr, false, label_entry_1069);
 void_1074->setAlignment(4);
 std::vector<Value*> void_1075_params;
 void_1075_params.push_back(other_1076);
 void_1075_params.push_back(other_1077);
 void_1075_params.push_back(other_348);
 CallInst* void_1075 = CallInst::Create(func_llvm_dbg_declare, void_1075_params, "", label_entry_1069);
 void_1075->setCallingConv(CallingConv::C);
 void_1075->setTailCall(false);
 AttributeSet void_1075_PAL;
 void_1075->setAttributes(void_1075_PAL);
 
 StoreInst* void_1078 = new StoreInst(int32_nx, ptr_nx_addr, false, label_entry_1069);
 void_1078->setAlignment(4);
 std::vector<Value*> void_1079_params;
 void_1079_params.push_back(other_1080);
 void_1079_params.push_back(other_1081);
 void_1079_params.push_back(other_348);
 CallInst* void_1079 = CallInst::Create(func_llvm_dbg_declare, void_1079_params, "", label_entry_1069);
 void_1079->setCallingConv(CallingConv::C);
 void_1079->setTailCall(false);
 AttributeSet void_1079_PAL;
 void_1079->setAttributes(void_1079_PAL);
 
 StoreInst* void_1082 = new StoreInst(int32_ny, ptr_ny_addr, false, label_entry_1069);
 void_1082->setAlignment(4);
 std::vector<Value*> void_1083_params;
 void_1083_params.push_back(other_1084);
 void_1083_params.push_back(other_1085);
 void_1083_params.push_back(other_348);
 CallInst* void_1083 = CallInst::Create(func_llvm_dbg_declare, void_1083_params, "", label_entry_1069);
 void_1083->setCallingConv(CallingConv::C);
 void_1083->setTailCall(false);
 AttributeSet void_1083_PAL;
 void_1083->setAttributes(void_1083_PAL);
 
 std::vector<Value*> void_1086_params;
 void_1086_params.push_back(other_1087);
 void_1086_params.push_back(other_1088);
 void_1086_params.push_back(other_348);
 CallInst* void_1086 = CallInst::Create(func_llvm_dbg_declare, void_1086_params, "", label_entry_1069);
 void_1086->setCallingConv(CallingConv::C);
 void_1086->setTailCall(false);
 AttributeSet void_1086_PAL;
 void_1086->setAttributes(void_1086_PAL);
 
 StoreInst* void_1089 = new StoreInst(const_int8_279, ptr_allow_hw, false, label_entry_1069);
 void_1089->setAlignment(1);
 std::vector<Value*> void_1090_params;
 void_1090_params.push_back(other_1091);
 void_1090_params.push_back(other_1092);
 void_1090_params.push_back(other_348);
 CallInst* void_1090 = CallInst::Create(func_llvm_dbg_declare, void_1090_params, "", label_entry_1069);
 void_1090->setCallingConv(CallingConv::C);
 void_1090->setTailCall(false);
 AttributeSet void_1090_PAL;
 void_1090->setAttributes(void_1090_PAL);
 
 LoadInst* ptr_1093 = new LoadInst(gvar_ptr_env_allow_hw, "", false, label_entry_1069);
 ptr_1093->setAlignment(8);
 CallInst* ptr_call = CallInst::Create(func_getenv, ptr_1093, "call", label_entry_1069);
 ptr_call->setCallingConv(CallingConv::C);
 ptr_call->setTailCall(false);
 AttributeSet ptr_call_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call->setAttributes(ptr_call_PAL);
 
 StoreInst* void_1094 = new StoreInst(ptr_call, ptr_pAllowHWAccelerationEnv, false, label_entry_1069);
 void_1094->setAlignment(8);
 LoadInst* ptr_1095 = new LoadInst(ptr_pAllowHWAccelerationEnv, "", false, label_entry_1069);
 ptr_1095->setAlignment(8);
 ICmpInst* int1_tobool_1096 = new ICmpInst(*label_entry_1069, ICmpInst::ICMP_NE, ptr_1095, const_ptr_283, "tobool");
 BranchInst::Create(label_if_then_1070, label_if_end_1071, int1_tobool_1096, label_entry_1069);
 
 // Block if.then (label_if_then_1070)
 LoadInst* ptr_1098 = new LoadInst(ptr_pAllowHWAccelerationEnv, "", false, label_if_then_1070);
 ptr_1098->setAlignment(8);
 std::vector<Value*> int64_call1_params;
 int64_call1_params.push_back(ptr_1098);
 int64_call1_params.push_back(const_ptr_308);
 int64_call1_params.push_back(const_int32_309);
 CallInst* int64_call1 = CallInst::Create(func_strtol, int64_call1_params, "call1", label_if_then_1070);
 int64_call1->setCallingConv(CallingConv::C);
 int64_call1->setTailCall(false);
 AttributeSet int64_call1_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int64_call1_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int64_call1->setAttributes(int64_call1_PAL);
 
 CastInst* int8_conv = new TruncInst(int64_call1, IntegerType::get(mod->getContext(), 8), "conv", label_if_then_1070);
 StoreInst* void_1099 = new StoreInst(int8_conv, ptr_allow_hw, false, label_if_then_1070);
 void_1099->setAlignment(1);
 BranchInst::Create(label_if_end_1071, label_if_then_1070);
 
 // Block if.end (label_if_end_1071)
 LoadInst* int8_1101 = new LoadInst(ptr_allow_hw, "", false, label_if_end_1071);
 int8_1101->setAlignment(1);
 ICmpInst* int1_tobool2 = new ICmpInst(*label_if_end_1071, ICmpInst::ICMP_NE, int8_1101, const_int8_279, "tobool2");
 BranchInst::Create(label_if_then3, label_if_end14, int1_tobool2, label_if_end_1071);
 
 // Block if.then3 (label_if_then3)
 LoadInst* int32_1103 = new LoadInst(ptr_filter_size_addr, "", false, label_if_then3);
 int32_1103->setAlignment(4);
 LoadInst* int32_1104 = new LoadInst(ptr_nx_addr, "", false, label_if_then3);
 int32_1104->setAlignment(4);
 LoadInst* int32_1105 = new LoadInst(ptr_ny_addr, "", false, label_if_then3);
 int32_1105->setAlignment(4);
 std::vector<Value*> int32_call4_params;
 int32_call4_params.push_back(const_ptr_310);
 int32_call4_params.push_back(int32_1103);
 int32_call4_params.push_back(int32_1104);
 int32_call4_params.push_back(int32_1105);
 CallInst* int32_call4 = CallInst::Create(func_printf, int32_call4_params, "call4", label_if_then3);
 int32_call4->setCallingConv(CallingConv::C);
 int32_call4->setTailCall(false);
 AttributeSet int32_call4_PAL;
 int32_call4->setAttributes(int32_call4_PAL);
 
 LoadInst* int32_1106 = new LoadInst(ptr_nx_addr, "", false, label_if_then3);
 int32_1106->setAlignment(4);
 ICmpInst* int1_cmp_1107 = new ICmpInst(*label_if_then3, ICmpInst::ICMP_SGE, int32_1106, const_int32_309, "cmp");
 BranchInst::Create(label_land_lhs_true, label_if_end13, int1_cmp_1107, label_if_then3);
 
 // Block land.lhs.true (label_land_lhs_true)
 LoadInst* int32_1109 = new LoadInst(ptr_ny_addr, "", false, label_land_lhs_true);
 int32_1109->setAlignment(4);
 ICmpInst* int1_cmp6 = new ICmpInst(*label_land_lhs_true, ICmpInst::ICMP_SGE, int32_1109, const_int32_309, "cmp6");
 BranchInst::Create(label_if_then8, label_if_end13, int1_cmp6, label_land_lhs_true);
 
 // Block if.then8 (label_if_then8)
 LoadInst* int32_1111 = new LoadInst(ptr_filter_size_addr, "", false, label_if_then8);
 int32_1111->setAlignment(4);
 ICmpInst* int1_cmp9 = new ICmpInst(*label_if_then8, ICmpInst::ICMP_SGT, int32_1111, const_int32_275, "cmp9");
 BranchInst::Create(label_if_then11, label_if_end12, int1_cmp9, label_if_then8);
 
 // Block if.then11 (label_if_then11)
 StoreInst* void_1113 = new StoreInst(const_int1_311, ptr_retval_1073, false, label_if_then11);
 BranchInst::Create(label_return_1072, label_if_then11);
 
 // Block if.end12 (label_if_end12)
 BranchInst::Create(label_if_end13, label_if_end12);
 
 // Block if.end13 (label_if_end13)
 BranchInst::Create(label_if_end14, label_if_end13);
 
 // Block if.end14 (label_if_end14)
 StoreInst* void_1117 = new StoreInst(const_int1_297, ptr_retval_1073, false, label_if_end14);
 BranchInst::Create(label_return_1072, label_if_end14);
 
 // Block return (label_return_1072)
 LoadInst* int1_1119 = new LoadInst(ptr_retval_1073, "", false, label_return_1072);
 ReturnInst::Create(mod->getContext(), int1_1119, label_return_1072);
 
}

// Function: convolve_bypass_hw_iface0 (func_convolve_bypass_hw_iface0)
{
 Function::arg_iterator args = func_convolve_bypass_hw_iface0->arg_begin();
 Value* ptr_src = args++;
 ptr_src->setName("src");
 Value* ptr_dst = args++;
 ptr_dst->setName("dst");
 Value* ptr_kernel_1121 = args++;
 ptr_kernel_1121->setName("kernel");
 Value* int32_filter_size_1122 = args++;
 int32_filter_size_1122->setName("filter_size");
 Value* int32_nx_1123 = args++;
 int32_nx_1123->setName("nx");
 Value* int32_ny_1124 = args++;
 int32_ny_1124->setName("ny");
 
 BasicBlock* label_entry_1125 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_bypass_hw_iface0,0);
 
 // Block entry (label_entry_1125)
 AllocaInst* ptr_src_addr = new AllocaInst(PointerTy_2, "src.addr", label_entry_1125);
 ptr_src_addr->setAlignment(8);
 AllocaInst* ptr_dst_addr = new AllocaInst(PointerTy_2, "dst.addr", label_entry_1125);
 ptr_dst_addr->setAlignment(8);
 AllocaInst* ptr_kernel_addr = new AllocaInst(PointerTy_56, "kernel.addr", label_entry_1125);
 ptr_kernel_addr->setAlignment(8);
 AllocaInst* ptr_filter_size_addr_1126 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "filter_size.addr", label_entry_1125);
 ptr_filter_size_addr_1126->setAlignment(4);
 AllocaInst* ptr_nx_addr_1127 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "nx.addr", label_entry_1125);
 ptr_nx_addr_1127->setAlignment(4);
 AllocaInst* ptr_ny_addr_1128 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "ny.addr", label_entry_1125);
 ptr_ny_addr_1128->setAlignment(4);
 StoreInst* void_1129 = new StoreInst(ptr_src, ptr_src_addr, false, label_entry_1125);
 void_1129->setAlignment(8);
 std::vector<Value*> void_1130_params;
 void_1130_params.push_back(other_1131);
 void_1130_params.push_back(other_1132);
 void_1130_params.push_back(other_348);
 CallInst* void_1130 = CallInst::Create(func_llvm_dbg_declare, void_1130_params, "", label_entry_1125);
 void_1130->setCallingConv(CallingConv::C);
 void_1130->setTailCall(false);
 AttributeSet void_1130_PAL;
 void_1130->setAttributes(void_1130_PAL);
 
 StoreInst* void_1133 = new StoreInst(ptr_dst, ptr_dst_addr, false, label_entry_1125);
 void_1133->setAlignment(8);
 std::vector<Value*> void_1134_params;
 void_1134_params.push_back(other_1135);
 void_1134_params.push_back(other_1136);
 void_1134_params.push_back(other_348);
 CallInst* void_1134 = CallInst::Create(func_llvm_dbg_declare, void_1134_params, "", label_entry_1125);
 void_1134->setCallingConv(CallingConv::C);
 void_1134->setTailCall(false);
 AttributeSet void_1134_PAL;
 void_1134->setAttributes(void_1134_PAL);
 
 StoreInst* void_1137 = new StoreInst(ptr_kernel_1121, ptr_kernel_addr, false, label_entry_1125);
 void_1137->setAlignment(8);
 std::vector<Value*> void_1138_params;
 void_1138_params.push_back(other_1139);
 void_1138_params.push_back(other_1140);
 void_1138_params.push_back(other_348);
 CallInst* void_1138 = CallInst::Create(func_llvm_dbg_declare, void_1138_params, "", label_entry_1125);
 void_1138->setCallingConv(CallingConv::C);
 void_1138->setTailCall(false);
 AttributeSet void_1138_PAL;
 void_1138->setAttributes(void_1138_PAL);
 
 StoreInst* void_1141 = new StoreInst(int32_filter_size_1122, ptr_filter_size_addr_1126, false, label_entry_1125);
 void_1141->setAlignment(4);
 std::vector<Value*> void_1142_params;
 void_1142_params.push_back(other_1143);
 void_1142_params.push_back(other_1144);
 void_1142_params.push_back(other_348);
 CallInst* void_1142 = CallInst::Create(func_llvm_dbg_declare, void_1142_params, "", label_entry_1125);
 void_1142->setCallingConv(CallingConv::C);
 void_1142->setTailCall(false);
 AttributeSet void_1142_PAL;
 void_1142->setAttributes(void_1142_PAL);
 
 StoreInst* void_1145 = new StoreInst(int32_nx_1123, ptr_nx_addr_1127, false, label_entry_1125);
 void_1145->setAlignment(4);
 std::vector<Value*> void_1146_params;
 void_1146_params.push_back(other_1147);
 void_1146_params.push_back(other_1148);
 void_1146_params.push_back(other_348);
 CallInst* void_1146 = CallInst::Create(func_llvm_dbg_declare, void_1146_params, "", label_entry_1125);
 void_1146->setCallingConv(CallingConv::C);
 void_1146->setTailCall(false);
 AttributeSet void_1146_PAL;
 void_1146->setAttributes(void_1146_PAL);
 
 StoreInst* void_1149 = new StoreInst(int32_ny_1124, ptr_ny_addr_1128, false, label_entry_1125);
 void_1149->setAlignment(4);
 std::vector<Value*> void_1150_params;
 void_1150_params.push_back(other_1151);
 void_1150_params.push_back(other_1152);
 void_1150_params.push_back(other_348);
 CallInst* void_1150 = CallInst::Create(func_llvm_dbg_declare, void_1150_params, "", label_entry_1125);
 void_1150->setCallingConv(CallingConv::C);
 void_1150->setTailCall(false);
 AttributeSet void_1150_PAL;
 void_1150->setAttributes(void_1150_PAL);
 
 CallInst* int32_call_1153 = CallInst::Create(func_printf, const_ptr_312, "call", label_entry_1125);
 int32_call_1153->setCallingConv(CallingConv::C);
 int32_call_1153->setTailCall(false);
 AttributeSet int32_call_1153_PAL;
 int32_call_1153->setAttributes(int32_call_1153_PAL);
 
 LoadInst* ptr_1154 = new LoadInst(ptr_src_addr, "", false, label_entry_1125);
 ptr_1154->setAlignment(8);
 LoadInst* ptr_1155 = new LoadInst(ptr_dst_addr, "", false, label_entry_1125);
 ptr_1155->setAlignment(8);
 LoadInst* ptr_1156 = new LoadInst(ptr_kernel_addr, "", false, label_entry_1125);
 ptr_1156->setAlignment(8);
 LoadInst* int32_1157 = new LoadInst(ptr_filter_size_addr_1126, "", false, label_entry_1125);
 int32_1157->setAlignment(4);
 LoadInst* int32_1158 = new LoadInst(ptr_nx_addr_1127, "", false, label_entry_1125);
 int32_1158->setAlignment(4);
 LoadInst* int32_1159 = new LoadInst(ptr_ny_addr_1128, "", false, label_entry_1125);
 int32_1159->setAlignment(4);
 std::vector<Value*> int32_call1_params;
 int32_call1_params.push_back(const_ptr_313);
 int32_call1_params.push_back(ptr_1154);
 int32_call1_params.push_back(ptr_1155);
 int32_call1_params.push_back(ptr_1156);
 int32_call1_params.push_back(int32_1157);
 int32_call1_params.push_back(int32_1158);
 int32_call1_params.push_back(int32_1159);
 CallInst* int32_call1 = CallInst::Create(func_printf, int32_call1_params, "call1", label_entry_1125);
 int32_call1->setCallingConv(CallingConv::C);
 int32_call1->setTailCall(false);
 AttributeSet int32_call1_PAL;
 int32_call1->setAttributes(int32_call1_PAL);
 
 ReturnInst::Create(mod->getContext(), label_entry_1125);
 
}

// Function: convolve_bypass_hw_iface1 (func_convolve_bypass_hw_iface1)
{
 Function::arg_iterator args = func_convolve_bypass_hw_iface1->arg_begin();
 Value* ptr_src_1161 = args++;
 ptr_src_1161->setName("src");
 Value* ptr_dst_1162 = args++;
 ptr_dst_1162->setName("dst");
 Value* ptr_kernel_1163 = args++;
 ptr_kernel_1163->setName("kernel");
 Value* int32_filter_size_1164 = args++;
 int32_filter_size_1164->setName("filter_size");
 Value* int32_nx_1165 = args++;
 int32_nx_1165->setName("nx");
 Value* int32_ny_1166 = args++;
 int32_ny_1166->setName("ny");
 
 BasicBlock* label_entry_1167 = BasicBlock::Create(mod->getContext(), "entry",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then_1168 = BasicBlock::Create(mod->getContext(), "if.then",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_else_1169 = BasicBlock::Create(mod->getContext(), "if.else",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then3_1170 = BasicBlock::Create(mod->getContext(), "if.then3",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_else4 = BasicBlock::Create(mod->getContext(), "if.else4",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then6 = BasicBlock::Create(mod->getContext(), "if.then6",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_else7 = BasicBlock::Create(mod->getContext(), "if.else7",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end_1171 = BasicBlock::Create(mod->getContext(), "if.end",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end9 = BasicBlock::Create(mod->getContext(), "if.end9",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end10 = BasicBlock::Create(mod->getContext(), "if.end10",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_cond_1172 = BasicBlock::Create(mod->getContext(), "for.cond",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_body_1173 = BasicBlock::Create(mod->getContext(), "for.body",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_inc_1174 = BasicBlock::Create(mod->getContext(), "for.inc",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_end_1175 = BasicBlock::Create(mod->getContext(), "for.end",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then27 = BasicBlock::Create(mod->getContext(), "if.then27",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end30 = BasicBlock::Create(mod->getContext(), "if.end30",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then35 = BasicBlock::Create(mod->getContext(), "if.then35",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end37 = BasicBlock::Create(mod->getContext(), "if.end37",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_then42 = BasicBlock::Create(mod->getContext(), "if.then42",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_if_end44 = BasicBlock::Create(mod->getContext(), "if.end44",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_cond50 = BasicBlock::Create(mod->getContext(), "for.cond50",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_body53 = BasicBlock::Create(mod->getContext(), "for.body53",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_inc61 = BasicBlock::Create(mod->getContext(), "for.inc61",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_for_end63 = BasicBlock::Create(mod->getContext(), "for.end63",func_convolve_bypass_hw_iface1,0);
 BasicBlock* label_return_1176 = BasicBlock::Create(mod->getContext(), "return",func_convolve_bypass_hw_iface1,0);
 
 // Block entry (label_entry_1167)
 AllocaInst* ptr_src_addr_1177 = new AllocaInst(PointerTy_1, "src.addr", label_entry_1167);
 ptr_src_addr_1177->setAlignment(8);
 AllocaInst* ptr_dst_addr_1178 = new AllocaInst(PointerTy_1, "dst.addr", label_entry_1167);
 ptr_dst_addr_1178->setAlignment(8);
 AllocaInst* ptr_kernel_addr_1179 = new AllocaInst(PointerTy_56, "kernel.addr", label_entry_1167);
 ptr_kernel_addr_1179->setAlignment(8);
 AllocaInst* ptr_filter_size_addr_1180 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "filter_size.addr", label_entry_1167);
 ptr_filter_size_addr_1180->setAlignment(4);
 AllocaInst* ptr_nx_addr_1181 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "nx.addr", label_entry_1167);
 ptr_nx_addr_1181->setAlignment(4);
 AllocaInst* ptr_ny_addr_1182 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "ny.addr", label_entry_1167);
 ptr_ny_addr_1182->setAlignment(4);
 AllocaInst* ptr_error = new AllocaInst(PointerTy_2, "error", label_entry_1167);
 ptr_error->setAlignment(8);
 AllocaInst* ptr_libfile = new AllocaInst(PointerTy_2, "libfile", label_entry_1167);
 ptr_libfile->setAlignment(8);
 AllocaInst* ptr_in_1183 = new AllocaInst(PointerTy_2, "in", label_entry_1167);
 ptr_in_1183->setAlignment(8);
 AllocaInst* ptr_out_1184 = new AllocaInst(PointerTy_2, "out", label_entry_1167);
 ptr_out_1184->setAlignment(8);
 AllocaInst* ptr_i_1185 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_entry_1167);
 ptr_i_1185->setAlignment(4);
 AllocaInst* ptr_j_1186 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "j", label_entry_1167);
 ptr_j_1186->setAlignment(4);
 AllocaInst* ptr_ifaceptr = new AllocaInst(PointerTy_105, "ifaceptr", label_entry_1167);
 ptr_ifaceptr->setAlignment(8);
 AllocaInst* ptr_max_init = new AllocaInst(PointerTy_108, "max_init", label_entry_1167);
 ptr_max_init->setAlignment(8);
 AllocaInst* ptr_dlhandle = new AllocaInst(PointerTy_2, "dlhandle", label_entry_1167);
 ptr_dlhandle->setAlignment(8);
 StoreInst* void_1187 = new StoreInst(ptr_src_1161, ptr_src_addr_1177, false, label_entry_1167);
 void_1187->setAlignment(8);
 std::vector<Value*> void_1188_params;
 void_1188_params.push_back(other_1189);
 void_1188_params.push_back(other_1190);
 void_1188_params.push_back(other_348);
 CallInst* void_1188 = CallInst::Create(func_llvm_dbg_declare, void_1188_params, "", label_entry_1167);
 void_1188->setCallingConv(CallingConv::C);
 void_1188->setTailCall(false);
 AttributeSet void_1188_PAL;
 void_1188->setAttributes(void_1188_PAL);
 
 StoreInst* void_1191 = new StoreInst(ptr_dst_1162, ptr_dst_addr_1178, false, label_entry_1167);
 void_1191->setAlignment(8);
 std::vector<Value*> void_1192_params;
 void_1192_params.push_back(other_1193);
 void_1192_params.push_back(other_1194);
 void_1192_params.push_back(other_348);
 CallInst* void_1192 = CallInst::Create(func_llvm_dbg_declare, void_1192_params, "", label_entry_1167);
 void_1192->setCallingConv(CallingConv::C);
 void_1192->setTailCall(false);
 AttributeSet void_1192_PAL;
 void_1192->setAttributes(void_1192_PAL);
 
 StoreInst* void_1195 = new StoreInst(ptr_kernel_1163, ptr_kernel_addr_1179, false, label_entry_1167);
 void_1195->setAlignment(8);
 std::vector<Value*> void_1196_params;
 void_1196_params.push_back(other_1197);
 void_1196_params.push_back(other_1198);
 void_1196_params.push_back(other_348);
 CallInst* void_1196 = CallInst::Create(func_llvm_dbg_declare, void_1196_params, "", label_entry_1167);
 void_1196->setCallingConv(CallingConv::C);
 void_1196->setTailCall(false);
 AttributeSet void_1196_PAL;
 void_1196->setAttributes(void_1196_PAL);
 
 StoreInst* void_1199 = new StoreInst(int32_filter_size_1164, ptr_filter_size_addr_1180, false, label_entry_1167);
 void_1199->setAlignment(4);
 std::vector<Value*> void_1200_params;
 void_1200_params.push_back(other_1201);
 void_1200_params.push_back(other_1202);
 void_1200_params.push_back(other_348);
 CallInst* void_1200 = CallInst::Create(func_llvm_dbg_declare, void_1200_params, "", label_entry_1167);
 void_1200->setCallingConv(CallingConv::C);
 void_1200->setTailCall(false);
 AttributeSet void_1200_PAL;
 void_1200->setAttributes(void_1200_PAL);
 
 StoreInst* void_1203 = new StoreInst(int32_nx_1165, ptr_nx_addr_1181, false, label_entry_1167);
 void_1203->setAlignment(4);
 std::vector<Value*> void_1204_params;
 void_1204_params.push_back(other_1205);
 void_1204_params.push_back(other_1206);
 void_1204_params.push_back(other_348);
 CallInst* void_1204 = CallInst::Create(func_llvm_dbg_declare, void_1204_params, "", label_entry_1167);
 void_1204->setCallingConv(CallingConv::C);
 void_1204->setTailCall(false);
 AttributeSet void_1204_PAL;
 void_1204->setAttributes(void_1204_PAL);
 
 StoreInst* void_1207 = new StoreInst(int32_ny_1166, ptr_ny_addr_1182, false, label_entry_1167);
 void_1207->setAlignment(4);
 std::vector<Value*> void_1208_params;
 void_1208_params.push_back(other_1209);
 void_1208_params.push_back(other_1210);
 void_1208_params.push_back(other_348);
 CallInst* void_1208 = CallInst::Create(func_llvm_dbg_declare, void_1208_params, "", label_entry_1167);
 void_1208->setCallingConv(CallingConv::C);
 void_1208->setTailCall(false);
 AttributeSet void_1208_PAL;
 void_1208->setAttributes(void_1208_PAL);
 
 std::vector<Value*> void_1211_params;
 void_1211_params.push_back(other_1212);
 void_1211_params.push_back(other_1213);
 void_1211_params.push_back(other_348);
 CallInst* void_1211 = CallInst::Create(func_llvm_dbg_declare, void_1211_params, "", label_entry_1167);
 void_1211->setCallingConv(CallingConv::C);
 void_1211->setTailCall(false);
 AttributeSet void_1211_PAL;
 void_1211->setAttributes(void_1211_PAL);
 
 CallInst* int32_call_1214 = CallInst::Create(func_printf, const_ptr_314, "call", label_entry_1167);
 int32_call_1214->setCallingConv(CallingConv::C);
 int32_call_1214->setTailCall(false);
 AttributeSet int32_call_1214_PAL;
 int32_call_1214->setAttributes(int32_call_1214_PAL);
 
 LoadInst* ptr_1215 = new LoadInst(ptr_src_addr_1177, "", false, label_entry_1167);
 ptr_1215->setAlignment(8);
 LoadInst* ptr_1216 = new LoadInst(ptr_dst_addr_1178, "", false, label_entry_1167);
 ptr_1216->setAlignment(8);
 LoadInst* ptr_1217 = new LoadInst(ptr_kernel_addr_1179, "", false, label_entry_1167);
 ptr_1217->setAlignment(8);
 LoadInst* int32_1218 = new LoadInst(ptr_filter_size_addr_1180, "", false, label_entry_1167);
 int32_1218->setAlignment(4);
 LoadInst* int32_1219 = new LoadInst(ptr_nx_addr_1181, "", false, label_entry_1167);
 int32_1219->setAlignment(4);
 LoadInst* int32_1220 = new LoadInst(ptr_ny_addr_1182, "", false, label_entry_1167);
 int32_1220->setAlignment(4);
 std::vector<Value*> int32_call1_1221_params;
 int32_call1_1221_params.push_back(const_ptr_313);
 int32_call1_1221_params.push_back(ptr_1215);
 int32_call1_1221_params.push_back(ptr_1216);
 int32_call1_1221_params.push_back(ptr_1217);
 int32_call1_1221_params.push_back(int32_1218);
 int32_call1_1221_params.push_back(int32_1219);
 int32_call1_1221_params.push_back(int32_1220);
 CallInst* int32_call1_1221 = CallInst::Create(func_printf, int32_call1_1221_params, "call1", label_entry_1167);
 int32_call1_1221->setCallingConv(CallingConv::C);
 int32_call1_1221->setTailCall(false);
 AttributeSet int32_call1_1221_PAL;
 int32_call1_1221->setAttributes(int32_call1_1221_PAL);
 
 std::vector<Value*> void_1222_params;
 void_1222_params.push_back(other_1223);
 void_1222_params.push_back(other_1224);
 void_1222_params.push_back(other_348);
 CallInst* void_1222 = CallInst::Create(func_llvm_dbg_declare, void_1222_params, "", label_entry_1167);
 void_1222->setCallingConv(CallingConv::C);
 void_1222->setTailCall(false);
 AttributeSet void_1222_PAL;
 void_1222->setAttributes(void_1222_PAL);
 
 LoadInst* int32_1225 = new LoadInst(ptr_filter_size_addr_1180, "", false, label_entry_1167);
 int32_1225->setAlignment(4);
 ICmpInst* int1_cmp_1226 = new ICmpInst(*label_entry_1167, ICmpInst::ICMP_EQ, int32_1225, const_int32_302, "cmp");
 BranchInst::Create(label_if_then_1168, label_if_else_1169, int1_cmp_1226, label_entry_1167);
 
 // Block if.then (label_if_then_1168)
 LoadInst* ptr_1228 = new LoadInst(gvar_ptr_libfilename_3_3, "", false, label_if_then_1168);
 ptr_1228->setAlignment(8);
 StoreInst* void_1229 = new StoreInst(ptr_1228, ptr_libfile, false, label_if_then_1168);
 void_1229->setAlignment(8);
 BranchInst::Create(label_if_end10, label_if_then_1168);
 
 // Block if.else (label_if_else_1169)
 LoadInst* int32_1231 = new LoadInst(ptr_filter_size_addr_1180, "", false, label_if_else_1169);
 int32_1231->setAlignment(4);
 ICmpInst* int1_cmp2 = new ICmpInst(*label_if_else_1169, ICmpInst::ICMP_EQ, int32_1231, const_int32_303, "cmp2");
 BranchInst::Create(label_if_then3_1170, label_if_else4, int1_cmp2, label_if_else_1169);
 
 // Block if.then3 (label_if_then3_1170)
 LoadInst* ptr_1233 = new LoadInst(gvar_ptr_libfilename_5_5, "", false, label_if_then3_1170);
 ptr_1233->setAlignment(8);
 StoreInst* void_1234 = new StoreInst(ptr_1233, ptr_libfile, false, label_if_then3_1170);
 void_1234->setAlignment(8);
 BranchInst::Create(label_if_end9, label_if_then3_1170);
 
 // Block if.else4 (label_if_else4)
 LoadInst* int32_1236 = new LoadInst(ptr_filter_size_addr_1180, "", false, label_if_else4);
 int32_1236->setAlignment(4);
 ICmpInst* int1_cmp5 = new ICmpInst(*label_if_else4, ICmpInst::ICMP_EQ, int32_1236, const_int32_304, "cmp5");
 BranchInst::Create(label_if_then6, label_if_else7, int1_cmp5, label_if_else4);
 
 // Block if.then6 (label_if_then6)
 LoadInst* ptr_1238 = new LoadInst(gvar_ptr_libfilename_7_7, "", false, label_if_then6);
 ptr_1238->setAlignment(8);
 StoreInst* void_1239 = new StoreInst(ptr_1238, ptr_libfile, false, label_if_then6);
 void_1239->setAlignment(8);
 BranchInst::Create(label_if_end_1171, label_if_then6);
 
 // Block if.else7 (label_if_else7)
 LoadInst* int32_1241 = new LoadInst(ptr_filter_size_addr_1180, "", false, label_if_else7);
 int32_1241->setAlignment(4);
 std::vector<Value*> int32_call8_params;
 int32_call8_params.push_back(const_ptr_315);
 int32_call8_params.push_back(int32_1241);
 CallInst* int32_call8 = CallInst::Create(func_printf, int32_call8_params, "call8", label_if_else7);
 int32_call8->setCallingConv(CallingConv::C);
 int32_call8->setTailCall(false);
 AttributeSet int32_call8_PAL;
 int32_call8->setAttributes(int32_call8_PAL);
 
 BranchInst::Create(label_return_1176, label_if_else7);
 
 // Block if.end (label_if_end_1171)
 BranchInst::Create(label_if_end9, label_if_end_1171);
 
 // Block if.end9 (label_if_end9)
 BranchInst::Create(label_if_end10, label_if_end9);
 
 // Block if.end10 (label_if_end10)
 std::vector<Value*> void_1245_params;
 void_1245_params.push_back(other_1246);
 void_1245_params.push_back(other_1247);
 void_1245_params.push_back(other_348);
 CallInst* void_1245 = CallInst::Create(func_llvm_dbg_declare, void_1245_params, "", label_if_end10);
 void_1245->setCallingConv(CallingConv::C);
 void_1245->setTailCall(false);
 AttributeSet void_1245_PAL;
 void_1245->setAttributes(void_1245_PAL);
 
 LoadInst* int32_1248 = new LoadInst(ptr_nx_addr_1181, "", false, label_if_end10);
 int32_1248->setAlignment(4);
 CastInst* int64_conv_1249 = new SExtInst(int32_1248, IntegerType::get(mod->getContext(), 64), "conv", label_if_end10);
 BinaryOperator* int64_mul = BinaryOperator::Create(Instruction::Mul, const_int64_278, int64_conv_1249, "mul", label_if_end10);
 LoadInst* int32_1250 = new LoadInst(ptr_ny_addr_1182, "", false, label_if_end10);
 int32_1250->setAlignment(4);
 CastInst* int64_conv11 = new SExtInst(int32_1250, IntegerType::get(mod->getContext(), 64), "conv11", label_if_end10);
 BinaryOperator* int64_mul12 = BinaryOperator::Create(Instruction::Mul, int64_mul, int64_conv11, "mul12", label_if_end10);
 CallInst* ptr_call13 = CallInst::Create(func_malloc, int64_mul12, "call13", label_if_end10);
 ptr_call13->setCallingConv(CallingConv::C);
 ptr_call13->setTailCall(false);
 AttributeSet ptr_call13_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call13_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call13->setAttributes(ptr_call13_PAL);

StoreInst* void_1251 = new StoreInst(ptr_call13, ptr_in_1183, false, label_if_end10);
void_1251->setAlignment(8);
std::vector<Value*> void_1252_params;
void_1252_params.push_back(other_1253);
void_1252_params.push_back(other_1254);
void_1252_params.push_back(other_348);
CallInst* void_1252 = CallInst::Create(func_llvm_dbg_declare, void_1252_params, "", label_if_end10);
void_1252->setCallingConv(CallingConv::C);
void_1252->setTailCall(false);
AttributeSet void_1252_PAL;
void_1252->setAttributes(void_1252_PAL);

LoadInst* int32_1255 = new LoadInst(ptr_nx_addr_1181, "", false, label_if_end10);
int32_1255->setAlignment(4);
CastInst* int64_conv14 = new SExtInst(int32_1255, IntegerType::get(mod->getContext(), 64), "conv14", label_if_end10);
BinaryOperator* int64_mul15 = BinaryOperator::Create(Instruction::Mul, const_int64_278, int64_conv14, "mul15", label_if_end10);
LoadInst* int32_1256 = new LoadInst(ptr_ny_addr_1182, "", false, label_if_end10);
int32_1256->setAlignment(4);
CastInst* int64_conv16_1257 = new SExtInst(int32_1256, IntegerType::get(mod->getContext(), 64), "conv16", label_if_end10);
BinaryOperator* int64_mul17 = BinaryOperator::Create(Instruction::Mul, int64_mul15, int64_conv16_1257, "mul17", label_if_end10);
CallInst* ptr_call18 = CallInst::Create(func_malloc, int64_mul17, "call18", label_if_end10);
ptr_call18->setCallingConv(CallingConv::C);
ptr_call18->setTailCall(false);
AttributeSet ptr_call18_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call18_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call18->setAttributes(ptr_call18_PAL);

StoreInst* void_1258 = new StoreInst(ptr_call18, ptr_out_1184, false, label_if_end10);
void_1258->setAlignment(8);
std::vector<Value*> void_1259_params;
void_1259_params.push_back(other_1260);
void_1259_params.push_back(other_1261);
void_1259_params.push_back(other_348);
CallInst* void_1259 = CallInst::Create(func_llvm_dbg_declare, void_1259_params, "", label_if_end10);
void_1259->setCallingConv(CallingConv::C);
void_1259->setTailCall(false);
AttributeSet void_1259_PAL;
void_1259->setAttributes(void_1259_PAL);

StoreInst* void_1262 = new StoreInst(const_int32_248, ptr_i_1185, false, label_if_end10);
void_1262->setAlignment(4);
std::vector<Value*> void_1263_params;
void_1263_params.push_back(other_1264);
void_1263_params.push_back(other_1265);
void_1263_params.push_back(other_348);
CallInst* void_1263 = CallInst::Create(func_llvm_dbg_declare, void_1263_params, "", label_if_end10);
void_1263->setCallingConv(CallingConv::C);
void_1263->setTailCall(false);
AttributeSet void_1263_PAL;
void_1263->setAttributes(void_1263_PAL);

StoreInst* void_1266 = new StoreInst(const_int32_248, ptr_j_1186, false, label_if_end10);
void_1266->setAlignment(4);
StoreInst* void_1267 = new StoreInst(const_int32_248, ptr_i_1185, false, label_if_end10);
void_1267->setAlignment(4);
BranchInst::Create(label_for_cond_1172, label_if_end10);

// Block for.cond (label_for_cond_1172)
LoadInst* int32_1269 = new LoadInst(ptr_i_1185, "", false, label_for_cond_1172);
int32_1269->setAlignment(4);
LoadInst* int32_1270 = new LoadInst(ptr_ny_addr_1182, "", false, label_for_cond_1172);
int32_1270->setAlignment(4);
ICmpInst* int1_cmp19 = new ICmpInst(*label_for_cond_1172, ICmpInst::ICMP_SLT, int32_1269, int32_1270, "cmp19");
BranchInst::Create(label_for_body_1173, label_for_end_1175, int1_cmp19, label_for_cond_1172);

// Block for.body (label_for_body_1173)
LoadInst* int32_1272 = new LoadInst(ptr_i_1185, "", false, label_for_body_1173);
int32_1272->setAlignment(4);
LoadInst* int32_1273 = new LoadInst(ptr_nx_addr_1181, "", false, label_for_body_1173);
int32_1273->setAlignment(4);
BinaryOperator* int32_mul21 = BinaryOperator::Create(Instruction::Mul, int32_1272, int32_1273, "mul21", label_for_body_1173);
CastInst* int64_idxprom_1274 = new SExtInst(int32_mul21, IntegerType::get(mod->getContext(), 64), "idxprom", label_for_body_1173);
LoadInst* ptr_1275 = new LoadInst(ptr_in_1183, "", false, label_for_body_1173);
ptr_1275->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_1276 = GetElementPtrInst::Create(ptr_1275, int64_idxprom_1274, "arrayidx", label_for_body_1173);
LoadInst* int32_1277 = new LoadInst(ptr_i_1185, "", false, label_for_body_1173);
int32_1277->setAlignment(4);
CastInst* int64_idxprom22_1278 = new SExtInst(int32_1277, IntegerType::get(mod->getContext(), 64), "idxprom22", label_for_body_1173);
LoadInst* ptr_1279 = new LoadInst(ptr_src_addr_1177, "", false, label_for_body_1173);
ptr_1279->setAlignment(8);
GetElementPtrInst* ptr_arrayidx23_1280 = GetElementPtrInst::Create(ptr_1279, int64_idxprom22_1278, "arrayidx23", label_for_body_1173);
LoadInst* ptr_1281 = new LoadInst(ptr_arrayidx23_1280, "", false, label_for_body_1173);
ptr_1281->setAlignment(8);
LoadInst* int32_1282 = new LoadInst(ptr_nx_addr_1181, "", false, label_for_body_1173);
int32_1282->setAlignment(4);
CastInst* int64_conv24 = new SExtInst(int32_1282, IntegerType::get(mod->getContext(), 64), "conv24", label_for_body_1173);
BinaryOperator* int64_mul25 = BinaryOperator::Create(Instruction::Mul, const_int64_278, int64_conv24, "mul25", label_for_body_1173);
std::vector<Value*> void_1283_params;
void_1283_params.push_back(ptr_arrayidx_1276);
void_1283_params.push_back(ptr_1281);
void_1283_params.push_back(int64_mul25);
void_1283_params.push_back(const_int32_282);
void_1283_params.push_back(const_int1_297);
CallInst* void_1283 = CallInst::Create(func_llvm_memcpy_p0i8_p0i8_i64, void_1283_params, "", label_for_body_1173);
void_1283->setCallingConv(CallingConv::C);
void_1283->setTailCall(false);
AttributeSet void_1283_PAL;
void_1283->setAttributes(void_1283_PAL);

BranchInst::Create(label_for_inc_1174, label_for_body_1173);

// Block for.inc (label_for_inc_1174)
LoadInst* int32_1285 = new LoadInst(ptr_i_1185, "", false, label_for_inc_1174);
int32_1285->setAlignment(4);
BinaryOperator* int32_inc_1286 = BinaryOperator::Create(Instruction::Add, int32_1285, const_int32_282, "inc", label_for_inc_1174);
StoreInst* void_1287 = new StoreInst(int32_inc_1286, ptr_i_1185, false, label_for_inc_1174);
void_1287->setAlignment(4);
BranchInst::Create(label_for_cond_1172, label_for_inc_1174);

// Block for.end (label_for_end_1175)
std::vector<Value*> void_1289_params;
void_1289_params.push_back(other_1290);
void_1289_params.push_back(other_1291);
void_1289_params.push_back(other_348);
CallInst* void_1289 = CallInst::Create(func_llvm_dbg_declare, void_1289_params, "", label_for_end_1175);
void_1289->setCallingConv(CallingConv::C);
void_1289->setTailCall(false);
AttributeSet void_1289_PAL;
void_1289->setAttributes(void_1289_PAL);

std::vector<Value*> void_1292_params;
void_1292_params.push_back(other_1293);
void_1292_params.push_back(other_1294);
void_1292_params.push_back(other_348);
CallInst* void_1292 = CallInst::Create(func_llvm_dbg_declare, void_1292_params, "", label_for_end_1175);
void_1292->setCallingConv(CallingConv::C);
void_1292->setTailCall(false);
AttributeSet void_1292_PAL;
void_1292->setAttributes(void_1292_PAL);

std::vector<Value*> void_1295_params;
void_1295_params.push_back(other_1296);
void_1295_params.push_back(other_1297);
void_1295_params.push_back(other_348);
CallInst* void_1295 = CallInst::Create(func_llvm_dbg_declare, void_1295_params, "", label_for_end_1175);
void_1295->setCallingConv(CallingConv::C);
void_1295->setTailCall(false);
AttributeSet void_1295_PAL;
void_1295->setAttributes(void_1295_PAL);

LoadInst* ptr_1298 = new LoadInst(ptr_libfile, "", false, label_for_end_1175);
ptr_1298->setAlignment(8);
std::vector<Value*> ptr_call26_params;
ptr_call26_params.push_back(ptr_1298);
ptr_call26_params.push_back(const_int32_316);
CallInst* ptr_call26 = CallInst::Create(func_dlopen, ptr_call26_params, "call26", label_for_end_1175);
ptr_call26->setCallingConv(CallingConv::C);
ptr_call26->setTailCall(false);
AttributeSet ptr_call26_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call26_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call26->setAttributes(ptr_call26_PAL);

StoreInst* void_1299 = new StoreInst(ptr_call26, ptr_dlhandle, false, label_for_end_1175);
void_1299->setAlignment(8);
LoadInst* ptr_1300 = new LoadInst(ptr_dlhandle, "", false, label_for_end_1175);
ptr_1300->setAlignment(8);
ICmpInst* int1_tobool_1301 = new ICmpInst(*label_for_end_1175, ICmpInst::ICMP_NE, ptr_1300, const_ptr_283, "tobool");
BranchInst::Create(label_if_end30, label_if_then27, int1_tobool_1301, label_for_end_1175);

// Block if.then27 (label_if_then27)
CallInst* ptr_call28 = CallInst::Create(func_dlerror, "call28", label_if_then27);
ptr_call28->setCallingConv(CallingConv::C);
ptr_call28->setTailCall(false);
AttributeSet ptr_call28_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call28_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call28->setAttributes(ptr_call28_PAL);

StoreInst* void_1303 = new StoreInst(ptr_call28, ptr_error, false, label_if_then27);
void_1303->setAlignment(8);
LoadInst* ptr_1304 = new LoadInst(ptr_error, "", false, label_if_then27);
ptr_1304->setAlignment(8);
std::vector<Value*> int32_call29_params;
int32_call29_params.push_back(const_ptr_317);
int32_call29_params.push_back(ptr_1304);
CallInst* int32_call29 = CallInst::Create(func_printf, int32_call29_params, "call29", label_if_then27);
int32_call29->setCallingConv(CallingConv::C);
int32_call29->setTailCall(false);
AttributeSet int32_call29_PAL;
int32_call29->setAttributes(int32_call29_PAL);

BranchInst::Create(label_return_1176, label_if_then27);

// Block if.end30 (label_if_end30)
LoadInst* ptr_1306 = new LoadInst(ptr_dlhandle, "", false, label_if_end30);
ptr_1306->setAlignment(8);
std::vector<Value*> ptr_call31_params;
ptr_call31_params.push_back(ptr_1306);
ptr_call31_params.push_back(const_ptr_318);
CallInst* ptr_call31 = CallInst::Create(func_dlsym, ptr_call31_params, "call31", label_if_end30);
ptr_call31->setCallingConv(CallingConv::C);
ptr_call31->setTailCall(false);
AttributeSet ptr_call31_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call31_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call31->setAttributes(ptr_call31_PAL);

CastInst* ptr_1307 = new BitCastInst(ptr_call31, PointerTy_105, "", label_if_end30);
StoreInst* void_1308 = new StoreInst(ptr_1307, ptr_ifaceptr, false, label_if_end30);
void_1308->setAlignment(8);
CallInst* ptr_call32 = CallInst::Create(func_dlerror, "call32", label_if_end30);
ptr_call32->setCallingConv(CallingConv::C);
ptr_call32->setTailCall(false);
AttributeSet ptr_call32_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call32_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call32->setAttributes(ptr_call32_PAL);

StoreInst* void_1309 = new StoreInst(ptr_call32, ptr_error, false, label_if_end30);
void_1309->setAlignment(8);
ICmpInst* int1_cmp33 = new ICmpInst(*label_if_end30, ICmpInst::ICMP_NE, ptr_call32, const_ptr_283, "cmp33");
BranchInst::Create(label_if_then35, label_if_end37, int1_cmp33, label_if_end30);

// Block if.then35 (label_if_then35)
LoadInst* ptr_1311 = new LoadInst(ptr_error, "", false, label_if_then35);
ptr_1311->setAlignment(8);
std::vector<Value*> int32_call36_params;
int32_call36_params.push_back(const_ptr_319);
int32_call36_params.push_back(ptr_1311);
CallInst* int32_call36 = CallInst::Create(func_printf, int32_call36_params, "call36", label_if_then35);
int32_call36->setCallingConv(CallingConv::C);
int32_call36->setTailCall(false);
AttributeSet int32_call36_PAL;
int32_call36->setAttributes(int32_call36_PAL);

BranchInst::Create(label_return_1176, label_if_then35);

// Block if.end37 (label_if_end37)
LoadInst* ptr_1313 = new LoadInst(ptr_dlhandle, "", false, label_if_end37);
ptr_1313->setAlignment(8);
std::vector<Value*> ptr_call38_params;
ptr_call38_params.push_back(ptr_1313);
ptr_call38_params.push_back(const_ptr_320);
CallInst* ptr_call38 = CallInst::Create(func_dlsym, ptr_call38_params, "call38", label_if_end37);
ptr_call38->setCallingConv(CallingConv::C);
ptr_call38->setTailCall(false);
AttributeSet ptr_call38_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call38_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call38->setAttributes(ptr_call38_PAL);

CastInst* ptr_1314 = new BitCastInst(ptr_call38, PointerTy_108, "", label_if_end37);
StoreInst* void_1315 = new StoreInst(ptr_1314, ptr_max_init, false, label_if_end37);
void_1315->setAlignment(8);
CallInst* ptr_call39 = CallInst::Create(func_dlerror, "call39", label_if_end37);
ptr_call39->setCallingConv(CallingConv::C);
ptr_call39->setTailCall(false);
AttributeSet ptr_call39_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call39_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call39->setAttributes(ptr_call39_PAL);

StoreInst* void_1316 = new StoreInst(ptr_call39, ptr_error, false, label_if_end37);
void_1316->setAlignment(8);
ICmpInst* int1_cmp40 = new ICmpInst(*label_if_end37, ICmpInst::ICMP_NE, ptr_call39, const_ptr_283, "cmp40");
BranchInst::Create(label_if_then42, label_if_end44, int1_cmp40, label_if_end37);

// Block if.then42 (label_if_then42)
LoadInst* ptr_1318 = new LoadInst(ptr_error, "", false, label_if_then42);
ptr_1318->setAlignment(8);
std::vector<Value*> int32_call43_params;
int32_call43_params.push_back(const_ptr_319);
int32_call43_params.push_back(ptr_1318);
CallInst* int32_call43 = CallInst::Create(func_printf, int32_call43_params, "call43", label_if_then42);
int32_call43->setCallingConv(CallingConv::C);
int32_call43->setTailCall(false);
AttributeSet int32_call43_PAL;
int32_call43->setAttributes(int32_call43_PAL);

BranchInst::Create(label_return_1176, label_if_then42);

// Block if.end44 (label_if_end44)
CallInst* int32_call45 = CallInst::Create(func_printf, const_ptr_321, "call45", label_if_end44);
int32_call45->setCallingConv(CallingConv::C);
int32_call45->setTailCall(false);
AttributeSet int32_call45_PAL;
int32_call45->setAttributes(int32_call45_PAL);

LoadInst* ptr_1320 = new LoadInst(ptr_ifaceptr, "", false, label_if_end44);
ptr_1320->setAlignment(8);
LoadInst* int32_1321 = new LoadInst(ptr_nx_addr_1181, "", false, label_if_end44);
int32_1321->setAlignment(4);
LoadInst* int32_1322 = new LoadInst(ptr_ny_addr_1182, "", false, label_if_end44);
int32_1322->setAlignment(4);
BinaryOperator* int32_mul46 = BinaryOperator::Create(Instruction::Mul, int32_1321, int32_1322, "mul46", label_if_end44);
CastInst* int64_conv47 = new SExtInst(int32_mul46, IntegerType::get(mod->getContext(), 64), "conv47", label_if_end44);
LoadInst* int32_1323 = new LoadInst(ptr_nx_addr_1181, "", false, label_if_end44);
int32_1323->setAlignment(4);
LoadInst* int32_1324 = new LoadInst(ptr_ny_addr_1182, "", false, label_if_end44);
int32_1324->setAlignment(4);
LoadInst* ptr_1325 = new LoadInst(ptr_kernel_addr_1179, "", false, label_if_end44);
ptr_1325->setAlignment(8);
LoadInst* ptr_1326 = new LoadInst(ptr_in_1183, "", false, label_if_end44);
ptr_1326->setAlignment(8);
LoadInst* ptr_1327 = new LoadInst(ptr_out_1184, "", false, label_if_end44);
ptr_1327->setAlignment(8);
std::vector<Value*> void_1328_params;
void_1328_params.push_back(int64_conv47);
void_1328_params.push_back(int32_1323);
void_1328_params.push_back(int32_1324);
void_1328_params.push_back(ptr_1325);
void_1328_params.push_back(ptr_1326);
void_1328_params.push_back(ptr_1327);
CallInst* void_1328 = CallInst::Create(ptr_1320, void_1328_params, "", label_if_end44);
void_1328->setCallingConv(CallingConv::C);
void_1328->setTailCall(false);
AttributeSet void_1328_PAL;
void_1328->setAttributes(void_1328_PAL);

CallInst* int32_call48 = CallInst::Create(func_printf, const_ptr_322, "call48", label_if_end44);
int32_call48->setCallingConv(CallingConv::C);
int32_call48->setTailCall(false);
AttributeSet int32_call48_PAL;
int32_call48->setAttributes(int32_call48_PAL);

LoadInst* ptr_1329 = new LoadInst(ptr_dlhandle, "", false, label_if_end44);
ptr_1329->setAlignment(8);
CallInst* int32_call49 = CallInst::Create(func_dlclose, ptr_1329, "call49", label_if_end44);
int32_call49->setCallingConv(CallingConv::C);
int32_call49->setTailCall(false);
AttributeSet int32_call49_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call49_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call49->setAttributes(int32_call49_PAL);

StoreInst* void_1330 = new StoreInst(const_int32_248, ptr_i_1185, false, label_if_end44);
void_1330->setAlignment(4);
BranchInst::Create(label_for_cond50, label_if_end44);

// Block for.cond50 (label_for_cond50)
LoadInst* int32_1332 = new LoadInst(ptr_i_1185, "", false, label_for_cond50);
int32_1332->setAlignment(4);
LoadInst* int32_1333 = new LoadInst(ptr_ny_addr_1182, "", false, label_for_cond50);
int32_1333->setAlignment(4);
ICmpInst* int1_cmp51 = new ICmpInst(*label_for_cond50, ICmpInst::ICMP_SLT, int32_1332, int32_1333, "cmp51");
BranchInst::Create(label_for_body53, label_for_end63, int1_cmp51, label_for_cond50);

// Block for.body53 (label_for_body53)
LoadInst* int32_1335 = new LoadInst(ptr_i_1185, "", false, label_for_body53);
int32_1335->setAlignment(4);
CastInst* int64_idxprom54 = new SExtInst(int32_1335, IntegerType::get(mod->getContext(), 64), "idxprom54", label_for_body53);
LoadInst* ptr_1336 = new LoadInst(ptr_dst_addr_1178, "", false, label_for_body53);
ptr_1336->setAlignment(8);
GetElementPtrInst* ptr_arrayidx55 = GetElementPtrInst::Create(ptr_1336, int64_idxprom54, "arrayidx55", label_for_body53);
LoadInst* ptr_1337 = new LoadInst(ptr_arrayidx55, "", false, label_for_body53);
ptr_1337->setAlignment(8);
LoadInst* int32_1338 = new LoadInst(ptr_i_1185, "", false, label_for_body53);
int32_1338->setAlignment(4);
LoadInst* int32_1339 = new LoadInst(ptr_nx_addr_1181, "", false, label_for_body53);
int32_1339->setAlignment(4);
BinaryOperator* int32_mul56 = BinaryOperator::Create(Instruction::Mul, int32_1338, int32_1339, "mul56", label_for_body53);
CastInst* int64_idxprom57 = new SExtInst(int32_mul56, IntegerType::get(mod->getContext(), 64), "idxprom57", label_for_body53);
LoadInst* ptr_1340 = new LoadInst(ptr_out_1184, "", false, label_for_body53);
ptr_1340->setAlignment(8);
GetElementPtrInst* ptr_arrayidx58_1341 = GetElementPtrInst::Create(ptr_1340, int64_idxprom57, "arrayidx58", label_for_body53);
LoadInst* int32_1342 = new LoadInst(ptr_nx_addr_1181, "", false, label_for_body53);
int32_1342->setAlignment(4);
CastInst* int64_conv59 = new SExtInst(int32_1342, IntegerType::get(mod->getContext(), 64), "conv59", label_for_body53);
BinaryOperator* int64_mul60 = BinaryOperator::Create(Instruction::Mul, const_int64_278, int64_conv59, "mul60", label_for_body53);
std::vector<Value*> void_1343_params;
void_1343_params.push_back(ptr_1337);
void_1343_params.push_back(ptr_arrayidx58_1341);
void_1343_params.push_back(int64_mul60);
void_1343_params.push_back(const_int32_282);
void_1343_params.push_back(const_int1_297);
CallInst* void_1343 = CallInst::Create(func_llvm_memcpy_p0i8_p0i8_i64, void_1343_params, "", label_for_body53);
void_1343->setCallingConv(CallingConv::C);
void_1343->setTailCall(false);
AttributeSet void_1343_PAL;
void_1343->setAttributes(void_1343_PAL);

BranchInst::Create(label_for_inc61, label_for_body53);

// Block for.inc61 (label_for_inc61)
LoadInst* int32_1345 = new LoadInst(ptr_i_1185, "", false, label_for_inc61);
int32_1345->setAlignment(4);
BinaryOperator* int32_inc62 = BinaryOperator::Create(Instruction::Add, int32_1345, const_int32_282, "inc62", label_for_inc61);
StoreInst* void_1346 = new StoreInst(int32_inc62, ptr_i_1185, false, label_for_inc61);
void_1346->setAlignment(4);
BranchInst::Create(label_for_cond50, label_for_inc61);

// Block for.end63 (label_for_end63)
LoadInst* ptr_1348 = new LoadInst(ptr_in_1183, "", false, label_for_end63);
ptr_1348->setAlignment(8);
CallInst* void_1349 = CallInst::Create(func_free, ptr_1348, "", label_for_end63);
void_1349->setCallingConv(CallingConv::C);
void_1349->setTailCall(false);
AttributeSet void_1349_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1349_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1349->setAttributes(void_1349_PAL);

LoadInst* ptr_1350 = new LoadInst(ptr_out_1184, "", false, label_for_end63);
ptr_1350->setAlignment(8);
CallInst* void_1351 = CallInst::Create(func_free, ptr_1350, "", label_for_end63);
void_1351->setCallingConv(CallingConv::C);
void_1351->setTailCall(false);
AttributeSet void_1351_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1351_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1351->setAttributes(void_1351_PAL);

BranchInst::Create(label_return_1176, label_for_end63);

// Block return (label_return_1176)
ReturnInst::Create(mod->getContext(), label_return_1176);

}

// Function: free_array_2d (func_free_array_2d)
{
 Function::arg_iterator args = func_free_array_2d->arg_begin();
 Value* int64_nrows = args++;
 int64_nrows->setName("nrows");
 Value* ptr_arr = args++;
 ptr_arr->setName("arr");
 
 BasicBlock* label_entry_1354 = BasicBlock::Create(mod->getContext(), "entry",func_free_array_2d,0);
 BasicBlock* label_for_body_lr_ph = BasicBlock::Create(mod->getContext(), "for.body.lr.ph",func_free_array_2d,0);
 BasicBlock* label_for_body_1355 = BasicBlock::Create(mod->getContext(), "for.body",func_free_array_2d,0);
 BasicBlock* label_for_end_loopexit = BasicBlock::Create(mod->getContext(), "for.end.loopexit",func_free_array_2d,0);
 BasicBlock* label_for_end_1356 = BasicBlock::Create(mod->getContext(), "for.end",func_free_array_2d,0);
 
 // Block entry (label_entry_1354)
 ICmpInst* int1_cmp5_1357 = new ICmpInst(*label_entry_1354, ICmpInst::ICMP_EQ, int64_nrows, const_int64_274, "cmp5");
 BranchInst::Create(label_for_end_1356, label_for_body_lr_ph, int1_cmp5_1357, label_entry_1354);
 
 // Block for.body.lr.ph (label_for_body_lr_ph)
 BinaryOperator* int64_1359 = BinaryOperator::Create(Instruction::Add, int64_nrows, const_int64_281, "", label_for_body_lr_ph);
 BranchInst::Create(label_for_body_1355, label_for_body_lr_ph);
 
 // Block for.body (label_for_body_1355)
 Argument* fwdref_1361 = new Argument(IntegerType::get(mod->getContext(), 64));
 PHINode* int64_indvars_iv = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv", label_for_body_1355);
 int64_indvars_iv->addIncoming(const_int64_274, label_for_body_lr_ph);
 int64_indvars_iv->addIncoming(fwdref_1361, label_for_body_1355);
 
 GetElementPtrInst* ptr_arrayidx_1362 = GetElementPtrInst::Create(ptr_arr, int64_indvars_iv, "arrayidx", label_for_body_1355);
 LoadInst* ptr_1363 = new LoadInst(ptr_arrayidx_1362, "", false, label_for_body_1355);
 ptr_1363->setAlignment(8);
 CallInst* void_1364 = CallInst::Create(func_free, ptr_1363, "", label_for_body_1355);
 void_1364->setCallingConv(CallingConv::C);
 void_1364->setTailCall(true);
 AttributeSet void_1364_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1364_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1364->setAttributes(void_1364_PAL);
 
 BinaryOperator* int64_indvars_iv_next_1365 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv, const_int64_278, "indvars.iv.next", label_for_body_1355);
 ICmpInst* int1_exitcond_1366 = new ICmpInst(*label_for_body_1355, ICmpInst::ICMP_EQ, int64_indvars_iv, int64_1359, "exitcond");
 BranchInst::Create(label_for_end_loopexit, label_for_body_1355, int1_exitcond_1366, label_for_body_1355);
 
 // Block for.end.loopexit (label_for_end_loopexit)
 BranchInst::Create(label_for_end_1356, label_for_end_loopexit);
 
 // Block for.end (label_for_end_1356)
 CastInst* ptr_1369 = new BitCastInst(ptr_arr, PointerTy_2, "", label_for_end_1356);
 CallInst* void_1370 = CallInst::Create(func_free, ptr_1369, "", label_for_end_1356);
 void_1370->setCallingConv(CallingConv::C);
 void_1370->setTailCall(true);
 AttributeSet void_1370_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1370_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1370->setAttributes(void_1370_PAL);
 
 ReturnInst::Create(mod->getContext(), label_for_end_1356);
 
 // Resolve Forward References
 fwdref_1361->replaceAllUsesWith(int64_indvars_iv_next_1365); delete fwdref_1361;
 
}

// Function: create_array_2d (func_create_array_2d)
{
 Function::arg_iterator args = func_create_array_2d->arg_begin();
 Value* int64_nrows_1372 = args++;
 int64_nrows_1372->setName("nrows");
 Value* int64_ncols = args++;
 int64_ncols->setName("ncols");
 Value* int8_init = args++;
 int8_init->setName("init");
 
 BasicBlock* label_entry_1373 = BasicBlock::Create(mod->getContext(), "entry",func_create_array_2d,0);
 BasicBlock* label_for_body_lr_ph_1374 = BasicBlock::Create(mod->getContext(), "for.body.lr.ph",func_create_array_2d,0);
 BasicBlock* label_for_body_1375 = BasicBlock::Create(mod->getContext(), "for.body",func_create_array_2d,0);
 BasicBlock* label_for_body8_lr_ph = BasicBlock::Create(mod->getContext(), "for.body8.lr.ph",func_create_array_2d,0);
 BasicBlock* label_for_inc13_1376 = BasicBlock::Create(mod->getContext(), "for.inc13",func_create_array_2d,0);
 BasicBlock* label_for_end15_loopexit_1377 = BasicBlock::Create(mod->getContext(), "for.end15.loopexit",func_create_array_2d,0);
 BasicBlock* label_for_end15_1378 = BasicBlock::Create(mod->getContext(), "for.end15",func_create_array_2d,0);
 
 // Block entry (label_entry_1373)
 BinaryOperator* int64_mul_1379 = BinaryOperator::Create(Instruction::Shl, int64_nrows_1372, const_int64_323, "mul", label_entry_1373);
 CallInst* ptr_call_1380 = CallInst::Create(func_malloc, int64_mul_1379, "call", label_entry_1373);
 ptr_call_1380->setCallingConv(CallingConv::C);
 ptr_call_1380->setTailCall(true);
 AttributeSet ptr_call_1380_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_1380_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call_1380->setAttributes(ptr_call_1380_PAL);

CastInst* ptr_1381 = new BitCastInst(ptr_call_1380, PointerTy_1, "", label_entry_1373);
ICmpInst* int1_cmp28 = new ICmpInst(*label_entry_1373, ICmpInst::ICMP_EQ, int64_nrows_1372, const_int64_274, "cmp28");
BranchInst::Create(label_for_end15_1378, label_for_body_lr_ph_1374, int1_cmp28, label_entry_1373);

// Block for.body.lr.ph (label_for_body_lr_ph_1374)
ICmpInst* int1_cmp625 = new ICmpInst(*label_for_body_lr_ph_1374, ICmpInst::ICMP_EQ, int64_ncols, const_int64_274, "cmp625");
BinaryOperator* int64_1383 = BinaryOperator::Create(Instruction::Add, int64_nrows_1372, const_int64_281, "", label_for_body_lr_ph_1374);
BranchInst::Create(label_for_body_1375, label_for_body_lr_ph_1374);

// Block for.body (label_for_body_1375)
Argument* fwdref_1386 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv_1385 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv", label_for_body_1375);
int64_indvars_iv_1385->addIncoming(const_int64_274, label_for_body_lr_ph_1374);
int64_indvars_iv_1385->addIncoming(fwdref_1386, label_for_inc13_1376);

CallInst* ptr_call3 = CallInst::Create(func_malloc, int64_ncols, "call3", label_for_body_1375);
ptr_call3->setCallingConv(CallingConv::C);
ptr_call3->setTailCall(true);
AttributeSet ptr_call3_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call3_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call3->setAttributes(ptr_call3_PAL);

GetElementPtrInst* ptr_arrayidx_1387 = GetElementPtrInst::Create(ptr_1381, int64_indvars_iv_1385, "arrayidx", label_for_body_1375);
StoreInst* void_1388 = new StoreInst(ptr_call3, ptr_arrayidx_1387, false, label_for_body_1375);
void_1388->setAlignment(8);
BranchInst::Create(label_for_inc13_1376, label_for_body8_lr_ph, int1_cmp625, label_for_body_1375);

// Block for.body8.lr.ph (label_for_body8_lr_ph)
std::vector<Value*> void_1390_params;
void_1390_params.push_back(ptr_call3);
void_1390_params.push_back(int8_init);
void_1390_params.push_back(int64_ncols);
void_1390_params.push_back(const_int32_282);
void_1390_params.push_back(const_int1_297);
CallInst* void_1390 = CallInst::Create(func_llvm_memset_p0i8_i64, void_1390_params, "", label_for_body8_lr_ph);
void_1390->setCallingConv(CallingConv::C);
void_1390->setTailCall(false);
AttributeSet void_1390_PAL;
void_1390->setAttributes(void_1390_PAL);

BranchInst::Create(label_for_inc13_1376, label_for_body8_lr_ph);

// Block for.inc13 (label_for_inc13_1376)
BinaryOperator* int64_indvars_iv_next_1392 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv_1385, const_int64_278, "indvars.iv.next", label_for_inc13_1376);
ICmpInst* int1_exitcond_1393 = new ICmpInst(*label_for_inc13_1376, ICmpInst::ICMP_EQ, int64_indvars_iv_1385, int64_1383, "exitcond");
BranchInst::Create(label_for_end15_loopexit_1377, label_for_body_1375, int1_exitcond_1393, label_for_inc13_1376);

// Block for.end15.loopexit (label_for_end15_loopexit_1377)
BranchInst::Create(label_for_end15_1378, label_for_end15_loopexit_1377);

// Block for.end15 (label_for_end15_1378)
ReturnInst::Create(mod->getContext(), ptr_1381, label_for_end15_1378);

// Resolve Forward References
fwdref_1386->replaceAllUsesWith(int64_indvars_iv_next_1392); delete fwdref_1386;

}

// Function: jpeg_decompress (func_jpeg_decompress)
{
 Function::arg_iterator args = func_jpeg_decompress->arg_begin();
 Value* ptr_data = args++;
 ptr_data->setName("data");
 Value* ptr_nx = args++;
 ptr_nx->setName("nx");
 Value* ptr_ny = args++;
 ptr_ny->setName("ny");
 Value* ptr_nc = args++;
 ptr_nc->setName("nc");
 Value* ptr_filename = args++;
 ptr_filename->setName("filename");
 
 BasicBlock* label_entry_1397 = BasicBlock::Create(mod->getContext(), "entry",func_jpeg_decompress,0);
 BasicBlock* label_if_then_1398 = BasicBlock::Create(mod->getContext(), "if.then",func_jpeg_decompress,0);
 BasicBlock* label_if_end_1399 = BasicBlock::Create(mod->getContext(), "if.end",func_jpeg_decompress,0);
 BasicBlock* label_if_then7 = BasicBlock::Create(mod->getContext(), "if.then7",func_jpeg_decompress,0);
 BasicBlock* label_if_end10_1400 = BasicBlock::Create(mod->getContext(), "if.end10",func_jpeg_decompress,0);
 BasicBlock* label_if_then13 = BasicBlock::Create(mod->getContext(), "if.then13",func_jpeg_decompress,0);
 BasicBlock* label_if_end15 = BasicBlock::Create(mod->getContext(), "if.end15",func_jpeg_decompress,0);
 BasicBlock* label_for_body_lr_ph_i = BasicBlock::Create(mod->getContext(), "for.body.lr.ph.i",func_jpeg_decompress,0);
 BasicBlock* label_for_body_i = BasicBlock::Create(mod->getContext(), "for.body.i",func_jpeg_decompress,0);
 BasicBlock* label_for_body8_lr_ph_i = BasicBlock::Create(mod->getContext(), "for.body8.lr.ph.i",func_jpeg_decompress,0);
 BasicBlock* label_for_inc13_i_1401 = BasicBlock::Create(mod->getContext(), "for.inc13.i",func_jpeg_decompress,0);
 BasicBlock* label_while_cond_preheader_loopexit = BasicBlock::Create(mod->getContext(), "while.cond.preheader.loopexit",func_jpeg_decompress,0);
 BasicBlock* label_while_cond_preheader = BasicBlock::Create(mod->getContext(), "while.cond.preheader",func_jpeg_decompress,0);
 BasicBlock* label_while_body_preheader = BasicBlock::Create(mod->getContext(), "while.body.preheader",func_jpeg_decompress,0);
 BasicBlock* label_while_body_1402 = BasicBlock::Create(mod->getContext(), "while.body",func_jpeg_decompress,0);
 BasicBlock* label_while_end_loopexit = BasicBlock::Create(mod->getContext(), "while.end.loopexit",func_jpeg_decompress,0);
 BasicBlock* label_while_end_1403 = BasicBlock::Create(mod->getContext(), "while.end",func_jpeg_decompress,0);
 BasicBlock* label_cleanup = BasicBlock::Create(mod->getContext(), "cleanup",func_jpeg_decompress,0);
 
 // Block entry (label_entry_1397)
 AllocaInst* ptr_err = new AllocaInst(StructTy_struct_jpeg_error_mgr, "err", label_entry_1397);
 ptr_err->setAlignment(8);
 AllocaInst* ptr_cinfo = new AllocaInst(StructTy_struct_jpeg_decompress_struct, "cinfo", label_entry_1397);
 ptr_cinfo->setAlignment(8);
 CastInst* ptr_1404 = new BitCastInst(ptr_err, PointerTy_2, "", label_entry_1397);
 std::vector<Value*> void_1405_params;
 void_1405_params.push_back(const_int64_324);
 void_1405_params.push_back(ptr_1404);
 CallInst* void_1405 = CallInst::Create(func_llvm_lifetime_start, void_1405_params, "", label_entry_1397);
 void_1405->setCallingConv(CallingConv::C);
 void_1405->setTailCall(false);
 AttributeSet void_1405_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1405_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1405->setAttributes(void_1405_PAL);
 
 CastInst* ptr_1406 = new BitCastInst(ptr_cinfo, PointerTy_2, "", label_entry_1397);
 std::vector<Value*> void_1407_params;
 void_1407_params.push_back(const_int64_325);
 void_1407_params.push_back(ptr_1406);
 CallInst* void_1407 = CallInst::Create(func_llvm_lifetime_start, void_1407_params, "", label_entry_1397);
 void_1407->setCallingConv(CallingConv::C);
 void_1407->setTailCall(false);
 AttributeSet void_1407_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1407_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1407->setAttributes(void_1407_PAL);
 
 CallInst* ptr_call_1408 = CallInst::Create(func_jpeg_std_error, ptr_err, "call", label_entry_1397);
 ptr_call_1408->setCallingConv(CallingConv::C);
 ptr_call_1408->setTailCall(false);
 AttributeSet ptr_call_1408_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call_1408_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call_1408->setAttributes(ptr_call_1408_PAL);
 
 std::vector<Value*> ptr_err1_indices;
 ptr_err1_indices.push_back(const_int64_274);
 ptr_err1_indices.push_back(const_int32_248);
 Instruction* ptr_err1 = GetElementPtrInst::Create(ptr_cinfo, ptr_err1_indices, "err1", label_entry_1397);
 StoreInst* void_1409 = new StoreInst(ptr_call_1408, ptr_err1, false, label_entry_1397);
 void_1409->setAlignment(8);
 std::vector<Value*> void_1410_params;
 void_1410_params.push_back(ptr_cinfo);
 void_1410_params.push_back(const_int32_326);
 void_1410_params.push_back(const_int64_325);
 CallInst* void_1410 = CallInst::Create(func_jpeg_CreateDecompress, void_1410_params, "", label_entry_1397);
 void_1410->setCallingConv(CallingConv::C);
 void_1410->setTailCall(false);
 AttributeSet void_1410_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1410_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1410->setAttributes(void_1410_PAL);
 
 std::vector<Value*> ptr_call2_params;
 ptr_call2_params.push_back(ptr_filename);
 ptr_call2_params.push_back(const_ptr_327);
 CallInst* ptr_call2 = CallInst::Create(func_fopen, ptr_call2_params, "call2", label_entry_1397);
 ptr_call2->setCallingConv(CallingConv::C);
 ptr_call2->setTailCall(false);
 AttributeSet ptr_call2_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call2_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call2->setAttributes(ptr_call2_PAL);
 
 ICmpInst* int1_cmp_1411 = new ICmpInst(*label_entry_1397, ICmpInst::ICMP_EQ, ptr_call2, const_ptr_328, "cmp");
 BranchInst::Create(label_if_then_1398, label_if_end_1399, int1_cmp_1411, label_entry_1397);
 
 // Block if.then (label_if_then_1398)
 LoadInst* ptr_1413 = new LoadInst(gvar_ptr_stderr, "", false, label_if_then_1398);
 ptr_1413->setAlignment(8);
 std::vector<Value*> int32_call3_params;
 int32_call3_params.push_back(ptr_1413);
 int32_call3_params.push_back(const_ptr_329);
 int32_call3_params.push_back(ptr_filename);
 CallInst* int32_call3 = CallInst::Create(func_fprintf, int32_call3_params, "call3", label_if_then_1398);
 int32_call3->setCallingConv(CallingConv::C);
 int32_call3->setTailCall(false);
 AttributeSet int32_call3_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call3_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call3->setAttributes(int32_call3_PAL);
 
 BranchInst::Create(label_cleanup, label_if_then_1398);
 
 // Block if.end (label_if_end_1399)
 std::vector<Value*> void_1415_params;
 void_1415_params.push_back(ptr_cinfo);
 void_1415_params.push_back(ptr_call2);
 CallInst* void_1415 = CallInst::Create(func_jpeg_stdio_src, void_1415_params, "", label_if_end_1399);
 void_1415->setCallingConv(CallingConv::C);
 void_1415->setTailCall(false);
 AttributeSet void_1415_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1415_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1415->setAttributes(void_1415_PAL);
 
 std::vector<Value*> int32_call4_1416_params;
 int32_call4_1416_params.push_back(ptr_cinfo);
 int32_call4_1416_params.push_back(const_int32_282);
 CallInst* int32_call4_1416 = CallInst::Create(func_jpeg_read_header, int32_call4_1416_params, "call4", label_if_end_1399);
 int32_call4_1416->setCallingConv(CallingConv::C);
 int32_call4_1416->setTailCall(false);
 AttributeSet int32_call4_1416_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call4_1416_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call4_1416->setAttributes(int32_call4_1416_PAL);
 
 CallInst* int32_call5 = CallInst::Create(func_jpeg_start_decompress, ptr_cinfo, "call5", label_if_end_1399);
 int32_call5->setCallingConv(CallingConv::C);
 int32_call5->setTailCall(false);
 AttributeSet int32_call5_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call5_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call5->setAttributes(int32_call5_PAL);
 
 std::vector<Value*> ptr_output_width_indices;
 ptr_output_width_indices.push_back(const_int64_274);
 ptr_output_width_indices.push_back(const_int32_330);
 Instruction* ptr_output_width = GetElementPtrInst::Create(ptr_cinfo, ptr_output_width_indices, "output_width", label_if_end_1399);
 CastInst* ptr_1417 = new BitCastInst(ptr_output_width, PointerTy_200, "", label_if_end_1399);
 LoadInst* int64_1418 = new LoadInst(ptr_1417, "", false, label_if_end_1399);
 int64_1418->setAlignment(8);
 CastInst* int32_1419 = new TruncInst(int64_1418, IntegerType::get(mod->getContext(), 32), "", label_if_end_1399);
 StoreInst* void_1420 = new StoreInst(int32_1419, ptr_nx, false, label_if_end_1399);
 void_1420->setAlignment(4);
 std::vector<Value*> ptr_output_height_indices;
 ptr_output_height_indices.push_back(const_int64_274);
 ptr_output_height_indices.push_back(const_int32_331);
 Instruction* ptr_output_height = GetElementPtrInst::Create(ptr_cinfo, ptr_output_height_indices, "output_height", label_if_end_1399);
 BinaryOperator* int64_1421 = BinaryOperator::Create(Instruction::LShr, int64_1418, const_int64_280, "", label_if_end_1399);
 CastInst* int32_1422 = new TruncInst(int64_1421, IntegerType::get(mod->getContext(), 32), "", label_if_end_1399);
 StoreInst* void_1423 = new StoreInst(int32_1422, ptr_ny, false, label_if_end_1399);
 void_1423->setAlignment(4);
 std::vector<Value*> ptr_actual_number_of_colors_indices;
 ptr_actual_number_of_colors_indices.push_back(const_int64_274);
 ptr_actual_number_of_colors_indices.push_back(const_int32_332);
 Instruction* ptr_actual_number_of_colors = GetElementPtrInst::Create(ptr_cinfo, ptr_actual_number_of_colors_indices, "actual_number_of_colors", label_if_end_1399);
 LoadInst* int32_1424 = new LoadInst(ptr_actual_number_of_colors, "", false, label_if_end_1399);
 int32_1424->setAlignment(4);
 StoreInst* void_1425 = new StoreInst(int32_1424, ptr_nc, false, label_if_end_1399);
 void_1425->setAlignment(4);
 ICmpInst* int1_cmp6_1426 = new ICmpInst(*label_if_end_1399, ICmpInst::ICMP_UGT, int32_1424, const_int32_282, "cmp6");
 BranchInst::Create(label_if_then7, label_if_end10_1400, int1_cmp6_1426, label_if_end_1399);
 
 // Block if.then7 (label_if_then7)
 LoadInst* ptr_1428 = new LoadInst(gvar_ptr_stderr, "", false, label_if_then7);
 ptr_1428->setAlignment(8);
 std::vector<Value*> int32_call8_1429_params;
 int32_call8_1429_params.push_back(ptr_1428);
 int32_call8_1429_params.push_back(const_ptr_333);
 int32_call8_1429_params.push_back(int32_1424);
 CallInst* int32_call8_1429 = CallInst::Create(func_fprintf, int32_call8_1429_params, "call8", label_if_then7);
 int32_call8_1429->setCallingConv(CallingConv::C);
 int32_call8_1429->setTailCall(false);
 AttributeSet int32_call8_1429_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call8_1429_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call8_1429->setAttributes(int32_call8_1429_PAL);
 
 CallInst* int32_call9 = CallInst::Create(func_jpeg_finish_decompress, ptr_cinfo, "call9", label_if_then7);
 int32_call9->setCallingConv(CallingConv::C);
 int32_call9->setTailCall(false);
 AttributeSet int32_call9_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call9_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call9->setAttributes(int32_call9_PAL);
 
 CallInst* void_1430 = CallInst::Create(func_jpeg_destroy_decompress, ptr_cinfo, "", label_if_then7);
 void_1430->setCallingConv(CallingConv::C);
 void_1430->setTailCall(false);
 AttributeSet void_1430_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1430_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1430->setAttributes(void_1430_PAL);
 
 BranchInst::Create(label_cleanup, label_if_then7);
 
 // Block if.end10 (label_if_end10_1400)
 LoadInst* int32_1432 = new LoadInst(ptr_nx, "", false, label_if_end10_1400);
 int32_1432->setAlignment(4);
 ICmpInst* int1_cmp11_1433 = new ICmpInst(*label_if_end10_1400, ICmpInst::ICMP_EQ, int32_1432, const_int32_248, "cmp11");
 LoadInst* int32_1434 = new LoadInst(ptr_ny, "", false, label_if_end10_1400);
 int32_1434->setAlignment(4);
 BinaryOperator* int32_1435 = BinaryOperator::Create(Instruction::Or, int32_1432, int32_1434, "", label_if_end10_1400);
 ICmpInst* int1_1436 = new ICmpInst(*label_if_end10_1400, ICmpInst::ICMP_EQ, int32_1435, const_int32_248, "");
 BranchInst::Create(label_if_then13, label_if_end15, int1_1436, label_if_end10_1400);
 
 // Block if.then13 (label_if_then13)
 LoadInst* ptr_1438 = new LoadInst(gvar_ptr_stderr, "", false, label_if_then13);
 ptr_1438->setAlignment(8);
 std::vector<Value*> int64_1439_params;
 int64_1439_params.push_back(const_ptr_334);
 int64_1439_params.push_back(const_int64_335);
 int64_1439_params.push_back(const_int64_278);
 int64_1439_params.push_back(ptr_1438);
 CallInst* int64_1439 = CallInst::Create(func_fwrite, int64_1439_params, "", label_if_then13);
 int64_1439->setCallingConv(CallingConv::C);
 int64_1439->setTailCall(false);
 AttributeSet int64_1439_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int64_1439_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int64_1439->setAttributes(int64_1439_PAL);
 
 BranchInst::Create(label_cleanup, label_if_then13);
 
 // Block if.end15 (label_if_end15)
 CastInst* int64_conv_1441 = new ZExtInst(int32_1434, IntegerType::get(mod->getContext(), 64), "conv", label_if_end15);
 CastInst* int64_conv16_1442 = new ZExtInst(int32_1432, IntegerType::get(mod->getContext(), 64), "conv16", label_if_end15);
 BinaryOperator* int64_mul_i = BinaryOperator::Create(Instruction::Shl, int64_conv_1441, const_int64_323, "mul.i", label_if_end15);
 CallInst* ptr_call_i = CallInst::Create(func_malloc, int64_mul_i, "call.i", label_if_end15);
 ptr_call_i->setCallingConv(CallingConv::C);
 ptr_call_i->setTailCall(false);
 AttributeSet ptr_call_i_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call_i->setAttributes(ptr_call_i_PAL);

CastInst* ptr_1443 = new BitCastInst(ptr_call_i, PointerTy_1, "", label_if_end15);
ICmpInst* int1_cmp28_i = new ICmpInst(*label_if_end15, ICmpInst::ICMP_EQ, int32_1434, const_int32_248, "cmp28.i");
BranchInst::Create(label_while_cond_preheader, label_for_body_lr_ph_i, int1_cmp28_i, label_if_end15);

// Block for.body.lr.ph.i (label_for_body_lr_ph_i)
BinaryOperator* int64_1445 = BinaryOperator::Create(Instruction::Add, int64_conv_1441, const_int64_281, "", label_for_body_lr_ph_i);
BranchInst::Create(label_for_body_i, label_for_body_lr_ph_i);

// Block for.body.i (label_for_body_i)
Argument* fwdref_1447 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv_i = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv.i", label_for_body_i);
int64_indvars_iv_i->addIncoming(const_int64_274, label_for_body_lr_ph_i);
int64_indvars_iv_i->addIncoming(fwdref_1447, label_for_inc13_i_1401);

CallInst* ptr_call3_i = CallInst::Create(func_malloc, int64_conv16_1442, "call3.i", label_for_body_i);
ptr_call3_i->setCallingConv(CallingConv::C);
ptr_call3_i->setTailCall(false);
AttributeSet ptr_call3_i_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call3_i_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call3_i->setAttributes(ptr_call3_i_PAL);

GetElementPtrInst* ptr_arrayidx_i_1448 = GetElementPtrInst::Create(ptr_1443, int64_indvars_iv_i, "arrayidx.i", label_for_body_i);
StoreInst* void_1449 = new StoreInst(ptr_call3_i, ptr_arrayidx_i_1448, false, label_for_body_i);
void_1449->setAlignment(8);
BranchInst::Create(label_for_inc13_i_1401, label_for_body8_lr_ph_i, int1_cmp11_1433, label_for_body_i);

// Block for.body8.lr.ph.i (label_for_body8_lr_ph_i)
std::vector<Value*> void_1451_params;
void_1451_params.push_back(ptr_call3_i);
void_1451_params.push_back(const_int8_279);
void_1451_params.push_back(int64_conv16_1442);
void_1451_params.push_back(const_int32_282);
void_1451_params.push_back(const_int1_297);
CallInst* void_1451 = CallInst::Create(func_llvm_memset_p0i8_i64, void_1451_params, "", label_for_body8_lr_ph_i);
void_1451->setCallingConv(CallingConv::C);
void_1451->setTailCall(false);
AttributeSet void_1451_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1451_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1451->setAttributes(void_1451_PAL);

BranchInst::Create(label_for_inc13_i_1401, label_for_body8_lr_ph_i);

// Block for.inc13.i (label_for_inc13_i_1401)
BinaryOperator* int64_indvars_iv_next_i_1453 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv_i, const_int64_278, "indvars.iv.next.i", label_for_inc13_i_1401);
ICmpInst* int1_exitcond_i = new ICmpInst(*label_for_inc13_i_1401, ICmpInst::ICMP_EQ, int64_indvars_iv_i, int64_1445, "exitcond.i");
BranchInst::Create(label_while_cond_preheader_loopexit, label_for_body_i, int1_exitcond_i, label_for_inc13_i_1401);

// Block while.cond.preheader.loopexit (label_while_cond_preheader_loopexit)
BranchInst::Create(label_while_cond_preheader, label_while_cond_preheader_loopexit);

// Block while.cond.preheader (label_while_cond_preheader)
std::vector<Value*> ptr_output_scanline_indices;
ptr_output_scanline_indices.push_back(const_int64_274);
ptr_output_scanline_indices.push_back(const_int32_336);
Instruction* ptr_output_scanline = GetElementPtrInst::Create(ptr_cinfo, ptr_output_scanline_indices, "output_scanline", label_while_cond_preheader);
LoadInst* int32_1456 = new LoadInst(ptr_output_scanline, "", false, label_while_cond_preheader);
int32_1456->setAlignment(8);
ICmpInst* int1_cmp1935 = new ICmpInst(*label_while_cond_preheader, ICmpInst::ICMP_ULT, int32_1456, int32_1422, "cmp1935");
BranchInst::Create(label_while_body_preheader, label_while_end_1403, int1_cmp1935, label_while_cond_preheader);

// Block while.body.preheader (label_while_body_preheader)
BranchInst::Create(label_while_body_1402, label_while_body_preheader);

// Block while.body (label_while_body_1402)
Argument* fwdref_1460 = new Argument(IntegerType::get(mod->getContext(), 32));
PHINode* int32_1459 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "", label_while_body_1402);
int32_1459->addIncoming(fwdref_1460, label_while_body_1402);
int32_1459->addIncoming(int32_1456, label_while_body_preheader);

CastInst* int64_idxprom_1461 = new ZExtInst(int32_1459, IntegerType::get(mod->getContext(), 64), "idxprom", label_while_body_1402);
GetElementPtrInst* ptr_arrayidx_1462 = GetElementPtrInst::Create(ptr_1443, int64_idxprom_1461, "arrayidx", label_while_body_1402);
std::vector<Value*> int32_call22_params;
int32_call22_params.push_back(ptr_cinfo);
int32_call22_params.push_back(ptr_arrayidx_1462);
int32_call22_params.push_back(const_int32_282);
CallInst* int32_call22 = CallInst::Create(func_jpeg_read_scanlines, int32_call22_params, "call22", label_while_body_1402);
int32_call22->setCallingConv(CallingConv::C);
int32_call22->setTailCall(false);
AttributeSet int32_call22_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call22_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call22->setAttributes(int32_call22_PAL);

LoadInst* int32_1463 = new LoadInst(ptr_output_scanline, "", false, label_while_body_1402);
int32_1463->setAlignment(8);
LoadInst* int32_1464 = new LoadInst(ptr_output_height, "", false, label_while_body_1402);
int32_1464->setAlignment(4);
ICmpInst* int1_cmp19_1465 = new ICmpInst(*label_while_body_1402, ICmpInst::ICMP_ULT, int32_1463, int32_1464, "cmp19");
BranchInst::Create(label_while_body_1402, label_while_end_loopexit, int1_cmp19_1465, label_while_body_1402);

// Block while.end.loopexit (label_while_end_loopexit)
BranchInst::Create(label_while_end_1403, label_while_end_loopexit);

// Block while.end (label_while_end_1403)
CastInst* ptr_1468 = new BitCastInst(ptr_data, PointerTy_1, "", label_while_end_1403);
StoreInst* void_1469 = new StoreInst(ptr_call_i, ptr_1468, false, label_while_end_1403);
void_1469->setAlignment(8);
CallInst* int32_call23 = CallInst::Create(func_jpeg_finish_decompress, ptr_cinfo, "call23", label_while_end_1403);
int32_call23->setCallingConv(CallingConv::C);
int32_call23->setTailCall(false);
AttributeSet int32_call23_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call23_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call23->setAttributes(int32_call23_PAL);

CallInst* void_1470 = CallInst::Create(func_jpeg_destroy_decompress, ptr_cinfo, "", label_while_end_1403);
void_1470->setCallingConv(CallingConv::C);
void_1470->setTailCall(false);
AttributeSet void_1470_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1470_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1470->setAttributes(void_1470_PAL);

CallInst* int32_call24 = CallInst::Create(func_fclose, ptr_call2, "call24", label_while_end_1403);
int32_call24->setCallingConv(CallingConv::C);
int32_call24->setTailCall(false);
AttributeSet int32_call24_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int32_call24_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int32_call24->setAttributes(int32_call24_PAL);

BranchInst::Create(label_cleanup, label_while_end_1403);

// Block cleanup (label_cleanup)
PHINode* int32_retval_0 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 4, "retval.0", label_cleanup);
int32_retval_0->addIncoming(const_int32_282, label_if_then_1398);
int32_retval_0->addIncoming(const_int32_282, label_if_then7);
int32_retval_0->addIncoming(const_int32_282, label_if_then13);
int32_retval_0->addIncoming(const_int32_248, label_while_end_1403);

std::vector<Value*> void_1472_params;
void_1472_params.push_back(const_int64_325);
void_1472_params.push_back(ptr_1406);
CallInst* void_1472 = CallInst::Create(func_llvm_lifetime_end, void_1472_params, "", label_cleanup);
void_1472->setCallingConv(CallingConv::C);
void_1472->setTailCall(false);
AttributeSet void_1472_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1472_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1472->setAttributes(void_1472_PAL);

std::vector<Value*> void_1473_params;
void_1473_params.push_back(const_int64_324);
void_1473_params.push_back(ptr_1404);
CallInst* void_1473 = CallInst::Create(func_llvm_lifetime_end, void_1473_params, "", label_cleanup);
void_1473->setCallingConv(CallingConv::C);
void_1473->setTailCall(false);
AttributeSet void_1473_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_1473_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_1473->setAttributes(void_1473_PAL);

ReturnInst::Create(mod->getContext(), int32_retval_0, label_cleanup);

// Resolve Forward References
fwdref_1447->replaceAllUsesWith(int64_indvars_iv_next_i_1453); delete fwdref_1447;
fwdref_1460->replaceAllUsesWith(int32_1463); delete fwdref_1460;

}

// Function: jpeg_compress (func_jpeg_compress)
{
 Function::arg_iterator args = func_jpeg_compress->arg_begin();
 Value* ptr_data_1475 = args++;
 ptr_data_1475->setName("data");
 Value* int32_nx_1476 = args++;
 int32_nx_1476->setName("nx");
 Value* int32_ny_1477 = args++;
 int32_ny_1477->setName("ny");
 Value* int32_nc = args++;
 int32_nc->setName("nc");
 Value* ptr_filename_1478 = args++;
 ptr_filename_1478->setName("filename");
 
 BasicBlock* label_entry_1479 = BasicBlock::Create(mod->getContext(), "entry",func_jpeg_compress,0);
 BasicBlock* label_if_then_1480 = BasicBlock::Create(mod->getContext(), "if.then",func_jpeg_compress,0);
 BasicBlock* label_if_end_1481 = BasicBlock::Create(mod->getContext(), "if.end",func_jpeg_compress,0);
 BasicBlock* label_if_then3_1482 = BasicBlock::Create(mod->getContext(), "if.then3",func_jpeg_compress,0);
 BasicBlock* label_if_then5 = BasicBlock::Create(mod->getContext(), "if.then5",func_jpeg_compress,0);
 BasicBlock* label_if_else7_1483 = BasicBlock::Create(mod->getContext(), "if.else7",func_jpeg_compress,0);
 BasicBlock* label_if_end10_1484 = BasicBlock::Create(mod->getContext(), "if.end10",func_jpeg_compress,0);
 BasicBlock* label_while_body_preheader_1485 = BasicBlock::Create(mod->getContext(), "while.body.preheader",func_jpeg_compress,0);
 BasicBlock* label_while_body_1486 = BasicBlock::Create(mod->getContext(), "while.body",func_jpeg_compress,0);
 BasicBlock* label_while_end_loopexit_1487 = BasicBlock::Create(mod->getContext(), "while.end.loopexit",func_jpeg_compress,0);
 BasicBlock* label_while_end_1488 = BasicBlock::Create(mod->getContext(), "while.end",func_jpeg_compress,0);
 BasicBlock* label_cleanup_1489 = BasicBlock::Create(mod->getContext(), "cleanup",func_jpeg_compress,0);
 BasicBlock* label_return_1490 = BasicBlock::Create(mod->getContext(), "return",func_jpeg_compress,0);
 
 // Block entry (label_entry_1479)
 AllocaInst* ptr_cinfo_1491 = new AllocaInst(StructTy_struct_jpeg_compress_struct, "cinfo", label_entry_1479);
 ptr_cinfo_1491->setAlignment(8);
 AllocaInst* ptr_jerr = new AllocaInst(StructTy_struct_jpeg_error_mgr, "jerr", label_entry_1479);
 ptr_jerr->setAlignment(8);
 AllocaInst* ptr_row_pointer = new AllocaInst(PointerTy_2, "row_pointer", label_entry_1479);
 ptr_row_pointer->setAlignment(8);
 std::vector<Value*> ptr_call_1492_params;
 ptr_call_1492_params.push_back(ptr_filename_1478);
 ptr_call_1492_params.push_back(const_ptr_337);
 CallInst* ptr_call_1492 = CallInst::Create(func_fopen, ptr_call_1492_params, "call", label_entry_1479);
 ptr_call_1492->setCallingConv(CallingConv::C);
 ptr_call_1492->setTailCall(true);
 AttributeSet ptr_call_1492_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call_1492_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call_1492->setAttributes(ptr_call_1492_PAL);
 
 ICmpInst* int1_tobool_1493 = new ICmpInst(*label_entry_1479, ICmpInst::ICMP_EQ, ptr_call_1492, const_ptr_328, "tobool");
 BranchInst::Create(label_if_then_1480, label_if_end_1481, int1_tobool_1493, label_entry_1479);
 
 // Block if.then (label_if_then_1480)
 LoadInst* ptr_1495 = new LoadInst(gvar_ptr_stderr, "", false, label_if_then_1480);
 ptr_1495->setAlignment(8);
 std::vector<Value*> int32_call1_1496_params;
 int32_call1_1496_params.push_back(ptr_1495);
 int32_call1_1496_params.push_back(const_ptr_338);
 int32_call1_1496_params.push_back(ptr_filename_1478);
 CallInst* int32_call1_1496 = CallInst::Create(func_fprintf, int32_call1_1496_params, "call1", label_if_then_1480);
 int32_call1_1496->setCallingConv(CallingConv::C);
 int32_call1_1496->setTailCall(true);
 AttributeSet int32_call1_1496_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call1_1496_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call1_1496->setAttributes(int32_call1_1496_PAL);
 
 BranchInst::Create(label_return_1490, label_if_then_1480);
 
 // Block if.end (label_if_end_1481)
 CastInst* ptr_1498 = new BitCastInst(ptr_cinfo_1491, PointerTy_2, "", label_if_end_1481);
 std::vector<Value*> void_1499_params;
 void_1499_params.push_back(const_int64_339);
 void_1499_params.push_back(ptr_1498);
 CallInst* void_1499 = CallInst::Create(func_llvm_lifetime_start, void_1499_params, "", label_if_end_1481);
 void_1499->setCallingConv(CallingConv::C);
 void_1499->setTailCall(false);
 AttributeSet void_1499_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1499_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1499->setAttributes(void_1499_PAL);
 
 CastInst* ptr_1500 = new BitCastInst(ptr_jerr, PointerTy_2, "", label_if_end_1481);
 std::vector<Value*> void_1501_params;
 void_1501_params.push_back(const_int64_324);
 void_1501_params.push_back(ptr_1500);
 CallInst* void_1501 = CallInst::Create(func_llvm_lifetime_start, void_1501_params, "", label_if_end_1481);
 void_1501->setCallingConv(CallingConv::C);
 void_1501->setTailCall(false);
 AttributeSet void_1501_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1501_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1501->setAttributes(void_1501_PAL);
 
 CallInst* ptr_call2_1502 = CallInst::Create(func_jpeg_std_error, ptr_jerr, "call2", label_if_end_1481);
 ptr_call2_1502->setCallingConv(CallingConv::C);
 ptr_call2_1502->setTailCall(false);
 AttributeSet ptr_call2_1502_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  ptr_call2_1502_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 ptr_call2_1502->setAttributes(ptr_call2_1502_PAL);
 
 std::vector<Value*> ptr_err_1503_indices;
 ptr_err_1503_indices.push_back(const_int64_274);
 ptr_err_1503_indices.push_back(const_int32_248);
 Instruction* ptr_err_1503 = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_err_1503_indices, "err", label_if_end_1481);
 StoreInst* void_1504 = new StoreInst(ptr_call2_1502, ptr_err_1503, false, label_if_end_1481);
 void_1504->setAlignment(8);
 std::vector<Value*> void_1505_params;
 void_1505_params.push_back(ptr_cinfo_1491);
 void_1505_params.push_back(const_int32_326);
 void_1505_params.push_back(const_int64_339);
 CallInst* void_1505 = CallInst::Create(func_jpeg_CreateCompress, void_1505_params, "", label_if_end_1481);
 void_1505->setCallingConv(CallingConv::C);
 void_1505->setTailCall(false);
 AttributeSet void_1505_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1505_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1505->setAttributes(void_1505_PAL);
 
 std::vector<Value*> void_1506_params;
 void_1506_params.push_back(ptr_cinfo_1491);
 void_1506_params.push_back(ptr_call_1492);
 CallInst* void_1506 = CallInst::Create(func_jpeg_stdio_dest, void_1506_params, "", label_if_end_1481);
 void_1506->setCallingConv(CallingConv::C);
 void_1506->setTailCall(false);
 AttributeSet void_1506_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1506_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1506->setAttributes(void_1506_PAL);
 
 std::vector<Value*> ptr_image_width_indices;
 ptr_image_width_indices.push_back(const_int64_274);
 ptr_image_width_indices.push_back(const_int32_304);
 Instruction* ptr_image_width = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_image_width_indices, "image_width", label_if_end_1481);
 StoreInst* void_1507 = new StoreInst(int32_nx_1476, ptr_image_width, false, label_if_end_1481);
 void_1507->setAlignment(8);
 std::vector<Value*> ptr_image_height_indices;
 ptr_image_height_indices.push_back(const_int64_274);
 ptr_image_height_indices.push_back(const_int32_340);
 Instruction* ptr_image_height = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_image_height_indices, "image_height", label_if_end_1481);
 StoreInst* void_1508 = new StoreInst(int32_ny_1477, ptr_image_height, false, label_if_end_1481);
 void_1508->setAlignment(4);
 std::vector<Value*> ptr_input_components_indices;
 ptr_input_components_indices.push_back(const_int64_274);
 ptr_input_components_indices.push_back(const_int32_341);
 Instruction* ptr_input_components = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_input_components_indices, "input_components", label_if_end_1481);
 StoreInst* void_1509 = new StoreInst(int32_nc, ptr_input_components, false, label_if_end_1481);
 void_1509->setAlignment(8);
 SwitchInst* void_1510 = SwitchInst::Create(int32_nc, label_if_else7_1483, 2, label_if_end_1481);
 void_1510->addCase(const_int32_282, label_if_then3_1482);
 void_1510->addCase(const_int32_302, label_if_then5);
 
 
 // Block if.then3 (label_if_then3_1482)
 std::vector<Value*> ptr_in_color_space_indices;
 ptr_in_color_space_indices.push_back(const_int64_274);
 ptr_in_color_space_indices.push_back(const_int32_309);
 Instruction* ptr_in_color_space = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_in_color_space_indices, "in_color_space", label_if_then3_1482);
 StoreInst* void_1511 = new StoreInst(const_int32_282, ptr_in_color_space, false, label_if_then3_1482);
 void_1511->setAlignment(4);
 BranchInst::Create(label_if_end10_1484, label_if_then3_1482);
 
 // Block if.then5 (label_if_then5)
 std::vector<Value*> ptr_in_color_space6_indices;
 ptr_in_color_space6_indices.push_back(const_int64_274);
 ptr_in_color_space6_indices.push_back(const_int32_309);
 Instruction* ptr_in_color_space6 = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_in_color_space6_indices, "in_color_space6", label_if_then5);
 StoreInst* void_1513 = new StoreInst(const_int32_275, ptr_in_color_space6, false, label_if_then5);
 void_1513->setAlignment(4);
 BranchInst::Create(label_if_end10_1484, label_if_then5);
 
 // Block if.else7 (label_if_else7_1483)
 LoadInst* ptr_1515 = new LoadInst(gvar_ptr_stderr, "", false, label_if_else7_1483);
 ptr_1515->setAlignment(8);
 std::vector<Value*> int32_call8_1516_params;
 int32_call8_1516_params.push_back(ptr_1515);
 int32_call8_1516_params.push_back(const_ptr_342);
 int32_call8_1516_params.push_back(int32_nc);
 CallInst* int32_call8_1516 = CallInst::Create(func_fprintf, int32_call8_1516_params, "call8", label_if_else7_1483);
 int32_call8_1516->setCallingConv(CallingConv::C);
 int32_call8_1516->setTailCall(false);
 AttributeSet int32_call8_1516_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call8_1516_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call8_1516->setAttributes(int32_call8_1516_PAL);
 
 BranchInst::Create(label_cleanup_1489, label_if_else7_1483);
 
 // Block if.end10 (label_if_end10_1484)
 CallInst* void_1518 = CallInst::Create(func_jpeg_set_defaults, ptr_cinfo_1491, "", label_if_end10_1484);
 void_1518->setCallingConv(CallingConv::C);
 void_1518->setTailCall(false);
 AttributeSet void_1518_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1518_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1518->setAttributes(void_1518_PAL);
 
 std::vector<Value*> void_1519_params;
 void_1519_params.push_back(ptr_cinfo_1491);
 void_1519_params.push_back(const_int32_343);
 void_1519_params.push_back(const_int32_282);
 CallInst* void_1519 = CallInst::Create(func_jpeg_set_quality, void_1519_params, "", label_if_end10_1484);
 void_1519->setCallingConv(CallingConv::C);
 void_1519->setTailCall(false);
 AttributeSet void_1519_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1519_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1519->setAttributes(void_1519_PAL);
 
 std::vector<Value*> void_1520_params;
 void_1520_params.push_back(ptr_cinfo_1491);
 void_1520_params.push_back(const_int32_282);
 CallInst* void_1520 = CallInst::Create(func_jpeg_start_compress, void_1520_params, "", label_if_end10_1484);
 void_1520->setCallingConv(CallingConv::C);
 void_1520->setTailCall(false);
 AttributeSet void_1520_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1520_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1520->setAttributes(void_1520_PAL);
 
 std::vector<Value*> ptr_next_scanline_indices;
 ptr_next_scanline_indices.push_back(const_int64_274);
 ptr_next_scanline_indices.push_back(const_int32_344);
 Instruction* ptr_next_scanline = GetElementPtrInst::Create(ptr_cinfo_1491, ptr_next_scanline_indices, "next_scanline", label_if_end10_1484);
 LoadInst* int32_1521 = new LoadInst(ptr_next_scanline, "", false, label_if_end10_1484);
 int32_1521->setAlignment(4);
 LoadInst* int32_1522 = new LoadInst(ptr_image_height, "", false, label_if_end10_1484);
 int32_1522->setAlignment(4);
 ICmpInst* int1_cmp1223 = new ICmpInst(*label_if_end10_1484, ICmpInst::ICMP_ULT, int32_1521, int32_1522, "cmp1223");
 BranchInst::Create(label_while_body_preheader_1485, label_while_end_1488, int1_cmp1223, label_if_end10_1484);
 
 // Block while.body.preheader (label_while_body_preheader_1485)
 BranchInst::Create(label_while_body_1486, label_while_body_preheader_1485);
 
 // Block while.body (label_while_body_1486)
 Argument* fwdref_1526 = new Argument(IntegerType::get(mod->getContext(), 32));
 PHINode* int32_1525 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "", label_while_body_1486);
 int32_1525->addIncoming(fwdref_1526, label_while_body_1486);
 int32_1525->addIncoming(int32_1521, label_while_body_preheader_1485);
 
 CastInst* int64_idxprom_1527 = new ZExtInst(int32_1525, IntegerType::get(mod->getContext(), 64), "idxprom", label_while_body_1486);
 GetElementPtrInst* ptr_arrayidx_1528 = GetElementPtrInst::Create(ptr_data_1475, int64_idxprom_1527, "arrayidx", label_while_body_1486);
 LoadInst* ptr_1529 = new LoadInst(ptr_arrayidx_1528, "", false, label_while_body_1486);
 ptr_1529->setAlignment(8);
 StoreInst* void_1530 = new StoreInst(ptr_1529, ptr_row_pointer, false, label_while_body_1486);
 void_1530->setAlignment(8);
 std::vector<Value*> int32_call14_params;
 int32_call14_params.push_back(ptr_cinfo_1491);
 int32_call14_params.push_back(ptr_row_pointer);
 int32_call14_params.push_back(const_int32_282);
 CallInst* int32_call14 = CallInst::Create(func_jpeg_write_scanlines, int32_call14_params, "call14", label_while_body_1486);
 int32_call14->setCallingConv(CallingConv::C);
 int32_call14->setTailCall(false);
 AttributeSet int32_call14_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call14_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call14->setAttributes(int32_call14_PAL);
 
 LoadInst* int32_1531 = new LoadInst(ptr_next_scanline, "", false, label_while_body_1486);
 int32_1531->setAlignment(4);
 LoadInst* int32_1532 = new LoadInst(ptr_image_height, "", false, label_while_body_1486);
 int32_1532->setAlignment(4);
 ICmpInst* int1_cmp12_1533 = new ICmpInst(*label_while_body_1486, ICmpInst::ICMP_ULT, int32_1531, int32_1532, "cmp12");
 BranchInst::Create(label_while_body_1486, label_while_end_loopexit_1487, int1_cmp12_1533, label_while_body_1486);
 
 // Block while.end.loopexit (label_while_end_loopexit_1487)
 BranchInst::Create(label_while_end_1488, label_while_end_loopexit_1487);
 
 // Block while.end (label_while_end_1488)
 CallInst* void_1536 = CallInst::Create(func_jpeg_finish_compress, ptr_cinfo_1491, "", label_while_end_1488);
 void_1536->setCallingConv(CallingConv::C);
 void_1536->setTailCall(false);
 AttributeSet void_1536_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1536_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1536->setAttributes(void_1536_PAL);
 
 CallInst* int32_call15 = CallInst::Create(func_fclose, ptr_call_1492, "call15", label_while_end_1488);
 int32_call15->setCallingConv(CallingConv::C);
 int32_call15->setTailCall(false);
 AttributeSet int32_call15_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call15_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call15->setAttributes(int32_call15_PAL);
 
 BranchInst::Create(label_cleanup_1489, label_while_end_1488);
 
 // Block cleanup (label_cleanup_1489)
 PHINode* int32_retval_0_1538 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "retval.0", label_cleanup_1489);
 int32_retval_0_1538->addIncoming(const_int32_248, label_while_end_1488);
 int32_retval_0_1538->addIncoming(const_int32_282, label_if_else7_1483);
 
 std::vector<Value*> void_1539_params;
 void_1539_params.push_back(const_int64_324);
 void_1539_params.push_back(ptr_1500);
 CallInst* void_1539 = CallInst::Create(func_llvm_lifetime_end, void_1539_params, "", label_cleanup_1489);
 void_1539->setCallingConv(CallingConv::C);
 void_1539->setTailCall(false);
 AttributeSet void_1539_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1539_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1539->setAttributes(void_1539_PAL);
 
 std::vector<Value*> void_1540_params;
 void_1540_params.push_back(const_int64_339);
 void_1540_params.push_back(ptr_1498);
 CallInst* void_1540 = CallInst::Create(func_llvm_lifetime_end, void_1540_params, "", label_cleanup_1489);
 void_1540->setCallingConv(CallingConv::C);
 void_1540->setTailCall(false);
 AttributeSet void_1540_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_1540_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_1540->setAttributes(void_1540_PAL);
 
 BranchInst::Create(label_return_1490, label_cleanup_1489);
 
 // Block return (label_return_1490)
 PHINode* int32_retval_1 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "retval.1", label_return_1490);
 int32_retval_1->addIncoming(int32_retval_0_1538, label_cleanup_1489);
 int32_retval_1->addIncoming(const_int32_282, label_if_then_1480);
 
 ReturnInst::Create(mod->getContext(), int32_retval_1, label_return_1490);
 
 // Resolve Forward References
 fwdref_1526->replaceAllUsesWith(int32_1531); delete fwdref_1526;
 
}

return mod;
}
