Printing analysis 'Scalar Evolution Analysis' for function 'filter_kernel':
Classifying expressions for: @filter_kernel
  %div = sdiv i32 %kn, 2
  -->  %div
  %sub = sub nsw i32 0, %div
  -->  (-1 * %div)
  %0 = sub i32 0, %div
  -->  (-1 * %div)
  %1 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %2 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %3 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %4 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %5 = sext i32 %n to i64
  -->  (sext i32 %n to i64)
  %6 = sext i32 %size_x to i64
  -->  (sext i32 %size_x to i64)
  %7 = sext i32 %m to i64
  -->  (sext i32 %m to i64)
  %indvars.iv14 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next15, %for.inc13 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %c.08 = phi i32 [ 0, %for.body.lr.ph ], [ %c.1.lcssa, %for.inc13 ]
  -->  %c.08		Exits: <<Unknown>>
  %sub1 = sub nsw i32 0, %div
  -->  (-1 * %div)		Exits: (-1 * %div)
  %8 = sext i32 %c.08 to i64
  -->  (sext i32 %c.08 to i64)		Exits: <<Unknown>>
  %indvars.iv12 = phi i64 [ %8, %for.body4.lr.ph ], [ %indvars.iv.next13, %for.inc ]
  -->  {(sext i32 %c.08 to i64),+,1}<nsw><%for.body4>		Exits: ((sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %indvars.iv = phi i64 [ %1, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body4>		Exits: (sext i32 %div to i64)
  %9 = sub nsw i64 %5, %indvars.iv14
  -->  {((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))),+,-1}<nw><%for.body>		Exits: {((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))),+,-1}<nw><%for.body>
  %10 = mul nsw i64 %9, %6
  -->  {((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>		Exits: {((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %11 = add nsw i64 %10, %7
  -->  {((sext i32 %m to i64) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>		Exits: {((sext i32 %m to i64) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %12 = sub nsw i64 %11, %indvars.iv
  -->  {{((sext i32 %m to i64) + (-1 * (sext i32 (-1 * %div) to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>,+,-1}<nw><%for.body4>		Exits: {((sext i32 %m to i64) + (-1 * (sext i32 %div to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64))))),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %arrayidx = getelementptr inbounds i8* %in, i64 %12
  -->  {{((sext i32 %m to i64) + (-1 * (sext i32 (-1 * %div) to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))) + %in),+,(-1 * (sext i32 %size_x to i64))}<%for.body>,+,-1}<nw><%for.body4>		Exits: {((sext i32 %m to i64) + (-1 * (sext i32 %div to i64)) + ((sext i32 %size_x to i64) * ((sext i32 %n to i64) + (-1 * (sext i32 (-1 * %div) to i64)))) + %in),+,(-1 * (sext i32 %size_x to i64))}<%for.body>
  %13 = load i8* %arrayidx, align 1
  -->  %13		Exits: <<Unknown>>
  %conv = zext i8 %13 to i32
  -->  (zext i8 %13 to i32)		Exits: <<Unknown>>
  %indvars.iv.next13 = add nsw i64 %indvars.iv12, 1
  -->  {(1 + (sext i32 %c.08 to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %arrayidx9 = getelementptr inbounds float* %kernel, i64 %indvars.iv12
  -->  {((4 * (sext i32 %c.08 to i64)) + %kernel),+,4}<nsw><%for.body4>		Exits: ((4 * (sext i32 %div to i64)) + (4 * (sext i32 %c.08 to i64)) + (-4 * (sext i32 (-1 * %div) to i64)) + %kernel)
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %split.wide = phi i64 [ %indvars.iv.next13, %for.inc ]
  -->  %split.wide		Exits: <<Unknown>>
  %15 = trunc i64 %split.wide to i32
  -->  (trunc i64 %split.wide to i32)		Exits: <<Unknown>>
  %c.1.lcssa = phi i32 [ %15, %for.cond2.for.end_crit_edge ], [ %c.08, %for.body ]
  -->  %c.1.lcssa		Exits: <<Unknown>>
  %indvars.iv.next15 = add nsw i64 %indvars.iv14, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %conv18 = fptoui float %div17 to i8
  -->  %conv18
  %mul19 = mul nsw i32 %n, %size_x
  -->  (%n * %size_x)
  %add20 = add nsw i32 %mul19, %m
  -->  ((%n * %size_x) + %m)
  %idxprom21 = sext i32 %add20 to i64
  -->  (sext i32 ((%n * %size_x) + %m) to i64)
  %arrayidx22 = getelementptr inbounds i8* %out, i64 %idxprom21
  -->  ((sext i32 ((%n * %size_x) + %m) to i64) + %out)<nsw>
Determining loop execution counts for: @filter_kernel
Loop %for.body4: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body4: max backedge-taken count is 4294967295
Loop %for.body: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body: max backedge-taken count is 4294967295
Printing analysis 'Scalar Evolution Analysis' for function 'filter_kernel_2d':
Classifying expressions for: @filter_kernel_2d
  %div = sdiv i32 %kn, 2
  -->  %div
  %sub = sub nsw i32 0, %div
  -->  (-1 * %div)
  %0 = sub i32 0, %div
  -->  (-1 * %div)
  %1 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %2 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %3 = sext i32 %x to i64
  -->  (sext i32 %x to i64)
  %4 = sext i32 %0 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %5 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %6 = sext i32 %y to i64
  -->  (sext i32 %y to i64)
  %indvars.iv15 = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next16, %for.inc13 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %c.08 = phi i32 [ 0, %for.body.lr.ph ], [ %c.1.lcssa, %for.inc13 ]
  -->  %c.08		Exits: <<Unknown>>
  %sub1 = sub nsw i32 0, %div
  -->  (-1 * %div)		Exits: (-1 * %div)
  %7 = sext i32 %c.08 to i64
  -->  (sext i32 %c.08 to i64)		Exits: <<Unknown>>
  %indvars.iv13 = phi i64 [ %7, %for.body4.lr.ph ], [ %indvars.iv.next14, %for.inc ]
  -->  {(sext i32 %c.08 to i64),+,1}<nsw><%for.body4>		Exits: ((sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %indvars.iv = phi i64 [ %1, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body4>		Exits: (sext i32 %div to i64)
  %8 = add nsw i64 %3, %indvars.iv
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64)),+,1}<nw><%for.body4>		Exits: ((sext i32 %x to i64) + (sext i32 %div to i64))
  %9 = add nsw i64 %6, %indvars.iv15
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>		Exits: {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>
  %arrayidx = getelementptr inbounds i8** %in, i64 %9
  -->  {((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,8}<%for.body>		Exits: {((8 * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,8}<%for.body>
  %10 = load i8** %arrayidx, align 8
  -->  %10		Exits: <<Unknown>>
  %arrayidx7 = getelementptr inbounds i8* %10, i64 %8
  -->  ({((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64)),+,1}<nw><%for.body4> + %10)<nsw>		Exits: <<Unknown>>
  %11 = load i8* %arrayidx7, align 1
  -->  %11		Exits: <<Unknown>>
  %conv = zext i8 %11 to i32
  -->  (zext i8 %11 to i32)		Exits: <<Unknown>>
  %indvars.iv.next14 = add nsw i64 %indvars.iv13, 1
  -->  {(1 + (sext i32 %c.08 to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %arrayidx10 = getelementptr inbounds float* %kernel, i64 %indvars.iv13
  -->  {((4 * (sext i32 %c.08 to i64)) + %kernel),+,4}<nsw><%for.body4>		Exits: ((4 * (sext i32 %div to i64)) + (4 * (sext i32 %c.08 to i64)) + (-4 * (sext i32 (-1 * %div) to i64)) + %kernel)
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %split.wide = phi i64 [ %indvars.iv.next14, %for.inc ]
  -->  %split.wide		Exits: <<Unknown>>
  %13 = trunc i64 %split.wide to i32
  -->  (trunc i64 %split.wide to i32)		Exits: <<Unknown>>
  %c.1.lcssa = phi i32 [ %13, %for.cond2.for.end_crit_edge ], [ %c.08, %for.body ]
  -->  %c.1.lcssa		Exits: <<Unknown>>
  %indvars.iv.next16 = add nsw i64 %indvars.iv15, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %conv18 = fptoui float %div17 to i8
  -->  %conv18
  %idxprom19 = sext i32 %x to i64
  -->  (sext i32 %x to i64)
  %idxprom20 = sext i32 %y to i64
  -->  (sext i32 %y to i64)
  %arrayidx21 = getelementptr inbounds i8** %out, i64 %idxprom20
  -->  ((8 * (sext i32 %y to i64))<nsw> + %out)<nsw>
  %14 = load i8** %arrayidx21, align 8
  -->  %14
  %arrayidx22 = getelementptr inbounds i8* %14, i64 %idxprom19
  -->  ((sext i32 %x to i64) + %14)<nsw>
Determining loop execution counts for: @filter_kernel_2d
Loop %for.body4: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body4: max backedge-taken count is 4294967295
Loop %for.body: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body: max backedge-taken count is 4294967295
Printing analysis 'Scalar Evolution Analysis' for function 'filter_kernel_2d_no_indirection':
Classifying expressions for: @filter_kernel_2d_no_indirection
  %0 = zext i32 %m to i64
  -->  (zext i32 %m to i64)
  %1 = zext i32 %n to i64
  -->  (zext i32 %n to i64)
  %2 = zext i32 %m to i64
  -->  (zext i32 %m to i64)
  %3 = zext i32 %n to i64
  -->  (zext i32 %n to i64)
  %div = sdiv i32 %kn, 2
  -->  %div
  %sub = sub nsw i32 0, %div
  -->  (-1 * %div)
  %4 = sub i32 0, %div
  -->  (-1 * %div)
  %5 = sext i32 %4 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %6 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %7 = sext i32 %x to i64
  -->  (sext i32 %x to i64)
  %8 = sext i32 %4 to i64
  -->  (sext i32 (-1 * %div) to i64)
  %9 = sext i32 %div to i64
  -->  (sext i32 %div to i64)
  %10 = sext i32 %y to i64
  -->  (sext i32 %y to i64)
  %indvars.iv15 = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next16, %for.inc13 ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body>		Exits: (sext i32 %div to i64)
  %c.08 = phi i32 [ 0, %for.body.lr.ph ], [ %c.1.lcssa, %for.inc13 ]
  -->  %c.08		Exits: <<Unknown>>
  %sub1 = sub nsw i32 0, %div
  -->  (-1 * %div)		Exits: (-1 * %div)
  %11 = sext i32 %c.08 to i64
  -->  (sext i32 %c.08 to i64)		Exits: <<Unknown>>
  %indvars.iv13 = phi i64 [ %11, %for.body4.lr.ph ], [ %indvars.iv.next14, %for.inc ]
  -->  {(sext i32 %c.08 to i64),+,1}<nsw><%for.body4>		Exits: ((sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %indvars.iv = phi i64 [ %5, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 (-1 * %div) to i64),+,1}<nsw><%for.body4>		Exits: (sext i32 %div to i64)
  %12 = add nsw i64 %7, %indvars.iv
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64)),+,1}<nw><%for.body4>		Exits: ((sext i32 %x to i64) + (sext i32 %div to i64))
  %13 = add nsw i64 %10, %indvars.iv15
  -->  {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>		Exits: {((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64)),+,1}<nw><%for.body>
  %14 = mul nsw i64 %13, %1
  -->  {((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))),+,(zext i32 %n to i64)}<%for.body>		Exits: {((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))),+,(zext i32 %n to i64)}<%for.body>
  %arrayidx = getelementptr inbounds i8* %in, i64 %14
  -->  {(((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,(zext i32 %n to i64)}<%for.body>		Exits: {(((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,(zext i32 %n to i64)}<%for.body>
  %arrayidx7 = getelementptr inbounds i8* %arrayidx, i64 %12
  -->  {{((sext i32 (-1 * %div) to i64) + (sext i32 %x to i64) + ((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,(zext i32 %n to i64)}<%for.body>,+,1}<nw><%for.body4>		Exits: {((sext i32 %x to i64) + (sext i32 %div to i64) + ((zext i32 %n to i64) * ((sext i32 (-1 * %div) to i64) + (sext i32 %y to i64))) + %in),+,(zext i32 %n to i64)}<%for.body>
  %15 = load i8* %arrayidx7, align 1
  -->  %15		Exits: <<Unknown>>
  %conv = zext i8 %15 to i32
  -->  (zext i8 %15 to i32)		Exits: <<Unknown>>
  %indvars.iv.next14 = add nsw i64 %indvars.iv13, 1
  -->  {(1 + (sext i32 %c.08 to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64) + (sext i32 %c.08 to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
  %arrayidx10 = getelementptr inbounds float* %kernel, i64 %indvars.iv13
  -->  {((4 * (sext i32 %c.08 to i64)) + %kernel),+,4}<nsw><%for.body4>		Exits: ((4 * (sext i32 %div to i64)) + (4 * (sext i32 %c.08 to i64)) + (-4 * (sext i32 (-1 * %div) to i64)) + %kernel)
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body4>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %split.wide = phi i64 [ %indvars.iv.next14, %for.inc ]
  -->  %split.wide		Exits: <<Unknown>>
  %17 = trunc i64 %split.wide to i32
  -->  (trunc i64 %split.wide to i32)		Exits: <<Unknown>>
  %c.1.lcssa = phi i32 [ %17, %for.cond2.for.end_crit_edge ], [ %c.08, %for.body ]
  -->  %c.1.lcssa		Exits: <<Unknown>>
  %indvars.iv.next16 = add nsw i64 %indvars.iv15, 1
  -->  {(1 + (sext i32 (-1 * %div) to i64)),+,1}<nsw><%for.body>		Exits: (1 + (sext i32 %div to i64))<nsw>
  %conv18 = fptoui float %div17 to i8
  -->  %conv18
  %idxprom19 = sext i32 %x to i64
  -->  (sext i32 %x to i64)
  %idxprom20 = sext i32 %y to i64
  -->  (sext i32 %y to i64)
  %18 = mul nsw i64 %idxprom20, %3
  -->  ((zext i32 %n to i64) * (sext i32 %y to i64))
  %arrayidx21 = getelementptr inbounds i8* %out, i64 %18
  -->  (((zext i32 %n to i64) * (sext i32 %y to i64)) + %out)<nsw>
  %arrayidx22 = getelementptr inbounds i8* %arrayidx21, i64 %idxprom19
  -->  ((sext i32 %x to i64) + ((zext i32 %n to i64) * (sext i32 %y to i64)) + %out)
Determining loop execution counts for: @filter_kernel_2d_no_indirection
Loop %for.body4: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body4: max backedge-taken count is 4294967295
Loop %for.body: backedge-taken count is ((sext i32 %div to i64) + (-1 * (sext i32 (-1 * %div) to i64)))
Loop %for.body: max backedge-taken count is 4294967295
Printing analysis 'Scalar Evolution Analysis' for function 'convolve':
Classifying expressions for: @convolve
  %div = sdiv i32 %kn, 2
  -->  %div
  %sub = sub nsw i32 0, %div
  -->  (-1 * %div)
  %j.013 = phi i32 [ %sub, %for.body.lr.ph ], [ %inc8, %for.inc7 ]
  -->  {(-1 * %div),+,1}<nsw><%for.body>		Exits: <<Unknown>>
  %k.012 = phi i32 [ 0, %for.body.lr.ph ], [ %k.1.lcssa, %for.inc7 ]
  -->  %k.012		Exits: <<Unknown>>
  %s.011 = phi i32 [ 0, %for.body.lr.ph ], [ %s.1.lcssa, %for.inc7 ]
  -->  %s.011		Exits: <<Unknown>>
  %sub1 = sub nsw i32 0, %div
  -->  (-1 * %div)		Exits: (-1 * %div)
  %0 = sext i32 %k.012 to i64
  -->  (sext i32 %k.012 to i64)		Exits: <<Unknown>>
  %indvars.iv = phi i64 [ %0, %for.body4.lr.ph ], [ %indvars.iv.next, %for.inc ]
  -->  {(sext i32 %k.012 to i64),+,1}<nsw><%for.body4>		Exits: <<Unknown>>
  %i.08 = phi i32 [ %sub1, %for.body4.lr.ph ], [ %inc6, %for.inc ]
  -->  {(-1 * %div),+,1}<nsw><%for.body4>		Exits: <<Unknown>>
  %s.16 = phi i32 [ %s.011, %for.body4.lr.ph ], [ %conv5, %for.inc ]
  -->  %s.16		Exits: <<Unknown>>
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  -->  {(1 + (sext i32 %k.012 to i64)),+,1}<nsw><%for.body4>		Exits: <<Unknown>>
  %arrayidx = getelementptr inbounds float* %kernel, i64 %indvars.iv
  -->  {((4 * (sext i32 %k.012 to i64)) + %kernel),+,4}<nsw><%for.body4>		Exits: <<Unknown>>
  %conv5 = fptosi float %add to i32
  -->  %conv5		Exits: <<Unknown>>
  %inc6 = add nsw i32 %i.08, 1
  -->  {(1 + (-1 * %div)),+,1}<nsw><%for.body4>		Exits: <<Unknown>>
  %split.wide = phi i64 [ %indvars.iv.next, %for.inc ]
  -->  %split.wide		Exits: <<Unknown>>
  %split9 = phi i32 [ %conv5, %for.inc ]
  -->  %split9		Exits: <<Unknown>>
  %2 = trunc i64 %split.wide to i32
  -->  (trunc i64 %split.wide to i32)		Exits: <<Unknown>>
  %k.1.lcssa = phi i32 [ %2, %for.cond2.for.end_crit_edge ], [ %k.012, %for.body ]
  -->  %k.1.lcssa		Exits: <<Unknown>>
  %s.1.lcssa = phi i32 [ %split9, %for.cond2.for.end_crit_edge ], [ %s.011, %for.body ]
  -->  %s.1.lcssa		Exits: <<Unknown>>
  %inc8 = add nsw i32 %j.013, 1
  -->  {(1 + (-1 * %div)),+,1}<nsw><%for.body>		Exits: <<Unknown>>
  %split14 = phi i32 [ %s.1.lcssa, %for.inc7 ]
  -->  %split14
  %s.0.lcssa = phi i32 [ %split14, %for.cond.for.end9_crit_edge ], [ 0, %entry ]
  -->  %s.0.lcssa
  %sub11 = sub nsw i32 %nx, %div
  -->  ((-1 * %div) + %nx)
  %3 = add i32 %ny, -1
  -->  (-1 + %ny)
  %4 = sub i32 %3, %div
  -->  (-1 + (-1 * %div) + %ny)
  %5 = add i32 %nx, -1
  -->  (-1 + %nx)
  %6 = sub i32 %5, %div
  -->  (-1 + (-1 * %div) + %nx)
  %m.04 = phi i32 [ %div, %for.body14.lr.ph ], [ %inc24, %for.inc23 ]
  -->  {%div,+,1}<nsw><%for.body14>		Exits: (-1 + (-1 * %div) + %nx)
  %sub16 = sub nsw i32 %ny, %div
  -->  ((-1 * %div) + %ny)		Exits: ((-1 * %div) + %ny)
  %n.02 = phi i32 [ %div, %for.body19.lr.ph ], [ %inc21, %for.inc20 ]
  -->  {%div,+,1}<nsw><%for.body19>		Exits: (-1 + (-1 * %div) + %ny)
  %inc21 = add nsw i32 %n.02, 1
  -->  {(1 + %div),+,1}<nsw><%for.body19>		Exits: ((-1 * %div) + %ny)
  %inc24 = add nsw i32 %m.04, 1
  -->  {(1 + %div),+,1}<nsw><%for.body14>		Exits: ((-1 * %div) + %nx)
Determining loop execution counts for: @convolve
Loop %for.body19: backedge-taken count is (-1 + (-2 * %div) + %ny)
Loop %for.body19: max backedge-taken count is -1
Loop %for.body14: backedge-taken count is (-1 + (-2 * %div) + %nx)
Loop %for.body14: max backedge-taken count is -1
Loop %for.body4: Unpredictable backedge-taken count. 
Loop %for.body4: Unpredictable max backedge-taken count. 
Loop %for.body: Unpredictable backedge-taken count. 
Loop %for.body: Unpredictable max backedge-taken count. 
