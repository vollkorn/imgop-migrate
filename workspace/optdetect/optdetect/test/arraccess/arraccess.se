Printing analysis 'Scalar Evolution Analysis' for function 'foo':
Classifying expressions for: @foo
  %0 = add i64 %m, -1
  -->  (-1 + %m)
  %1 = add i64 %n, -1
  -->  (-1 + %n)
  %i.04 = phi i64 [ 0, %for.body.lr.ph ], [ %inc6, %for.inc5 ]
  -->  {0,+,1}<nuw><nsw><%for.body>		Exits: (-1 + %n)
  %j.02 = phi i64 [ 0, %for.body3.lr.ph ], [ %inc, %for.inc ]
  -->  {0,+,1}<nuw><nsw><%for.body3>		Exits: (-1 + %m)
  %2 = mul nsw i64 %i.04, %m
  -->  {0,+,%m}<%for.body>		Exits: {0,+,%m}<%for.body>
  %arrayidx = getelementptr inbounds double* %A, i64 %2
  -->  {%A,+,(8 * %m)}<%for.body>		Exits: {%A,+,(8 * %m)}<%for.body>
  %arrayidx4 = getelementptr inbounds double* %arrayidx, i64 %j.02
  -->  {{%A,+,(8 * %m)}<%for.body>,+,8}<nsw><%for.body3>		Exits: {(-8 + (8 * %m) + %A),+,(8 * %m)}<%for.body>
  %inc = add nuw nsw i64 %j.02, 1
  -->  {1,+,1}<nuw><nsw><%for.body3>		Exits: %m
  %inc6 = add nuw nsw i64 %i.04, 1
  -->  {1,+,1}<nuw><nsw><%for.body>		Exits: %n
Determining loop execution counts for: @foo
Loop %for.body3: backedge-taken count is (-1 + %m)
Loop %for.body3: max backedge-taken count is -1
Loop %for.body: backedge-taken count is (-1 + %n)
Loop %for.body: max backedge-taken count is -1
Printing analysis 'Scalar Evolution Analysis' for function 'bar':
Classifying expressions for: @bar
  %0 = add i64 %m, -1
  -->  (-1 + %m)
  %1 = add i64 %n, -1
  -->  (-1 + %n)
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %inc7, %for.inc6 ]
  -->  {0,+,1}<nuw><nsw><%for.body>		Exits: (-1 + %n)
  %foo.05 = phi i64 [ 0, %for.body.lr.ph ], [ %foo.1.lcssa, %for.inc6 ]
  -->  %foo.05		Exits: <<Unknown>>
  %j.03 = phi i64 [ 0, %for.body3.lr.ph ], [ %inc, %for.inc ]
  -->  {0,+,1}<nuw><nsw><%for.body3>		Exits: (-1 + %m)
  %foo.12 = phi i64 [ %foo.05, %for.body3.lr.ph ], [ %conv5, %for.inc ]
  -->  %foo.12		Exits: <<Unknown>>
  %2 = mul nsw i64 %i.06, %m
  -->  {0,+,%m}<%for.body>		Exits: {0,+,%m}<%for.body>
  %arrayidx = getelementptr inbounds double* %A, i64 %2
  -->  {%A,+,(8 * %m)}<%for.body>		Exits: {%A,+,(8 * %m)}<%for.body>
  %arrayidx4 = getelementptr inbounds double* %arrayidx, i64 %j.03
  -->  {{%A,+,(8 * %m)}<%for.body>,+,8}<nsw><%for.body3>		Exits: {(-8 + (8 * %m) + %A),+,(8 * %m)}<%for.body>
  %conv5 = fptosi double %add to i64
  -->  %conv5		Exits: <<Unknown>>
  %inc = add nuw nsw i64 %j.03, 1
  -->  {1,+,1}<nuw><nsw><%for.body3>		Exits: %m
  %split = phi i64 [ %conv5, %for.inc ]
  -->  %split		Exits: <<Unknown>>
  %foo.1.lcssa = phi i64 [ %split, %for.cond1.for.end_crit_edge ], [ %foo.05, %for.body ]
  -->  %foo.1.lcssa		Exits: <<Unknown>>
  %inc7 = add nuw nsw i64 %i.06, 1
  -->  {1,+,1}<nuw><nsw><%for.body>		Exits: %n
Determining loop execution counts for: @bar
Loop %for.body3: backedge-taken count is (-1 + %m)
Loop %for.body3: max backedge-taken count is -1
Loop %for.body: backedge-taken count is (-1 + %n)
Loop %for.body: max backedge-taken count is -1
Printing analysis 'Scalar Evolution Analysis' for function 'bla':
Classifying expressions for: @bla
  %0 = add i64 %m, -1
  -->  (-1 + %m)
  %1 = add i64 %n, -1
  -->  (-1 + %n)
  %i.06 = phi i64 [ 0, %for.body.lr.ph ], [ %inc7, %for.inc6 ]
  -->  {0,+,1}<nuw><nsw><%for.body>		Exits: (-1 + %n)
  %foo.05 = phi i64 [ 0, %for.body.lr.ph ], [ %foo.1.lcssa, %for.inc6 ]
  -->  %foo.05		Exits: <<Unknown>>
  %j.03 = phi i64 [ 0, %for.body3.lr.ph ], [ %inc, %for.inc ]
  -->  {0,+,1}<nuw><nsw><%for.body3>		Exits: (-1 + %m)
  %foo.12 = phi i64 [ %foo.05, %for.body3.lr.ph ], [ %conv5, %for.inc ]
  -->  %foo.12		Exits: <<Unknown>>
  %arrayidx = getelementptr inbounds double** %A, i64 %i.06
  -->  {%A,+,8}<nsw><%for.body>		Exits: {%A,+,8}<nsw><%for.body>
  %2 = load double** %arrayidx, align 8
  -->  %2		Exits: <<Unknown>>
  %arrayidx4 = getelementptr inbounds double* %2, i64 %j.03
  -->  ({0,+,8}<nuw><nsw><%for.body3> + %2)<nsw>		Exits: <<Unknown>>
  %conv5 = fptosi double %add to i64
  -->  %conv5		Exits: <<Unknown>>
  %inc = add nuw nsw i64 %j.03, 1
  -->  {1,+,1}<nuw><nsw><%for.body3>		Exits: %m
  %split = phi i64 [ %conv5, %for.inc ]
  -->  %split		Exits: <<Unknown>>
  %foo.1.lcssa = phi i64 [ %split, %for.cond1.for.end_crit_edge ], [ %foo.05, %for.body ]
  -->  %foo.1.lcssa		Exits: <<Unknown>>
  %inc7 = add nuw nsw i64 %i.06, 1
  -->  {1,+,1}<nuw><nsw><%for.body>		Exits: %n
Determining loop execution counts for: @bla
Loop %for.body3: backedge-taken count is (-1 + %m)
Loop %for.body3: max backedge-taken count is -1
Loop %for.body: backedge-taken count is (-1 + %n)
Loop %for.body: max backedge-taken count is -1
